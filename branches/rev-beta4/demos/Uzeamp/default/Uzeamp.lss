
Uzeamp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00007f66  00008080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007f66  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d7f  0080016e  00007fd4  000080ee  2**5
                  ALLOC
  3 .debug_aranges 00000398  00000000  00000000  000080ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ce0  00000000  00000000  00008486  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c6b  00000000  00000000  00009166  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c71  00000000  00000000  0000cdd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002cf5  00000000  00000000  0000da42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  00010738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001351  00000000  00000000  00010dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000026d4  00000000  00000000  00012119  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  000147ed  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__ctors_end>


/*
* Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
*/
void PatchCommand00(unsigned char track, char param){
       4:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}


	void SetSpriteVisibility(bool visible){
       8:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
}


//used in multi sector read
int mmc_readNextSector(uint8_t *buffer)
{
       c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
const char skinNames[8][11]={"METAL","ATLANTIS","PURPLE HAZE","GOLDFINGER","FOREST","FREAK","ST3","RED ALERT"};



unsigned char currSkin=0;
void flipSkin(){
      10:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      14:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      18:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      1c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      20:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      24:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      28:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      2c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      30:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      34:	0c 94 10 24 	jmp	0x4820	; 0x4820 <__vector_13>
      38:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      3c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      40:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      44:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      48:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      4c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      50:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      54:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      58:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      5c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      60:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      64:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      68:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>
      6c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__bad_interrupt>

00000070 <__c.1942>:
      70:	54 4f 4b 45 4e 21 00                                TOKEN!.

00000077 <__c.1861>:
      77:	45 52 52 4f 52 3a 31 00                             ERROR:1.

0000007f <main_tileset>:
      7f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
      8f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
      9f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
      af:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
      bf:	52 52 52 49 49 52 52 52 52 52 49 a4 5b 49 52 52     RRRIIRRRRRI.[IRR
      cf:	52 52 00 b6 f6 5b 49 52 52 52 09 f6 ff ff a4 09     RR...[IRRR......
      df:	52 49 09 ff ff ff ff ad 52 49 52 ff ff ff ff ff     RI......RIR.....
      ef:	52 09 5b ff ff ff ff ff 09 09 ad ff ff ff ff ff     R.[.............
      ff:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     10f:	52 52 52 52 52 52 52 52 49 52 52 49 09 09 52 52     RRRRRRRRIRRI..RR
     11f:	49 49 09 49 5b a4 a4 52 f6 ad b6 ff ff ff f6 52     II.I[..R.......R
     12f:	ff ff ff ff ff ff a4 52 ff ff ff ff ff ff 52 52     .......R......RR
     13f:	52 09 09 09 49 52 52 52 09 52 5b 5b 5b 52 52 52     R...IRRR.R[[[RRR
     14f:	09 5b 64 64 a4 52 52 52 09 5b a4 a4 a4 52 52 52     .[dd.RRR.[...RRR
     15f:	09 52 64 a4 a4 52 52 52 09 5b 64 a4 64 52 52 52     .Rd..RRR.[d.dRRR
     16f:	09 5b a4 a4 a4 52 52 52 09 5b 64 a4 64 49 52 52     .[...RRR.[d.dIRR
     17f:	52 52 52 49 09 09 09 49 52 52 49 52 5b 5b 64 52     RRRI...IRRIR[[dR
     18f:	52 52 09 12 a4 ad 64 52 52 52 09 52 ad a4 ad 52     RR....dRRR.R...R
     19f:	52 52 09 52 a4 ad ad 52 52 52 09 52 ad a4 a4 5b     RR.R...RRR.R...[
     1af:	52 52 09 52 64 ad a4 52 52 52 09 52 ad a4 ad 52     RR.Rd..RRR.R...R
     1bf:	49 09 09 09 09 09 09 09 09 5b 5b 5b 5b 64 64 5b     I........[[[[dd[
     1cf:	49 ad ad ad ad ad ad ad 49 64 64 64 64 a4 64 64     I.......Idddd.dd
     1df:	52 52 52 52 49 09 00 00 52 52 52 49 09 00 52 e4     RRRRI...RRRI..R.
     1ef:	52 52 09 00 52 a4 ad ad 09 00 52 a4 ad ad ad ad     RR..R.....R.....
     1ff:	09 09 09 09 09 09 09 09 64 64 64 64 64 64 a4 09     ........dddddd..
     20f:	ed ad ad ed b6 ed b6 52 64 64 ed b6 ad b6 ed 52     .......Rdd.....R
     21f:	52 a4 ad ad ad ad ad 49 ad ed ad ad ed 64 49 52     R......I.....dIR
     22f:	ad ad ad 5b 52 52 49 49 ad 5b 49 52 52 52 49 49     ...[RRII.[IRRRII
     23f:	09 09 09 09 09 09 09 09 64 64 64 64 a4 64 a4 64     ........dddd.d.d
     24f:	f6 ad f6 f6 b6 f6 b6 f6 ed b6 f6 ad 64 a4 64 a4     ............d.d.
     25f:	b6 ad ad a4 00 00 00 00 ed b6 f6 a4 5b 52 5b 52     ............[R[R
     26f:	ad f6 ad ad f6 b6 ad f6 f6 ad b6 f6 ad ad f6 ad     ................
     27f:	09 09 09 09 09 49 49 09 64 a4 64 64 a4 a4 00 9b     .....II.d.dd....
     28f:	f6 b6 f6 f6 b6 f6 00 a4 64 a4 64 a4 a4 a4 00 64     ........d.d....d
     29f:	00 00 09 52 52 52 00 a4 52 5b 52 52 52 52 09 64     ...RRR..R[RRRR.d
     2af:	b6 ed 5b 52 52 52 09 a4 b6 b6 9b 52 52 52 00 a4     ..[RRR.....RRR..
     2bf:	09 09 09 09 09 09 09 09 64 a4 a4 64 a4 64 a4 a4     ........d..d.d..
     2cf:	f6 ff b6 f6 f6 f6 ff b6 f6 b6 f6 b6 64 ad 64 a4     ............d.d.
     2df:	ff f6 b6 52 49 52 52 49 b6 b6 f6 52 52 52 52 52     ...RIRRI...RRRRR
     2ef:	f6 ad f6 52 09 09 09 09 b6 f6 b6 9b 5b 5b 5b 5b     ...R........[[[[
     2ff:	09 09 09 09 09 49 49 09 64 ad a4 64 ad 52 49 a4     .....II.d..d.RI.
     30f:	ff f6 f6 ff f6 5b 52 ff a4 ad ff b6 ff 5b 52 f6     .....[R......[R.
     31f:	00 5b f6 ff b6 5b 52 bf 09 5b b6 f6 f6 5b 52 ff     .[...[R..[...[R.
     32f:	00 5b f6 b6 f6 5b 52 f6 5b a4 b6 f6 ff 5b 52 f6     .[...[R.[....[R.
     33f:	09 49 52 52 52 52 52 52 ad 5b 09 49 52 52 52 49     .IRRRRRR.[.IRRRI
     34f:	b6 ff f6 52 09 49 09 09 ff f6 b6 ff a4 49 52 f6     ...R.I.......IR.
     35f:	f6 ff ff f6 bf ff ff b6 b6 ff f6 ff ff f6 ff ff     ................
     36f:	f6 ff ed b6 f6 ff ff f6 bf f6 ad 00 5b b6 ad 52     ............[..R
     37f:	52 49 09 09 09 09 09 09 00 09 ad ad a4 49 a4 ad     RI...........I..
     38f:	5b ff ff ff ff 52 bf ff ff ff b6 ff f6 52 ff f6     [....R.......R..
     39f:	ff f6 ff ff ff 52 ff ff ff ff ff f6 ff 52 ff f6     .....R.......R..
     3af:	a4 f6 ff bf ff 52 f6 ff 00 ff ff f6 ff 52 ff ff     .....R.......R..
     3bf:	09 09 09 09 09 09 09 09 a4 6d ad 64 ad a4 a4 ad     .........m.d....
     3cf:	ff f6 ff f6 ff f6 bf f6 b6 ff a4 6d a4 64 a4 64     ...........m.d.d
     3df:	ff a4 00 00 00 00 00 00 ff f6 5b 5b 5b 5b 5b 5b     ..........[[[[[[
     3ef:	bf f6 f6 f6 f6 bf f6 ff f6 ff ff bf f6 f6 b6 f6     ................
     3ff:	09 09 09 49 52 52 49 00 64 a4 a4 a4 49 09 09 a4     ...IRRI.d...I...
     40f:	ff f6 bf f6 49 5b b6 ff f6 b6 f6 b6 49 a4 ff ff     ....I[......I...
     41f:	ff f6 f6 f6 49 52 5b ad f6 bf ff b6 49 52 52 49     ....IR[.....IRRI
     42f:	f6 f6 f6 f6 49 52 52 52 b6 f6 b6 b6 52 52 52 52     ....IRRR....RRRR
     43f:	49 a4 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     I...............
     44f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     45f:	ff ff ff ff ff ff ff ff 52 ad f6 ff ff ff ff ff     ........R.......
     46f:	52 09 5b f6 ff ff ff ff 52 52 09 f6 ff ff ff ff     R.[.....RR......
     47f:	ff ff ff ff ff ad 52 52 ff ff ff ff ff 5b 52 52     ......RR.....[RR
     48f:	ff ff ff ff f6 52 52 52 ff ff ff ff ff 5b 52 52     .....RRR.....[RR
     49f:	ff ff ff ff ff ad 52 52 ff ff ff ff ff ff a4 49     ......RR.......I
     4af:	ff ff ff ff ff ff f6 52 ff ff ff ff ff ff ff ad     .......R........
     4bf:	09 52 a4 5b a4 09 09 09 09 5b a4 64 a4 52 12 52     .R.[.....[.d.R.R
     4cf:	09 5b 9b a4 a4 64 a4 a4 49 5b 64 a4 64 a4 a4 a4     .[...d..I[d.d...
     4df:	52 52 49 49 49 49 49 49 52 52 52 52 52 52 52 52     RRIIIIIIRRRRRRRR
     4ef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     4ff:	09 09 00 52 a4 ad a4 52 12 52 52 5b 64 a4 64 52     ...R...R.RR[d.dR
     50f:	a4 64 a4 64 a4 a4 a4 52 a4 a4 a4 ad a4 ad ad 52     .d.d...R.......R
     51f:	49 49 49 49 49 49 52 52 52 52 52 52 52 52 52 52     IIIIIIRRRRRRRRRR
     52f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     53f:	09 a4 a4 ad a4 ad ad 5b 49 a4 a4 a4 ad ad 52 52     .......[I.....RR
     54f:	09 ad a4 ad a4 a4 ad ad 52 ad ad ad ad ad ad a4     ........R.......
     55f:	52 49 49 49 49 49 49 49 52 52 52 52 52 52 52 52     RIIIIIIIRRRRRRRR
     56f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     57f:	09 00 09 09 09 09 00 52 52 52 52 52 52 52 52 49     .......RRRRRRRRI
     58f:	ad ad ad ad ad ad ed 52 ad ad ed ad ed ad b6 49     .......R.......I
     59f:	49 49 49 49 49 49 52 52 52 52 52 52 52 52 52 52     IIIIIIRRRRRRRRRR
     5af:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     5bf:	ad f6 ad b6 00 00 00 00 ad ad b6 ed 5b 52 5b 5b     ............[R[[
     5cf:	ed b6 ed b6 ed b6 ed b6 ad b6 ad ad b6 ad b6 ed     ................
     5df:	49 49 49 49 49 49 49 49 52 52 52 52 52 52 52 52     IIIIIIIIRRRRRRRR
     5ef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     5ff:	00 00 09 09 49 49 00 64 52 5b 5b 5b 5b 5b 00 a4     ....II.dR[[[[[..
     60f:	f6 f6 b6 f6 f6 b6 00 a4 ad b6 ed b6 ad f6 09 64     ...............d
     61f:	49 49 49 49 49 52 52 52 52 52 52 52 52 52 52 52     IIIIIRRRRRRRRRRR
     62f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     63f:	f6 b6 f6 f6 f6 f6 f6 b6 f6 f6 ff b6 f6 bf f6 ff     ................
     64f:	b6 f6 b6 52 49 49 49 49 b6 b6 f6 5b 52 52 52 52     ...RIIII...[RRRR
     65f:	49 49 52 52 52 52 52 52 52 52 52 52 52 52 52 52     IIRRRRRRRRRRRRRR
     66f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     67f:	f6 ff f6 b6 f6 5b 52 ff f6 b6 ff ff f6 5b 52 b6     .....[R......[R.
     68f:	00 5b f6 f6 b6 5b 52 ff 52 5b b6 f6 f6 5b 52 b6     .[...[R.R[...[R.
     69f:	52 52 49 49 52 52 52 49 52 52 52 52 52 52 52 52     RRIIRRRIRRRRRRRR
     6af:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     6bf:	f6 bf a4 49 52 52 52 52 ff f6 6d 52 52 52 52 52     ...IRRRR..mRRRRR
     6cf:	f6 ff a4 52 52 52 52 52 f6 b6 ad 52 52 52 52 52     ...RRRRR...RRRRR
     6df:	49 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     IRRRRRRRRRRRRRRR
     6ef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     6ff:	00 ff ff ff ff 52 bf ff 00 f6 bf f6 ff 52 ff f6     .....R.......R..
     70f:	00 ff f6 ff b6 52 f6 bf 09 f6 ff f6 ff 52 ff f6     .....R.......R..
     71f:	52 52 49 49 52 52 49 49 52 52 52 52 52 52 52 52     RRIIRRIIRRRRRRRR
     72f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     73f:	ff a4 09 49 49 49 49 49 f6 6d 52 52 52 52 52 52     ...IIIII.mRRRRRR
     74f:	ff a4 52 52 52 52 52 52 f6 ad 52 52 52 52 52 52     ..RRRRRR..RRRRRR
     75f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     76f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     77f:	49 49 49 52 52 52 52 52 52 52 52 52 52 52 52 52     IIIRRRRRRRRRRRRR
     78f:	52 ff ff ff 52 52 52 ff 52 ff 52 ff 52 52 52 ff     R...RRR.R.R.RRR.
     79f:	52 ff ff ff 52 ff 52 ff 52 52 52 52 52 52 52 52     R...R.R.RRRRRRRR
     7af:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     7bf:	52 52 09 ad ff ff ff ff 52 52 49 5b ff ff ff b6     RR......RRI[....
     7cf:	52 52 49 49 ff ff ad 52 52 52 52 09 f6 f6 52 52     RRII...RRRR...RR
     7df:	52 52 52 52 a4 52 52 52 52 52 52 52 52 52 52 52     RRRR.RRRRRRRRRRR
     7ef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     7ff:	ad 52 52 5b 52 a4 a4 a4 52 52 52 52 52 52 52 52     .RR[R...RRRRRRRR
     80f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     81f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     82f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
     83f:	52 52 52 52 52 52 09 00 52 52 52 52 52 09 00 52     RRRRRR..RRRRR..R
     84f:	52 52 52 52 09 00 52 9b 52 52 52 09 00 52 9b 48     RRRR..R.RRR..R.H
     85f:	52 52 09 00 52 9b 48 48 52 09 00 52 9b 48 48 48     RR..R.HHR..R.HHH
     86f:	09 00 52 9b 48 48 48 48 09 00 9b 48 48 48 48 48     ..R.HHHH...HHHHH
	...
     887:	52 52 52 52 52 52 52 52 9b 9b 9b 9b 9b 9b 9b 9b     RRRRRRRR........
     897:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     8a7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     8b7:	48 48 48 48 48 48 48 48 00 00 00 00 00 00 49 52     HHHHHHHH......IR
     8c7:	52 52 52 52 52 52 00 a4 9b 9b 9b 9b 9b 9a 00 ad     RRRRRR..........
     8d7:	48 48 48 48 48 48 00 ad 48 48 48 48 48 48 00 ad     HHHHHH..HHHHHH..
     8e7:	48 48 48 48 48 48 00 ad 48 48 48 48 48 48 00 ad     HHHHHH..HHHHHH..
     8f7:	48 48 48 48 48 48 00 ad 09 00 9b 48 48 48 48 48     HHHHHH.....HHHHH
     907:	09 00 9b 48 48 48 48 48 09 00 9b 48 48 48 48 48     ...HHHHH...HHHHH
     917:	09 00 9b 48 48 48 48 48 09 00 9b 48 48 48 48 48     ...HHHHH...HHHHH
     927:	09 00 9b 48 48 48 48 48 09 00 9b 48 48 48 48 48     ...HHHHH...HHHHH
     937:	09 00 9b 48 48 48 48 48 48 48 48 48 48 48 48 48     ...HHHHHHHHHHHHH
     947:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     957:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     967:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     977:	48 48 9b 48 9b 48 48 48 9b 48 9b 48 9b 48 9b 48     HH.H.HHH.H.H.H.H
     987:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     997:	48 00 48 00 48 00 48 00 9b 48 9b 48 48 48 48 48     H.H.H.H..H.HHHHH
     9a7:	48 00 48 00 48 48 48 48 9b 48 9b 48 48 48 48 48     H.H.HHHH.H.HHHHH
     9b7:	48 00 48 00 48 48 48 48 9b 48 9b 48 9b 48 48 48     H.H.HHHH.H.H.HHH
     9c7:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     9d7:	48 00 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     H.H.H.HHHH.H.HHH
     9e7:	48 48 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     HHH.H.HHHH.H.HHH
     9f7:	48 48 48 00 48 00 48 48 48 48 48 48 9b 48 9b 48     HHH.H.HHHHHH.H.H
     a07:	48 48 48 48 48 00 48 00 48 48 48 48 9b 48 9b 48     HHHHH.H.HHHH.H.H
     a17:	48 48 48 48 48 00 48 00 48 48 48 48 48 48 9b 48     HHHHH.H.HHHHHH.H
     a27:	48 48 48 48 48 48 48 00 48 48 48 48 48 48 9b 48     HHHHHHH.HHHHHH.H
     a37:	48 48 48 48 48 48 48 00 9b 48 48 48 48 48 48 48     HHHHHHH..HHHHHHH
     a47:	48 00 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     H.HHHHHH.HHHHHHH
     a57:	48 00 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     H.HHHHHH.HHHHHHH
     a67:	48 00 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     H.HHHHHH.HHHHHHH
     a77:	48 00 48 48 48 48 48 48 9b 48 9b 48 9b 48 9b 48     H.HHHHHH.H.H.H.H
     a87:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     a97:	48 00 48 00 48 00 48 00 48 48 48 48 48 48 48 48     H.H.H.H.HHHHHHHH
     aa7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     ab7:	48 48 48 48 48 48 48 48 9b 48 9b 48 48 48 48 48     HHHHHHHH.H.HHHHH
     ac7:	48 00 48 00 48 48 48 48 9b 48 9b 48 48 48 48 48     H.H.HHHH.H.HHHHH
     ad7:	48 00 48 00 48 48 48 48 9b 48 9b 48 48 48 48 48     H.H.HHHH.H.HHHHH
     ae7:	48 00 48 00 48 48 48 48 9b 48 9b 48 48 48 48 48     H.H.HHHH.H.HHHHH
     af7:	48 00 48 00 48 48 48 48 48 48 9b 48 9b 48 48 48     H.H.HHHHHH.H.HHH
     b07:	48 48 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     HHH.H.HHHH.H.HHH
     b17:	48 48 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     HHH.H.HHHH.H.HHH
     b27:	48 48 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     HHH.H.HHHH.H.HHH
     b37:	48 48 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     HHH.H.HH.H.H.HHH
     b47:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     b57:	48 00 48 00 48 00 48 48 48 48 48 48 48 48 48 48     H.H.H.HHHHHHHHHH
     b67:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     b77:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     b87:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     b97:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     ba7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     bb7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 00 ad     HHHHHHHHHHHHHH..
     bc7:	48 48 48 48 48 48 00 ad 48 48 48 48 48 48 00 ad     HHHHHH..HHHHHH..
     bd7:	48 48 48 48 48 48 00 ad 48 48 48 48 48 48 00 ad     HHHHHH..HHHHHH..
     be7:	48 48 48 48 48 48 00 ad 48 48 48 48 48 48 00 ad     HHHHHH..HHHHHH..
     bf7:	48 48 48 48 48 48 00 ad 48 48 48 00 48 00 48 48     HHHHHH..HHH.H.HH
     c07:	48 48 9b 48 9b 48 48 48 48 48 48 00 48 00 48 48     HH.H.HHHHHH.H.HH
     c17:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     c27:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     c37:	48 48 9b 48 9b 48 48 48 48 48 48 48 48 48 9b 48     HH.H.HHHHHHHHH.H
     c47:	48 48 48 48 48 48 48 00 48 48 48 48 48 48 9b 48     HHHHHHH.HHHHHH.H
     c57:	48 48 48 48 48 48 48 00 48 48 48 48 48 48 9b 48     HHHHHHH.HHHHHH.H
     c67:	48 48 48 48 48 48 48 00 48 48 48 48 48 48 9b 48     HHHHHHH.HHHHHH.H
     c77:	48 48 48 48 48 48 48 00 48 48 48 48 48 48 48 48     HHHHHHH.HHHHHHHH
     c87:	48 48 48 48 48 48 48 48 9b 48 9b 48 9b 48 9b 48     HHHHHHHH.H.H.H.H
     c97:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     ca7:	48 00 48 00 48 00 48 00 9b 48 9b 48 48 48 48 48     H.H.H.H..H.HHHHH
     cb7:	48 00 48 00 48 48 48 48 48 48 9b 48 9b 48 48 48     H.H.HHHHHH.H.HHH
     cc7:	48 48 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     HHH.H.HH.H.H.HHH
     cd7:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     ce7:	48 00 48 00 48 00 48 48 48 48 48 48 48 48 48 48     H.H.H.HHHHHHHHHH
     cf7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     d07:	48 48 48 48 48 48 48 48 9b 48 9b 48 9b 48 9b 48     HHHHHHHH.H.H.H.H
     d17:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     d27:	48 00 48 00 48 00 48 00 48 48 48 48 48 48 48 48     H.H.H.H.HHHHHHHH
     d37:	48 48 48 48 48 48 48 48 48 48 9b 48 9b 48 48 48     HHHHHHHHHH.H.HHH
     d47:	48 48 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     HHH.H.HH.H.H.HHH
     d57:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     d67:	48 00 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     H.H.H.HHHH.H.HHH
     d77:	48 48 48 00 48 00 48 48 9b 48 9b 48 48 48 48 48     HHH.H.HH.H.HHHHH
     d87:	48 00 48 00 48 48 48 48 9b 48 9b 48 9b 48 9b 48     H.H.HHHH.H.H.H.H
     d97:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     da7:	48 00 48 00 48 00 48 00 48 48 48 48 48 48 48 48     H.H.H.H.HHHHHHHH
     db7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     dc7:	48 48 48 48 48 48 48 48 9b 48 9b 48 9b 48 48 48     HHHHHHHH.H.H.HHH
     dd7:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     de7:	48 00 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     H.H.H.HHHH.H.HHH
     df7:	48 48 48 00 48 00 48 48 9b 48 9b 48 48 48 48 48     HHH.H.HH.H.HHHHH
     e07:	48 00 48 00 48 48 48 48 9b 48 9b 48 9b 48 9b 48     H.H.HHHH.H.H.H.H
     e17:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     e27:	48 00 48 00 48 00 48 00 9b 48 9b 48 48 48 48 48     H.H.H.H..H.HHHHH
     e37:	48 00 48 00 48 48 48 48 48 48 48 00 48 00 48 48     H.H.HHHHHHH.H.HH
     e47:	48 48 9b 48 9b 48 48 48 48 48 48 00 48 00 48 48     HH.H.HHHHHH.H.HH
     e57:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     e67:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     e77:	48 48 48 48 48 48 48 48 9b 48 9b 48 48 48 48 48     HHHHHHHH.H.HHHHH
     e87:	48 00 48 00 48 48 48 48 9b 48 9b 48 48 48 48 48     H.H.HHHH.H.HHHHH
     e97:	48 00 48 00 48 48 48 48 9b 48 9b 48 9b 48 9b 48     H.H.HHHH.H.H.H.H
     ea7:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     eb7:	48 00 48 00 48 00 48 00 48 48 9b 48 9b 48 48 48     H.H.H.H.HH.H.HHH
     ec7:	48 48 48 00 48 00 48 48 48 48 9b 48 9b 48 48 48     HHH.H.HHHH.H.HHH
     ed7:	48 48 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     HHH.H.HH.H.H.HHH
     ee7:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     ef7:	48 00 48 00 48 00 48 48 48 48 48 48 48 48 9b 48     H.H.H.HHHHHHHH.H
     f07:	48 48 48 48 48 48 48 00 48 48 48 48 48 48 9b 48     HHHHHHH.HHHHHH.H
     f17:	48 48 48 48 48 48 48 00 48 48 9b 48 9b 48 9b 48     HHHHHHH.HH.H.H.H
     f27:	48 48 48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48     HHH.H.H.HH.H.H.H
     f37:	48 48 48 00 48 00 48 00 9b 48 48 48 48 48 48 48     HHH.H.H..HHHHHHH
     f47:	48 00 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     H.HHHHHH.HHHHHHH
     f57:	48 00 48 48 48 48 48 48 9b 48 9b 48 9b 48 48 48     H.HHHHHH.H.H.HHH
     f67:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     f77:	48 00 48 00 48 00 48 48 48 48 48 48 48 48 48 48     H.H.H.HHHHHHHHHH
     f87:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     f97:	48 48 48 48 48 48 48 48 9b 48 9b 48 9b 48 48 48     HHHHHHHH.H.H.HHH
     fa7:	48 00 48 00 48 00 48 48 9b 48 9b 48 9b 48 48 48     H.H.H.HH.H.H.HHH
     fb7:	48 00 48 00 48 00 48 48 48 48 48 48 48 48 48 48     H.H.H.HHHHHHHHHH
     fc7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
     fd7:	48 48 48 48 48 48 48 48 9b 48 9b 48 9b 48 9b 48     HHHHHHHH.H.H.H.H
     fe7:	48 00 48 00 48 00 48 00 9b 48 9b 48 9b 48 9b 48     H.H.H.H..H.H.H.H
     ff7:	48 00 48 00 48 00 48 00 09 00 9b 48 48 48 48 48     H.H.H.H....HHHHH
    1007:	09 00 9b 48 48 48 48 48 09 00 9b 48 48 48 48 48     ...HHHHH...HHHHH
    1017:	09 00 9b 48 48 48 48 48 09 00 9b 48 48 48 48 48     ...HHHHH...HHHHH
    1027:	09 00 9b 48 48 48 48 48 09 00 00 00 00 00 00 00     ...HHHHH........
    1037:	ad b6 f6 f6 f6 f6 f6 f6 48 48 48 48 48 48 48 48     ........HHHHHHHH
    1047:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    1057:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    1067:	48 48 48 48 48 48 48 48 00 00 00 00 00 00 00 00     HHHHHHHH........
    1077:	f6 f6 f6 f6 f6 f6 f6 f6 48 48 48 48 48 00 52 ad     ........HHHHH.R.
    1087:	48 48 48 48 00 52 f6 a4 48 48 48 00 52 f6 a4 52     HHHH.R..HHH.R..R
    1097:	48 48 00 52 f6 a4 52 52 48 00 52 f6 a4 52 52 52     HH.R..RRH.R..RRR
    10a7:	00 52 f6 a4 52 52 52 52 52 f6 a4 52 52 52 52 52     .R..RRRRR..RRRRR
    10b7:	f6 a4 52 52 52 52 52 52 52 52 52 52 52 52 52 52     ..RRRRRRRRRRRRRR
    10c7:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    10d7:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    10e7:	52 52 52 52 52 52 52 52 00 00 00 00 00 00 00 00     RRRRRRRR........
    10f7:	00 f6 f6 f6 f6 f6 f6 f6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1107:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1117:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1127:	52 52 52 52 52 52 52 52 00 00 00 00 00 00 00 00     RRRRRRRR........
    1137:	f6 f6 f6 f6 f6 f6 f6 f6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1147:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1157:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1167:	52 52 52 52 52 52 52 52 00 00 00 00 00 00 00 f6     RRRRRRRR........
    1177:	f6 f6 f6 f6 f6 f6 f6 f6 52 52 52 52 52 52 52 09     ........RRRRRRR.
    1187:	52 52 52 52 52 52 09 00 52 52 52 52 52 09 00 00     RRRRRR..RRRRR...
    1197:	52 52 52 52 09 00 00 00 52 52 52 09 00 00 00 00     RRRR....RRR.....
    11a7:	52 52 09 00 00 00 00 00 52 09 00 00 00 00 00 00     RR......R.......
    11b7:	09 00 00 00 00 00 00 00 09 09 09 09 09 09 09 09     ................
	...
    11ff:	a4 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    120f:	ad 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    121f:	ad 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    122f:	ad 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    123f:	52 52 52 52 52 52 52 09 52 52 52 52 52 52 52 09     RRRRRRR.RRRRRRR.
    124f:	52 52 52 52 52 52 52 09 52 52 52 52 52 52 52 09     RRRRRRR.RRRRRRR.
    125f:	52 52 52 52 52 52 52 09 52 52 52 52 52 52 52 09     RRRRRRR.RRRRRRR.
    126f:	52 52 52 52 52 52 52 09 52 52 52 52 52 52 52 09     RRRRRRR.RRRRRRR.
	...
    12bf:	ad 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    12cf:	ad 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    12df:	ad 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    12ef:	ad 52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52     .RRRRRRR.RRRRRRR
    12ff:	52 52 52 52 52 52 52 09 52 52 52 52 52 52 52 09     RRRRRRR.RRRRRRR.
    130f:	52 52 52 52 52 52 52 09 52 52 52 52 52 52 52 09     RRRRRRR.RRRRRRR.
    131f:	52 52 52 52 52 52 52 09 52 52 52 52 52 52 52 09     RRRRRRR.RRRRRRR.
    132f:	52 52 52 52 52 52 52 49 52 52 52 52 52 52 52 9b     RRRRRRRIRRRRRRR.
    133f:	00 00 00 00 00 00 00 ad 00 00 00 00 00 00 ad f6     ................
    134f:	00 00 00 00 00 ad f6 5b 00 00 00 00 a4 f6 5b 52     .......[......[R
    135f:	00 00 00 a4 f6 5b 52 52 00 00 a4 f6 5b 52 52 52     .....[RR....[RRR
    136f:	00 a4 f6 5b 52 52 52 52 a4 f6 5b 52 52 52 52 52     ...[RRRR..[RRRRR
    137f:	b6 52 52 52 52 52 52 52 5b 52 52 52 52 52 52 52     .RRRRRRR[RRRRRRR
    138f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    139f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    13af:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    13bf:	52 52 52 52 52 52 52 ad 52 52 52 52 52 52 52 52     RRRRRRR.RRRRRRRR
    13cf:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    13df:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    13ef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    13ff:	b6 f6 f6 f6 f6 f6 f6 f6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    140f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    141f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    142f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    143f:	f6 f6 f6 f6 f6 f6 f6 f6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    144f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    145f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    146f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    147f:	f6 5b 52 52 52 52 52 52 52 52 52 52 52 52 52 52     .[RRRRRRRRRRRRRR
    148f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    149f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    14af:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    14bf:	09 09 09 09 09 09 09 09 09 ff ff f6 f6 f6 f6 f6     ................
    14cf:	09 ad f6 f6 f6 f6 f6 f6 09 ad ad a4 a4 a4 a4 a4     ................
    14df:	09 ad ad a4 a4 a4 a4 a4 09 ad ad a4 a4 a4 a4 a4     ................
    14ef:	09 ad ad a4 a4 a4 a4 a4 09 ad ad a4 a4 a4 a4 a4     ................
    14ff:	09 09 09 09 09 09 09 09 f6 f6 f6 f6 f6 f6 f6 f6     ................
    150f:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
    151f:	a4 a4 00 a4 a4 00 a4 a4 a4 00 00 a4 00 00 a4 a4     ................
    152f:	00 00 00 00 00 00 a4 a4 a4 00 00 a4 00 00 a4 a4     ................
    153f:	09 09 09 09 09 09 49 52 f6 f6 f6 f6 b6 5b a4 52     ......IR.....[.R
    154f:	f6 f6 f6 f6 a4 49 a4 52 a4 a4 a4 a4 52 49 ad 52     .....I.R....RI.R
    155f:	a4 a4 a4 a4 52 49 ad 52 a4 a4 a4 a4 52 49 ad 52     ....RI.R....RI.R
    156f:	a4 a4 a4 a4 52 49 ad 52 a4 a4 a4 a4 52 49 ad 52     ....RI.R....RI.R
    157f:	09 09 09 09 09 09 09 09 f6 f6 f6 f6 f6 f6 f6 f6     ................
    158f:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 00 a4 a4 a4 a4 a4     ................
    159f:	a4 a4 00 00 a4 a4 a4 a4 a4 a4 00 00 00 a4 a4 a4     ................
    15af:	a4 a4 00 00 00 00 a4 a4 a4 a4 00 00 00 a4 a4 a4     ................
    15bf:	09 09 09 09 09 09 09 09 f6 f6 f6 f6 f6 f6 f6 f6     ................
    15cf:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
    15df:	a4 00 00 a4 00 00 a4 a4 a4 00 00 a4 00 00 a4 a4     ................
    15ef:	a4 00 00 a4 00 00 a4 a4 a4 00 00 a4 00 00 a4 a4     ................
    15ff:	09 09 09 09 09 09 09 09 f6 f6 f6 f6 f6 f6 f6 f6     ................
    160f:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
    161f:	a4 00 00 00 00 00 a4 a4 a4 00 00 00 00 00 a4 a4     ................
    162f:	a4 00 00 00 00 00 a4 a4 a4 00 00 00 00 00 a4 a4     ................
    163f:	09 09 09 09 09 09 09 09 09 ff ff f6 f6 f6 f6 f6     ................
    164f:	09 ad f6 f6 f6 f6 f6 f6 09 ad ad a4 a4 a4 a4 a4     ................
    165f:	09 ad ad a4 00 00 00 a4 09 ad ad a4 00 a4 a4 a4     ................
    166f:	09 ad ad a4 00 00 00 a4 09 ad ad a4 a4 a4 00 a4     ................
    167f:	09 09 09 09 09 09 09 09 f6 f6 f6 f6 f6 f6 f6 f6     ................
    168f:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
    169f:	00 a4 a4 00 a4 00 a4 00 00 a4 00 a4 a4 00 a4 00     ................
    16af:	00 00 a4 a4 a4 00 a4 00 00 a4 00 a4 a4 00 a4 00     ................
    16bf:	09 09 09 09 09 09 49 52 f6 f6 f6 f6 b6 5b a4 52     ......IR.....[.R
    16cf:	f6 f6 f6 f6 a4 49 a4 52 a4 a4 a4 a4 52 49 ad 52     .....I.R....RI.R
    16df:	a4 a4 00 a4 52 49 ad 52 00 a4 00 a4 52 49 ad 52     ....RI.R....RI.R
    16ef:	a4 00 00 a4 52 49 ad 52 a4 a4 00 a4 52 49 ad 52     ....RI.R....RI.R
    16ff:	09 09 09 09 09 09 09 09 49 49 49 49 49 49 49 49     ........IIIIIIII
    170f:	49 09 ff ff f6 f6 f6 f6 49 09 ad f6 f6 f6 f6 f6     I.......I.......
    171f:	49 09 ad ad a4 a4 a4 a4 49 09 ad ad a4 a4 a4 a4     I.......I.......
    172f:	49 09 ad ad a4 a4 a4 a4 49 09 ad ad a4 a4 a4 a4     I.......I.......
    173f:	09 09 09 09 09 09 09 09 49 49 49 49 49 49 49 49     ........IIIIIIII
    174f:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    175f:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 00 a4 a4 00 a4     ................
    176f:	a4 a4 00 00 a4 00 00 a4 a4 00 00 00 00 00 00 a4     ................
    177f:	09 09 09 09 09 09 49 52 49 49 49 49 49 49 a4 52     ......IRIIIIII.R
    178f:	f6 f6 f6 f6 f6 b6 a4 52 f6 f6 f6 f6 f6 a4 ad 52     .......R.......R
    179f:	a4 a4 a4 a4 a4 52 ad 52 a4 a4 a4 a4 a4 52 ad 52     .....R.R.....R.R
    17af:	a4 a4 a4 a4 a4 52 ad 52 a4 a4 a4 a4 a4 52 ad 52     .....R.R.....R.R
    17bf:	09 09 09 09 09 09 09 09 09 49 49 49 49 49 49 49     .........IIIIIII
    17cf:	09 49 ff ff f6 f6 f6 f6 09 49 ad f6 f6 f6 f6 f6     .I.......I......
    17df:	09 49 ad ad a4 a4 a4 a4 09 49 ad ad a4 a4 a4 a4     .I.......I......
    17ef:	09 49 ad ad a4 a4 a4 a4 09 49 ad ad a4 a4 a4 a4     .I.......I......
    17ff:	09 09 09 09 09 09 09 09 49 49 49 49 49 49 49 49     ........IIIIIIII
    180f:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    181f:	a4 a4 a4 00 a4 a4 a4 a4 a4 a4 a4 00 00 a4 a4 a4     ................
    182f:	a4 a4 a4 00 00 00 a4 a4 a4 a4 a4 00 00 00 00 a4     ................
    183f:	09 09 09 09 09 09 09 09 49 49 49 49 49 49 49 49     ........IIIIIIII
    184f:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    185f:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 00 00 a4 00 00 a4     ................
    186f:	a4 a4 00 00 a4 00 00 a4 a4 a4 00 00 a4 00 00 a4     ................
    187f:	09 09 09 09 09 09 09 09 49 49 49 49 49 49 49 49     ........IIIIIIII
    188f:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    189f:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 a4     ................
    18af:	a4 a4 00 00 00 00 00 a4 a4 a4 00 00 00 00 00 a4     ................
    18bf:	09 09 09 09 09 09 09 09 09 49 49 49 49 49 49 49     .........IIIIIII
    18cf:	09 49 ff ff f6 f6 f6 f6 09 49 ad f6 f6 f6 f6 f6     .I.......I......
    18df:	09 49 ad ad a4 a4 a4 a4 09 49 ad ad a4 00 00 00     .I.......I......
    18ef:	09 49 ad ad a4 00 a4 a4 09 49 ad ad a4 00 00 00     .I.......I......
    18ff:	09 09 09 09 09 09 09 09 49 49 49 49 49 49 49 49     ........IIIIIIII
    190f:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    191f:	a4 a4 a4 a4 a4 a4 a4 a4 a4 00 a4 a4 00 a4 00 a4     ................
    192f:	a4 00 a4 00 a4 a4 00 a4 a4 00 00 a4 a4 a4 00 a4     ................
    193f:	09 09 09 09 09 09 49 52 49 49 49 49 49 49 a4 52     ......IRIIIIII.R
    194f:	f6 f6 f6 f6 f6 b6 a4 52 f6 f6 f6 f6 f6 a4 ad 52     .......R.......R
    195f:	a4 a4 a4 a4 a4 52 ad 52 00 a4 a4 00 a4 52 ad 52     .....R.R.....R.R
    196f:	00 00 a4 00 a4 52 ad 52 00 a4 00 00 a4 52 ad 52     .....R.R.....R.R
    197f:	09 ad ad a4 a4 a4 a4 a4 09 ad ad a4 a4 a4 a4 a4     ................
    198f:	09 a4 52 52 52 52 52 52 09 49 49 49 49 49 49 49     ..RRRRRR.IIIIIII
    199f:	49 9b ad b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     I.......RRRRRRRR
    19af:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    19bf:	a4 a4 00 a4 a4 00 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    19cf:	52 52 52 52 52 52 52 52 49 49 49 49 49 49 49 49     RRRRRRRRIIIIIIII
    19df:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    19ef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    19ff:	a4 a4 a4 a4 52 49 ad 52 a4 a4 a4 a4 52 49 ad 52     ....RI.R....RI.R
    1a0f:	52 52 52 52 52 49 ad 52 49 49 49 49 49 49 ad 52     RRRRRI.RIIIIII.R
    1a1f:	b6 b6 b6 b6 f6 ff f6 52 52 52 52 52 52 52 52 52     .......RRRRRRRRR
    1a2f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1a3f:	a4 a4 00 00 a4 a4 a4 a4 a4 a4 00 a4 a4 a4 a4 a4     ................
    1a4f:	52 52 52 52 52 52 52 52 49 49 49 49 49 49 49 49     RRRRRRRRIIIIIIII
    1a5f:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1a6f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1a7f:	a4 00 00 a4 00 00 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    1a8f:	52 52 52 52 52 52 52 52 49 49 49 49 49 49 49 49     RRRRRRRRIIIIIIII
    1a9f:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1aaf:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1abf:	a4 00 00 00 00 00 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    1acf:	52 52 52 52 52 52 52 52 49 49 49 49 49 49 49 49     RRRRRRRRIIIIIIII
    1adf:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1aef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1aff:	09 ad ad a4 00 00 00 a4 09 ad ad a4 a4 a4 a4 a4     ................
    1b0f:	09 a4 52 52 52 52 52 52 09 49 49 49 49 49 49 49     ..RRRRRR.IIIIIII
    1b1f:	49 9b ad b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     I.......RRRRRRRR
    1b2f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1b3f:	00 a4 a4 00 a4 00 a4 00 a4 a4 a4 a4 a4 a4 a4 a4     ................
    1b4f:	52 52 52 52 52 52 52 52 49 49 49 49 49 49 49 49     RRRRRRRRIIIIIIII
    1b5f:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1b6f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1b7f:	a4 a4 00 a4 52 49 ad 52 a4 a4 a4 a4 52 49 ad 52     ....RI.R....RI.R
    1b8f:	52 52 52 52 52 49 ad 52 49 49 49 49 49 49 ad 52     RRRRRI.RIIIIII.R
    1b9f:	b6 b6 b6 b6 f6 ff f6 52 52 52 52 52 52 52 52 52     .......RRRRRRRRR
    1baf:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1bbf:	49 09 ad ad a4 a4 a4 a4 49 09 ad ad a4 a4 a4 a4     I.......I.......
    1bcf:	49 09 ad ad a4 a4 a4 a4 09 09 a4 52 52 52 52 52     I..........RRRRR
    1bdf:	49 9b ad b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     I.......RRRRRRRR
    1bef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1bff:	a4 a4 00 00 a4 00 00 a4 a4 a4 a4 00 a4 a4 00 a4     ................
    1c0f:	a4 a4 a4 a4 a4 a4 a4 a4 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1c1f:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1c2f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1c3f:	a4 a4 a4 a4 a4 52 ad 52 a4 a4 a4 a4 a4 52 ad 52     .....R.R.....R.R
    1c4f:	a4 a4 a4 a4 a4 52 ad 52 52 52 52 52 52 52 ad 52     .....R.RRRRRRR.R
    1c5f:	b6 b6 b6 b6 f6 ff f6 52 52 52 52 52 52 52 52 52     .......RRRRRRRRR
    1c6f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1c7f:	09 49 ad ad a4 a4 a4 a4 09 49 ad ad a4 a4 a4 a4     .I.......I......
    1c8f:	09 49 ad ad a4 a4 a4 a4 09 49 a4 52 52 52 52 52     .I.......I.RRRRR
    1c9f:	49 9b ad b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     I.......RRRRRRRR
    1caf:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1cbf:	a4 a4 a4 00 00 00 a4 a4 a4 a4 a4 00 00 a4 a4 a4     ................
    1ccf:	a4 a4 a4 00 a4 a4 a4 a4 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1cdf:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1cef:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1cff:	a4 a4 00 00 a4 00 00 a4 a4 a4 00 00 a4 00 00 a4     ................
    1d0f:	a4 a4 a4 a4 a4 a4 a4 a4 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1d1f:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1d2f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1d3f:	a4 a4 00 00 00 00 00 a4 a4 a4 00 00 00 00 00 a4     ................
    1d4f:	a4 a4 a4 a4 a4 a4 a4 a4 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1d5f:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1d6f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1d7f:	09 49 ad ad a4 a4 a4 00 09 49 ad ad a4 00 00 00     .I.......I......
    1d8f:	09 49 ad ad a4 a4 a4 a4 09 49 a4 52 52 52 52 52     .I.......I.RRRRR
    1d9f:	49 9b ad b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     I.......RRRRRRRR
    1daf:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1dbf:	a4 00 a4 00 a4 a4 00 a4 a4 00 a4 a4 00 a4 00 a4     ................
    1dcf:	a4 a4 a4 a4 a4 a4 a4 a4 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1ddf:	b6 b6 b6 b6 b6 b6 b6 b6 52 52 52 52 52 52 52 52     ........RRRRRRRR
    1def:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR
    1dff:	00 a4 a4 00 a4 52 ad 52 00 a4 a4 00 a4 52 ad 52     .....R.R.....R.R
    1e0f:	a4 a4 a4 a4 a4 52 ad 52 52 52 52 52 52 52 ad 52     .....R.RRRRRRR.R
    1e1f:	b6 b6 b6 b6 f6 ff f6 52 52 52 52 52 52 52 52 52     .......RRRRRRRRR
    1e2f:	52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52     RRRRRRRRRRRRRRRR

00001e3f <font_tileset>:
	...
    1e7f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    1e8f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    1e9f:	00 00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    1eaf:	00 00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    1ebf:	00 a4 a4 00 a4 a4 00 00 00 a4 a4 00 a4 a4 00 00     ................
    1ecf:	00 00 a4 00 00 a4 00 00 00 a4 00 00 a4 00 00 00     ................
	...
    1f07:	00 00 a4 00 00 a4 00 00 00 a4 a4 a4 a4 a4 a4 00     ................
    1f17:	00 00 a4 00 00 a4 00 00 00 00 a4 00 00 a4 00 00     ................
    1f27:	00 a4 a4 a4 a4 a4 a4 00 00 00 a4 00 00 a4 00 00     ................
	...
    1f3f:	00 00 00 a4 00 00 00 00 00 a4 a4 a4 a4 a4 a4 00     ................
    1f4f:	a4 00 00 a4 00 00 00 00 00 a4 a4 a4 a4 a4 00 00     ................
    1f5f:	00 00 00 a4 00 00 a4 00 a4 a4 a4 a4 a4 a4 00 00     ................
    1f6f:	00 00 00 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f7f:	a4 a4 00 00 00 00 00 00 a4 a4 00 00 a4 00 00 00     ................
    1f8f:	00 00 00 a4 00 00 00 00 00 00 a4 00 00 00 00 00     ................
    1f9f:	00 a4 00 00 00 00 00 00 a4 00 00 a4 a4 00 00 00     ................
    1faf:	00 00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    1fbf:	00 00 a4 a4 00 00 00 00 00 a4 00 00 a4 00 00 00     ................
    1fcf:	00 a4 a4 00 a4 00 00 00 00 a4 a4 a4 00 00 00 00     ................
    1fdf:	a4 00 00 a4 a4 00 a4 00 a4 00 00 00 a4 a4 00 00     ................
    1fef:	00 a4 a4 a4 a4 00 a4 00 00 00 00 00 00 00 00 00     ................
    1fff:	00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
    200f:	00 00 a4 00 00 00 00 00 00 a4 00 00 00 00 00 00     ................
	...
    203f:	00 00 00 a4 a4 a4 00 00 00 00 a4 a4 00 00 00 00     ................
    204f:	00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
    205f:	00 a4 a4 00 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
    206f:	00 00 00 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    207f:	00 00 a4 a4 a4 00 00 00 00 00 00 00 a4 a4 00 00     ................
    208f:	00 00 00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00     ................
    209f:	00 00 00 00 00 a4 a4 00 00 00 00 00 a4 a4 00 00     ................
    20af:	00 00 a4 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20c7:	00 00 00 a4 00 00 00 00 00 a4 00 a4 00 a4 00 00     ................
    20d7:	00 00 a4 a4 a4 00 00 00 00 a4 00 a4 00 a4 00 00     ................
    20e7:	00 00 00 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2107:	00 00 00 a4 00 00 00 00 00 00 00 a4 00 00 00 00     ................
    2117:	00 a4 a4 a4 a4 a4 00 00 00 00 00 a4 00 00 00 00     ................
    2127:	00 00 00 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    215f:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
    216f:	00 a4 a4 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2197:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
	...
    21e7:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
	...
    2203:	00 00 a4 00 00 00 00 00 00 a4 00 00 00 00 00 00     ................
    2213:	a4 00 00 00 00 00 00 a4 00 00 00 00 00 00 a4 00     ................
    2223:	00 00 00 00 00 a4 00 00 00 00 00 00 a4 00 00 00     ................
	...
    223f:	00 00 a4 a4 a4 00 00 00 00 a4 00 00 a4 a4 00 00     ................
    224f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    225f:	a4 a4 00 00 00 a4 a4 00 00 a4 a4 00 00 a4 00 00     ................
    226f:	00 00 a4 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    227f:	00 00 00 a4 a4 00 00 00 00 00 a4 a4 a4 00 00 00     ................
    228f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    229f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    22af:	00 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    22bf:	00 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 a4 a4 00     ................
    22cf:	00 00 00 00 a4 a4 a4 00 00 00 a4 a4 a4 a4 00 00     ................
    22df:	00 a4 a4 a4 a4 00 00 00 a4 a4 a4 00 00 00 00 00     ................
    22ef:	a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    22ff:	00 a4 a4 a4 a4 a4 a4 00 00 00 00 00 a4 a4 00 00     ................
    230f:	00 00 00 a4 a4 00 00 00 00 00 a4 a4 a4 a4 00 00     ................
    231f:	00 00 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    232f:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    233f:	00 00 00 a4 a4 a4 00 00 00 00 a4 a4 a4 a4 00 00     ................
    234f:	00 a4 a4 00 a4 a4 00 00 a4 a4 00 00 a4 a4 00 00     ................
    235f:	a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 a4 a4 00 00     ................
    236f:	00 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    237f:	a4 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 00 00 00     ................
    238f:	a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 a4 a4 00     ................
    239f:	00 00 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    23af:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    23bf:	00 00 a4 a4 a4 a4 00 00 00 a4 a4 00 00 00 00 00     ................
    23cf:	a4 a4 00 00 00 00 00 00 a4 a4 a4 a4 a4 a4 00 00     ................
    23df:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    23ef:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    23ff:	a4 a4 a4 a4 a4 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    240f:	00 00 00 00 a4 a4 00 00 00 00 00 a4 a4 00 00 00     ................
    241f:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
    242f:	00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
    243f:	00 a4 a4 a4 a4 00 00 00 a4 a4 00 00 00 a4 00 00     ................
    244f:	a4 a4 a4 00 00 a4 00 00 00 a4 a4 a4 a4 00 00 00     ................
    245f:	a4 00 00 a4 a4 a4 a4 00 a4 00 00 00 00 a4 a4 00     ................
    246f:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    247f:	00 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 a4 a4 00     ................
    248f:	a4 a4 00 00 00 a4 a4 00 00 a4 a4 a4 a4 a4 a4 00     ................
    249f:	00 00 00 00 00 a4 a4 00 00 00 00 00 a4 a4 00 00     ................
    24af:	00 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24c7:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
	...
    24e7:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
	...
    2507:	00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
	...
    251f:	00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
    252f:	00 00 a4 00 00 00 00 00 00 a4 00 00 00 00 00 00     ................
    253f:	00 00 00 00 a4 a4 00 00 00 00 00 a4 a4 00 00 00     ................
    254f:	00 00 a4 a4 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
    255f:	00 00 a4 a4 00 00 00 00 00 00 00 a4 a4 00 00 00     ................
    256f:	00 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
	...
    258f:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
	...
    25a7:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
	...
    25bf:	00 00 a4 a4 00 00 00 00 00 00 00 a4 a4 00 00 00     ................
    25cf:	00 00 00 00 a4 a4 00 00 00 00 00 00 00 a4 a4 00     ................
    25df:	00 00 00 00 a4 a4 00 00 00 00 00 a4 a4 00 00 00     ................
    25ef:	00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25ff:	00 a4 a4 a4 a4 00 00 00 a4 a4 00 00 a4 a4 00 00     ................
    260f:	00 00 00 00 a4 a4 00 00 00 00 a4 a4 a4 00 00 00     ................
    261f:	00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
    262f:	00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
    263f:	00 00 a4 a4 a4 00 00 00 00 a4 00 00 00 a4 00 00     ................
    264f:	a4 00 00 a4 00 a4 00 00 a4 00 a4 00 a4 a4 00 00     ................
    265f:	a4 00 00 a4 a4 00 00 00 00 a4 00 00 00 00 00 00     ................
    266f:	00 00 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    267f:	00 00 a4 a4 a4 00 00 00 00 a4 a4 00 a4 a4 00 00     ................
    268f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    269f:	a4 a4 a4 a4 a4 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    26af:	a4 a4 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00     ................
    26bf:	a4 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 a4 a4 00     ................
    26cf:	a4 a4 00 00 00 a4 a4 00 a4 a4 a4 a4 a4 a4 00 00     ................
    26df:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    26ef:	a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    26ff:	00 00 a4 a4 a4 a4 00 00 00 a4 a4 00 00 a4 a4 00     ................
    270f:	a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00 00     ................
    271f:	a4 a4 00 00 00 00 00 00 00 a4 a4 00 00 a4 a4 00     ................
    272f:	00 00 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    273f:	a4 a4 a4 a4 a4 00 00 00 a4 a4 00 00 a4 a4 00 00     ................
    274f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    275f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 a4 a4 00 00     ................
    276f:	a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    277f:	a4 a4 a4 a4 a4 a4 a4 00 a4 a4 00 00 00 00 00 00     ................
    278f:	a4 a4 00 00 00 00 00 00 a4 a4 a4 a4 a4 a4 00 00     ................
    279f:	a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00 00     ................
    27af:	a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    27bf:	a4 a4 a4 a4 a4 a4 a4 00 a4 a4 00 00 00 00 00 00     ................
    27cf:	a4 a4 00 00 00 00 00 00 a4 a4 a4 a4 a4 a4 00 00     ................
    27df:	a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00 00     ................
    27ef:	a4 a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    27ff:	00 00 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 00 00     ................
    280f:	a4 a4 00 00 00 00 00 00 a4 a4 00 00 a4 a4 a4 00     ................
    281f:	a4 a4 00 00 00 a4 a4 00 00 a4 a4 00 00 a4 a4 00     ................
    282f:	00 00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    283f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    284f:	a4 a4 00 00 00 a4 a4 00 a4 a4 a4 a4 a4 a4 a4 00     ................
    285f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    286f:	a4 a4 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00     ................
    287f:	00 a4 a4 a4 a4 a4 a4 00 00 00 00 a4 a4 00 00 00     ................
    288f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    289f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    28af:	00 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    28bf:	00 00 00 a4 a4 a4 a4 00 00 00 00 00 a4 a4 00 00     ................
    28cf:	00 00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00     ................
    28df:	00 00 00 00 a4 a4 00 00 a4 00 00 00 a4 a4 00 00     ................
    28ef:	00 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    28ff:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 a4 a4 00 00     ................
    290f:	a4 a4 00 a4 a4 00 00 00 a4 a4 a4 a4 00 00 00 00     ................
    291f:	a4 a4 a4 a4 a4 00 00 00 a4 a4 00 a4 a4 a4 00 00     ................
    292f:	a4 a4 00 00 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    293f:	00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
    294f:	00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
    295f:	00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00 00     ................
    296f:	00 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    297f:	a4 a4 00 00 00 a4 a4 00 a4 a4 a4 00 a4 a4 a4 00     ................
    298f:	a4 a4 a4 a4 a4 a4 a4 00 a4 a4 a4 a4 a4 a4 a4 00     ................
    299f:	a4 a4 00 a4 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    29af:	a4 a4 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00     ................
    29bf:	a4 a4 00 00 00 a4 a4 00 a4 a4 a4 00 00 a4 a4 00     ................
    29cf:	a4 a4 a4 a4 00 a4 a4 00 a4 a4 a4 a4 a4 a4 a4 00     ................
    29df:	a4 a4 00 a4 a4 a4 a4 00 a4 a4 00 00 a4 a4 a4 00     ................
    29ef:	a4 a4 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00     ................
    29ff:	00 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 a4 a4 00     ................
    2a0f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2a1f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2a2f:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    2a3f:	a4 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 a4 a4 00     ................
    2a4f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2a5f:	a4 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 00 00 00     ................
    2a6f:	a4 a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2a7f:	00 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 a4 a4 00     ................
    2a8f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2a9f:	a4 a4 00 a4 a4 a4 a4 00 a4 a4 00 00 a4 a4 00 00     ................
    2aaf:	00 a4 a4 a4 a4 00 a4 00 00 00 00 00 00 00 00 00     ................
    2abf:	a4 a4 a4 a4 a4 a4 00 00 a4 a4 00 00 00 a4 a4 00     ................
    2acf:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 a4 a4 a4 00     ................
    2adf:	a4 a4 a4 a4 a4 00 00 00 a4 a4 00 a4 a4 a4 00 00     ................
    2aef:	a4 a4 00 00 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    2aff:	00 a4 a4 a4 a4 00 00 00 a4 a4 00 00 a4 a4 00 00     ................
    2b0f:	a4 a4 00 00 00 00 00 00 00 a4 a4 a4 a4 a4 00 00     ................
    2b1f:	00 00 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2b2f:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    2b3f:	00 a4 a4 a4 a4 a4 a4 00 00 00 00 a4 a4 00 00 00     ................
    2b4f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    2b5f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    2b6f:	00 00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    2b7f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2b8f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2b9f:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2baf:	00 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    2bbf:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2bcf:	a4 a4 00 00 00 a4 a4 00 a4 a4 a4 00 a4 a4 a4 00     ................
    2bdf:	00 a4 a4 a4 a4 a4 00 00 00 00 a4 a4 a4 00 00 00     ................
    2bef:	00 00 00 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2bff:	a4 a4 00 00 00 a4 a4 00 a4 a4 00 00 00 a4 a4 00     ................
    2c0f:	a4 a4 00 a4 00 a4 a4 00 a4 a4 a4 a4 a4 a4 a4 00     ................
    2c1f:	a4 a4 a4 a4 a4 a4 a4 00 a4 a4 a4 00 a4 a4 a4 00     ................
    2c2f:	a4 a4 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00     ................
    2c3f:	a4 a4 00 00 00 a4 a4 00 a4 a4 a4 00 a4 a4 a4 00     ................
    2c4f:	00 a4 a4 a4 a4 a4 00 00 00 00 a4 a4 a4 00 00 00     ................
    2c5f:	00 a4 a4 a4 a4 a4 00 00 a4 a4 a4 00 a4 a4 a4 00     ................
    2c6f:	a4 a4 00 00 00 a4 a4 00 00 00 00 00 00 00 00 00     ................
    2c7f:	00 a4 a4 00 00 a4 a4 00 00 a4 a4 00 00 a4 a4 00     ................
    2c8f:	00 a4 a4 00 00 a4 a4 00 00 00 a4 a4 a4 a4 00 00     ................
    2c9f:	00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00     ................
    2caf:	00 00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00     ................
    2cbf:	a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 a4 a4 a4 00     ................
    2ccf:	00 00 00 a4 a4 a4 00 00 00 00 a4 a4 a4 00 00 00     ................
    2cdf:	00 a4 a4 a4 00 00 00 00 a4 a4 a4 00 00 00 00 00     ................
    2cef:	a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00     ................
    2cff:	00 00 a4 a4 a4 a4 00 00 00 00 a4 a4 00 00 00 00     ................
    2d0f:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
    2d1f:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00 00 00     ................
    2d2f:	00 00 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    2d3f:	00 00 a4 a4 a4 a4 00 00 00 a4 00 00 00 00 a4 00     ................
    2d4f:	a4 00 00 a4 a4 00 00 a4 a4 00 a4 00 00 00 00 a4     ................
    2d5f:	a4 00 a4 00 00 00 00 a4 a4 00 00 a4 a4 00 00 a4     ................
    2d6f:	00 a4 00 00 00 00 a4 00 00 00 a4 a4 a4 a4 00 00     ................
    2d7f:	00 00 a4 a4 a4 a4 00 00 00 00 00 00 a4 a4 00 00     ................
    2d8f:	00 00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00     ................
    2d9f:	00 00 00 00 a4 a4 00 00 00 00 00 00 a4 a4 00 00     ................
    2daf:	00 00 a4 a4 a4 a4 00 00 00 00 00 00 00 00 00 00     ................
    2dbf:	00 00 a4 a4 00 00 00 00 00 00 a4 a4 a4 00 00 00     ................
    2dcf:	00 00 a4 a4 a4 a4 00 00 00 00 a4 a4 a4 a4 a4 00     ................
    2ddf:	00 00 a4 a4 a4 a4 00 00 00 00 a4 a4 a4 00 00 00     ................
    2def:	00 00 a4 a4 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e0f:	00 a4 a4 00 00 00 00 00 a4 a4 a4 a4 00 00 a4 00     ................
    2e1f:	a4 00 00 a4 a4 a4 a4 00 00 00 00 00 a4 a4 00 00     ................
	...

00002e3f <font_tileset_blue>:
    2e3f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2e4f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2e5f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2e6f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2e7f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2e8f:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    2e9f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    2eaf:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    2ebf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2ecf:	48 48 48 48 48 48 48 48 9b 9b 48 9b 9b 48 48 48     HHHHHHHH..H..HHH
    2edf:	48 9b 48 48 9b 48 48 48 48 48 48 48 48 48 48 48     H.HH.HHHHHHHHHHH
    2eef:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2eff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2f0f:	48 48 48 48 48 48 48 48 48 9b 48 9b 48 48 48 48     HHHHHHHHH.H.HHHH
    2f1f:	9b 9b 9b 9b 9b 48 48 48 48 9b 48 9b 48 48 48 48     .....HHHH.H.HHHH
    2f2f:	9b 9b 9b 9b 9b 48 48 48 48 9b 48 9b 48 48 48 48     .....HHHH.H.HHHH
    2f3f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2f4f:	48 48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48     HHHHHHHHHHH.HHHH
    2f5f:	48 9b 9b 9b 9b 9b 48 48 48 9b 48 9b 48 48 48 48     H.....HHH.H.HHHH
    2f6f:	48 9b 9b 9b 9b 9b 48 48 48 48 48 9b 48 48 48 48     H.....HHHHH.HHHH
    2f7f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2f8f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2f9f:	48 9b 48 48 9b 48 48 48 48 48 48 9b 48 48 48 48     H.HH.HHHHHH.HHHH
    2faf:	48 48 9b 48 48 9b 48 48 48 48 48 48 48 48 48 48     HH.HH.HHHHHHHHHH
    2fbf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    2fcf:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    2fdf:	48 9b 9b 9b 48 48 48 48 48 9b 48 9b 9b 48 48 48     H...HHHHH.H..HHH
    2fef:	9b 48 48 9b 48 48 48 48 48 9b 9b 48 9b 48 48 48     .HH.HHHHH..H.HHH
    2fff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    300f:	48 48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48     HHHHHHHHHHH.HHHH
    301f:	48 48 9b 48 48 48 48 48 48 48 48 48 48 48 48 48     HH.HHHHHHHHHHHHH
    302f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    303f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    304f:	48 48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48     HHHHHHHHHHH.HHHH
    305f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    306f:	48 48 9b 48 48 48 48 48 48 48 48 9b 48 48 48 48     HH.HHHHHHHH.HHHH
    307f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    308f:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    309f:	48 48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48     HHH.HHHHHHH.HHHH
    30af:	48 48 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48     HHH.HHHHHH.HHHHH
    30bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    30cf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    30df:	9b 48 9b 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .H.H.HHHH...HHHH
    30ef:	9b 48 9b 48 9b 48 48 48 48 48 48 48 48 48 48 48     .H.H.HHHHHHHHHHH
    30ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    310f:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    311f:	48 48 9b 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     HH.HHHHH.....HHH
    312f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    313f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    314f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    315f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    316f:	48 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48 48     HH.HHHHHH.HHHHHH
    317f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    318f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    319f:	9b 9b 9b 9b 9b 48 48 48 48 48 48 48 48 48 48 48     .....HHHHHHHHHHH
    31af:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    31bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    31cf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    31df:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    31ef:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    31ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    320f:	48 48 48 48 48 48 48 48 48 48 48 48 9b 48 48 48     HHHHHHHHHHHH.HHH
    321f:	48 48 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48     HHH.HHHHHH.HHHHH
    322f:	48 9b 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     H.HHHHHH.HHHHHHH
    323f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    324f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    325f:	9b 9b 48 48 9b 48 48 48 9b 48 9b 48 9b 48 48 48     ..HH.HHH.H.H.HHH
    326f:	9b 48 48 9b 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HH..HHHH...HHHH
    327f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    328f:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    329f:	48 9b 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     H..HHHHHHH.HHHHH
    32af:	48 48 9b 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HH.HHHHHH...HHHH
    32bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    32cf:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHHHHHH....HHHH
    32df:	48 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     HHHH.HHHH...HHHH
    32ef:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HHHHHHH.....HHH
    32ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    330f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHHHHHH....HHHH
    331f:	48 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     HHHH.HHHH...HHHH
    332f:	48 48 48 48 9b 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHH.HHH....HHHH
    333f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    334f:	48 48 48 48 48 48 48 48 9b 48 48 9b 48 48 48 48     HHHHHHHH.HH.HHHH
    335f:	9b 48 48 9b 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HH.HHHH.....HHH
    336f:	48 48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48     HHH.HHHHHHH.HHHH
    337f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    338f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHHHHHH....HHHH
    339f:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHHHHHH....HHHH
    33af:	48 48 48 48 9b 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHH.HHH....HHHH
    33bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    33cf:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    33df:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHHHHHH....HHHH
    33ef:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HHH.HHHH...HHHH
    33ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    340f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     HHHHHHHH.....HHH
    341f:	48 48 48 48 9b 48 48 48 48 48 48 9b 48 48 48 48     HHHH.HHHHHH.HHHH
    342f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    343f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    344f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    345f:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HHH.HHHH...HHHH
    346f:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HHH.HHHH...HHHH
    347f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    348f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    349f:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 9b 48 48 48     .HHH.HHHH....HHH
    34af:	48 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     HHHH.HHHH...HHHH
    34bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    34cf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    34df:	48 48 48 9b 48 48 48 48 48 48 48 48 48 48 48 48     HHH.HHHHHHHHHHHH
    34ef:	48 48 48 9b 48 48 48 48 48 48 48 48 48 48 48 48     HHH.HHHHHHHHHHHH
    34ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    350f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    351f:	48 48 48 9b 48 48 48 48 48 48 48 48 48 48 48 48     HHH.HHHHHHHHHHHH
    352f:	48 48 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48     HHH.HHHHHH.HHHHH
    353f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    354f:	48 48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48     HHHHHHHHHHH.HHHH
    355f:	48 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48 48     HH.HHHHHH.HHHHHH
    356f:	48 48 9b 48 48 48 48 48 48 48 48 9b 48 48 48 48     HH.HHHHHHHH.HHHH
    357f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    358f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    359f:	48 9b 9b 9b 9b 48 48 48 48 48 48 48 48 48 48 48     H....HHHHHHHHHHH
    35af:	48 9b 9b 9b 9b 48 48 48 48 48 48 48 48 48 48 48     H....HHHHHHHHHHH
    35bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    35cf:	48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48 48     HHHHHHHHH.HHHHHH
    35df:	48 48 9b 48 48 48 48 48 48 48 48 9b 48 48 48 48     HH.HHHHHHHH.HHHH
    35ef:	48 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48 48     HH.HHHHHH.HHHHHH
    35ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    360f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    361f:	48 48 48 48 9b 48 48 48 48 48 9b 9b 48 48 48 48     HHHH.HHHHH..HHHH
    362f:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    363f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    364f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    365f:	9b 48 48 48 9b 48 48 48 9b 48 9b 9b 9b 48 48 48     .HHH.HHH.H...HHH
    366f:	9b 48 9b 48 9b 48 48 48 48 48 9b 9b 48 48 48 48     .H.H.HHHHH..HHHH
    367f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    368f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    369f:	9b 48 48 48 9b 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HHH.HHH.....HHH
    36af:	9b 48 48 48 9b 48 48 48 9b 48 48 48 9b 48 48 48     .HHH.HHH.HHH.HHH
    36bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    36cf:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHHHHHH....HHHH
    36df:	9b 48 48 48 9b 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHH.HHH....HHHH
    36ef:	9b 48 48 48 9b 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHH.HHH....HHHH
    36ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    370f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48     HHHHHHHHH....HHH
    371f:	9b 48 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     .HHHHHHH.HHHHHHH
    372f:	9b 48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48     .HHHHHHHH....HHH
    373f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    374f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHHHHHH....HHHH
    375f:	9b 48 48 48 9b 48 48 48 9b 48 48 48 9b 48 48 48     .HHH.HHH.HHH.HHH
    376f:	9b 48 48 48 9b 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHH.HHH....HHHH
    377f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    378f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     HHHHHHHH.....HHH
    379f:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHHHHHH....HHHH
    37af:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HHHHHHH.....HHH
    37bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    37cf:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     HHHHHHHH.....HHH
    37df:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHHHHHH....HHHH
    37ef:	9b 48 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     .HHHHHHH.HHHHHHH
    37ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    380f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48     HHHHHHHHH....HHH
    381f:	9b 48 48 48 48 48 48 48 9b 48 9b 9b 9b 48 48 48     .HHHHHHH.H...HHH
    382f:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HHH.HHHH...HHHH
    383f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    384f:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    385f:	9b 48 48 48 9b 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HHH.HHH.....HHH
    386f:	9b 48 48 48 9b 48 48 48 9b 48 48 48 9b 48 48 48     .HHH.HHH.HHH.HHH
    387f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    388f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    389f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    38af:	48 48 9b 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HH.HHHHHH...HHHH
    38bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    38cf:	48 48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48     HHHHHHHHHH...HHH
    38df:	48 48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48     HHH.HHHHHHH.HHHH
    38ef:	9b 48 48 9b 48 48 48 48 48 9b 9b 48 48 48 48 48     .HH.HHHHH..HHHHH
    38ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    390f:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    391f:	9b 9b 48 9b 48 48 48 48 9b 48 9b 48 48 48 48 48     ..H.HHHH.H.HHHHH
    392f:	9b 48 48 9b 48 48 48 48 9b 48 48 48 9b 48 48 48     .HH.HHHH.HHH.HHH
    393f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    394f:	48 48 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     HHHHHHHH.HHHHHHH
    395f:	9b 48 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     .HHHHHHH.HHHHHHH
    396f:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HHHHHHH.....HHH
    397f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    398f:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    399f:	9b 9b 48 9b 9b 48 48 48 9b 48 9b 48 9b 48 48 48     ..H..HHH.H.H.HHH
    39af:	9b 48 48 48 9b 48 48 48 9b 48 48 48 9b 48 48 48     .HHH.HHH.HHH.HHH
    39bf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    39cf:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    39df:	9b 9b 48 48 9b 48 48 48 9b 48 9b 48 9b 48 48 48     ..HH.HHH.H.H.HHH
    39ef:	9b 48 48 9b 9b 48 48 48 9b 48 48 48 9b 48 48 48     .HH..HHH.HHH.HHH
    39ff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3a0f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    3a1f:	9b 48 48 48 9b 48 48 48 9b 48 48 48 9b 48 48 48     .HHH.HHH.HHH.HHH
    3a2f:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HHH.HHHH...HHHH
    3a3f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3a4f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHHHHHH....HHHH
    3a5f:	9b 48 48 48 9b 48 48 48 9b 9b 9b 9b 48 48 48 48     .HHH.HHH....HHHH
    3a6f:	9b 48 48 48 48 48 48 48 9b 48 48 48 48 48 48 48     .HHHHHHH.HHHHHHH
    3a7f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3a8f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    3a9f:	9b 48 48 48 9b 48 48 48 9b 48 9b 48 9b 48 48 48     .HHH.HHH.H.H.HHH
    3aaf:	9b 48 48 9b 48 48 48 48 48 9b 9b 48 9b 48 48 48     .HH.HHHHH..H.HHH
    3abf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3acf:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHHHHHH....HHHH
    3adf:	9b 48 48 48 9b 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HHH.HHH.....HHH
    3aef:	9b 48 48 9b 48 48 48 48 9b 48 48 48 9b 48 48 48     .HH.HHHH.HHH.HHH
    3aff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3b0f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 9b 48 48 48     HHHHHHHHH....HHH
    3b1f:	9b 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     .HHHHHHH.....HHH
    3b2f:	48 48 48 48 9b 48 48 48 9b 9b 9b 9b 48 48 48 48     HHHH.HHH....HHHH
    3b3f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3b4f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     HHHHHHHH.....HHH
    3b5f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    3b6f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    3b7f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3b8f:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    3b9f:	9b 48 48 48 9b 48 48 48 9b 48 48 48 9b 48 48 48     .HHH.HHH.HHH.HHH
    3baf:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HHH.HHHH...HHHH
    3bbf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3bcf:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    3bdf:	9b 48 48 48 9b 48 48 48 48 9b 48 9b 48 48 48 48     .HHH.HHHH.H.HHHH
    3bef:	48 9b 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48     H.H.HHHHHH.HHHHH
    3bff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3c0f:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    3c1f:	9b 48 9b 48 9b 48 48 48 9b 48 9b 48 9b 48 48 48     .H.H.HHH.H.H.HHH
    3c2f:	48 9b 48 9b 48 48 48 48 48 9b 48 9b 48 48 48 48     H.H.HHHHH.H.HHHH
    3c3f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3c4f:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    3c5f:	48 9b 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48     H.H.HHHHHH.HHHHH
    3c6f:	48 9b 48 9b 48 48 48 48 9b 48 48 48 9b 48 48 48     H.H.HHHH.HHH.HHH
    3c7f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3c8f:	48 48 48 48 48 48 48 48 9b 48 48 48 9b 48 48 48     HHHHHHHH.HHH.HHH
    3c9f:	9b 48 48 48 9b 48 48 48 48 9b 9b 9b 48 48 48 48     .HHH.HHHH...HHHH
    3caf:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    3cbf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3ccf:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     HHHHHHHH.....HHH
    3cdf:	48 48 48 9b 48 48 48 48 48 48 9b 48 48 48 48 48     HHH.HHHHHH.HHHHH
    3cef:	48 9b 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     H.HHHHHH.....HHH
    3cff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3d0f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    3d1f:	48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48 48     H.HHHHHHH.HHHHHH
    3d2f:	48 9b 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     H.HHHHHHH...HHHH
    3d3f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3d4f:	48 48 48 48 48 48 48 48 48 9b 48 9b 48 48 48 48     HHHHHHHHH.H.HHHH
    3d5f:	9b 9b 9b 9b 9b 48 48 48 9b 9b 9b 9b 9b 48 48 48     .....HHH.....HHH
    3d6f:	48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48 48     HH.HHHHHHH.HHHHH
    3d7f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3d8f:	48 48 48 48 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHHHHHHHH...HHHH
    3d9f:	48 48 48 9b 48 48 48 48 48 48 48 9b 48 48 48 48     HHH.HHHHHHH.HHHH
    3daf:	48 48 48 9b 48 48 48 48 48 9b 9b 9b 48 48 48 48     HHH.HHHHH...HHHH
    3dbf:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3dcf:	48 48 48 48 48 48 48 48 48 48 9b 48 48 48 48 48     HHHHHHHHHH.HHHHH
    3ddf:	48 9b 48 9b 48 48 48 48 9b 48 48 48 9b 48 48 48     H.H.HHHH.HHH.HHH
    3def:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3dff:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3e0f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3e1f:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    3e2f:	48 48 48 48 48 48 48 48 9b 9b 9b 9b 9b 48 48 48     HHHHHHHH.....HHH

00003e3f <sprites_tileset>:
    3e3f:	ff ff ff ff ff ff ff ff ff ad ad ad ad ad ad ad     ................
    3e4f:	ff ad ad ff 5b ad ad ff ff ad ad ff 5b ad ad ff     ....[.......[...
    3e5f:	ff ad ad ff 5b ad ad ff ff ad ad ad ad ad ad ad     ....[...........
    3e6f:	ff 5b 52 52 52 52 52 52 52 00 00 00 00 00 00 00     .[RRRRRRR.......
    3e7f:	ff ff ff ff ff ff ff 52 ad ad ad ad ad ad 5b 00     .......R......[.
    3e8f:	5b ad ad ff 5b ad 52 00 5b ad ad ff 5b ad 52 00     [...[.R.[...[.R.
    3e9f:	5b ad ad ff 5b ad 52 00 ad ad ad ad ad ad 52 00     [...[.R.......R.
    3eaf:	52 52 52 52 52 52 52 00 00 00 00 00 00 00 00 00     RRRRRRR.........
    3ebf:	fe ff ff ff ff ff 00 fe fe ff ad ad ad ad 00 fe     ................
    3ecf:	fe ff ad ff ff ad 00 fe fe ff ad 52 52 ad 00 fe     ...........RR...
    3edf:	fe ff ad ad ad ad 00 fe fe ff ad ff ff ad 00 fe     ................
    3eef:	fe ff ad 52 52 ad 00 fe fe ff 00 00 00 00 00 fe     ...RR...........
    3eff:	00 00 fe fe fe fe fe fe 00 ff 00 fe fe fe fe fe     ................
    3f0f:	00 ff ff 00 fe fe fe fe 00 ff ff ff 00 fe fe fe     ................
    3f1f:	00 ff ff ff ff 00 fe fe 00 ff ff ff ff ff 00 fe     ................
    3f2f:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 fe     ................
    3f3f:	00 fe fe fe fe fe fe fe 00 00 fe fe fe fe fe fe     ................
    3f4f:	00 ff 00 fe fe fe fe fe 00 ff ff 00 fe fe fe fe     ................
    3f5f:	00 ff ff ff 00 fe fe fe 00 ff ff ff ff 00 fe fe     ................
    3f6f:	00 ff ff ff ff ff 00 fe 00 ff ff ff ff ff ff 00     ................
    3f7f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f8f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f9f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3faf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fbf:	00 ff 00 00 ff 00 fe fe 00 00 fe 00 ff ff 00 fe     ................
    3fcf:	fe fe fe 00 00 ff 00 fe fe fe fe fe 00 00 fe fe     ................
    3fdf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fef:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fff:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 fe fe     ................
    400f:	00 ff 00 00 ff ff 00 fe 00 00 fe 00 ff ff 00 fe     ................
    401f:	fe fe fe fe 00 ff ff 00 fe fe fe fe 00 ff ff 00     ................
    402f:	fe fe fe fe fe 00 00 fe fe fe fe fe fe fe fe fe     ................

0000403f <map_main>:
    403f:	1e 1b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    404f:	01 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    405f:	00 00 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10     ................
	...
    407f:	11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 00 00     ................
	...
    409b:	00 00 1f 20 20 20 20 20 20 20 20 20 20 20 20 20     ...             
    40ab:	20 20 20 20 20 20 20 20 20 20 20 21 00 00 00 00                !....
    40bb:	22 23 24 25 26 27 28 25 28 25 29 2a 24 2b 24 2b     "#$%&'(%(%)*$+$+
    40cb:	28 25 24 25 24 25 2c 2c 2c 2d 00 00 00 00 22 2e     (%$%$%,,,-....".
    40db:	29 2a 2f 27 30 31 32 33 34 33 34 35 36 35 2c 2a     )*/'0123434565,*
    40eb:	36 33 34 33 2c 2c 2c 2d 00 00 00 00 22 37 38 39     6343,,,-...."789
    40fb:	3a 3b 38 3c 3d 39 2c 2a 3d 39 38 39 2c 2a 38 39     :;8<=9,*=989,*89
    410b:	3d 39 2c 2c 2c 2d 00 00 00 00 22 2c 2c 2c 2c 2c     =9,,,-....",,,,,
    411b:	2c 2c 2c 2c 2c 2c 2c 2c 2c 2c 2c 2c 2c 2c 2c 2c     ,,,,,,,,,,,,,,,,
    412b:	2c 2c 2c 2d 00 00 00 00 3e 3f 3f 3f 3f 3f 3f 3f     ,,,-....>???????
    413b:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
    414b:	3f 40 00 00 00 00 41 42 42 42 42 42 42 42 42 42     ?@....ABBBBBBBBB
    415b:	42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 43     BBBBBBBBBBBBBBBC
	...
    41c7:	00 00 44 45 45 45 45 45 45 45 45 45 45 45 45 45     ..DEEEEEEEEEEEEE
    41d7:	45 45 45 45 45 45 45 45 45 45 45 45 46 00 00 47     EEEEEEEEEEEEF..G
    41e7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    41f7:	48 48 48 48 48 48 48 48 48 48 49 00 00 47 48 48     HHHHHHHHHHI..GHH
    4207:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4217:	48 48 48 48 48 48 48 48 49 00 00 47 48 48 48 48     HHHHHHHHI..GHHHH
    4227:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4237:	48 48 48 48 48 48 49 00 00 47 48 48 48 48 48 48     HHHHHHI..GHHHHHH
    4247:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4257:	48 48 48 48 49 00 00 47 48 48 48 48 48 48 48 48     HHHHI..GHHHHHHHH
    4267:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4277:	48 48 49 00 00 47 48 48 48 48 48 48 48 48 48 48     HHI..GHHHHHHHHHH
    4287:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4297:	49 00 00 47 48 48 48 48 48 48 48 48 48 48 48 48     I..GHHHHHHHHHHHH
    42a7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 49 00     HHHHHHHHHHHHHHI.
    42b7:	00 47 48 48 48 48 48 48 48 48 48 48 48 48 48 48     .GHHHHHHHHHHHHHH
    42c7:	48 48 48 48 48 48 48 48 48 48 48 48 49 00 00 47     HHHHHHHHHHHHI..G
    42d7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    42e7:	48 48 48 48 48 48 48 48 48 48 49 00 00 47 48 48     HHHHHHHHHHI..GHH
    42f7:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4307:	48 48 48 48 48 48 48 48 49 00 00 47 48 48 48 48     HHHHHHHHI..GHHHH
    4317:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4327:	48 48 48 48 48 48 49 00 00 4a 48 48 48 48 48 48     HHHHHHI..JHHHHHH
    4337:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 48 48     HHHHHHHHHHHHHHHH
    4347:	48 48 48 4b 4c 00 00 4d 4e 4f 4f 4f 4f 4f 4f 4f     HHHKL..MNOOOOOOO
    4357:	4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f 4f     OOOOOOOOOOOOOOOO
    4367:	4f 50 00 00                                         OP..

0000436b <map_digitSep>:
    436b:	01 03 23 2e 37                                      ..#.7

00004370 <map_digit0>:
    4370:	02 03 24 25 29 2a 38 39                             ..$%)*89

00004378 <map_digit1>:
    4378:	02 03 26 27 2f 27 3a 3b                             ..&'/':;

00004380 <map_digit2>:
    4380:	02 03 28 25 30 31 38 3c                             ..(%018<

00004388 <map_digit3>:
    4388:	02 03 28 25 32 33 3d 39                             ..(%23=9

00004390 <map_digit4>:
    4390:	02 03 29 2a 34 33 2c 2a                             ..)*43,*

00004398 <map_digit5>:
    4398:	02 03 24 2b 34 35 3d 39                             ..$+45=9

000043a0 <map_digit6>:
    43a0:	02 03 24 2b 36 35 38 39                             ..$+6589

000043a8 <map_digit7>:
    43a8:	02 03 28 25 2c 2a 2c 2a                             ..(%,*,*

000043b0 <map_digit8>:
    43b0:	02 03 24 25 36 33 38 39                             ..$%6389

000043b8 <map_digit9>:
    43b8:	02 03 24 25 34 33 3d 39                             ..$%43=9

000043c0 <map_digitBlank>:
    43c0:	02 03 2c 2c 2c 2c 2c 2c                             ..,,,,,,

000043c8 <map_btnPrevNormal>:
    43c8:	03 02 51 52 53 64 65 66                             ..QRSdef

000043d0 <map_btnPrevPushed>:
    43d0:	03 02 5a 5b 5c 6d 6e 6f                             ..Z[\mno

000043d8 <map_btnPlayNormal>:
    43d8:	03 02 51 54 53 64 67 66                             ..QTSdgf

000043e0 <map_btnPlayPushed>:
    43e0:	03 02 5d 5e 5c 70 71 6f                             ..]^\pqo

000043e8 <map_btnPauseNormal>:
    43e8:	03 02 51 55 53 64 68 66                             ..QUSdhf

000043f0 <map_btnPausePushed>:
    43f0:	03 02 5d 5f 5c 70 72 6f                             ..]_\pro

000043f8 <map_btnStopNormal>:
    43f8:	03 02 51 56 53 64 69 66                             ..QVSdif

00004400 <map_btnStopPushed>:
    4400:	03 02 5d 60 5c 70 73 6f                             ..]`\pso

00004408 <map_btnNextNormal>:
    4408:	03 02 57 58 59 6a 6b 6c                             ..WXYjkl

00004410 <map_btnNextPushed>:
    4410:	03 02 61 62 63 74 75 76                             ..abctuv

00004418 <map_hCursor>:
    4418:	02 01 00 01                                         ....

0000441c <map_vCursor>:
    441c:	01 01 02                                            ...

0000441f <map_mouse>:
    441f:	01 02 04 07                                         ....

00004423 <__c.2415>:
    4423:	46 49 52 53 54 20 52 45 41 44 20 47 4f 4f 44 20     FIRST READ GOOD 
    4433:	20 20 00                                              .

00004436 <__c.2413>:
    4436:	46 49 52 53 54 20 52 45 41 44 20 46 41 49 4c 45     FIRST READ FAILE
    4446:	44 00                                               D.

00004448 <__c.2409>:
    4448:	49 4e 49 54 20 47 4f 4f 44 20 20 20 00              INIT GOOD   .

00004455 <__c.2407>:
    4455:	49 4e 49 54 20 46 41 49 4c 45 44 00                 INIT FAILED.

00004461 <__c.1966>:
    4461:	53 45 43 54 4f 52 00                                SECTOR.

00004468 <__c.1937>:
    4468:	4e 4f 20 53 44 20 43 41 52 44 20 44 45 54 45 43     NO SD CARD DETEC
    4478:	54 45 44 21 00 00                                   TED!..

0000447e <__ctors_end>:
    447e:	11 24       	eor	r1, r1
    4480:	1f be       	out	0x3f, r1	; 63
    4482:	cf ef       	ldi	r28, 0xFF	; 255
    4484:	d0 e1       	ldi	r29, 0x10	; 16
    4486:	de bf       	out	0x3e, r29	; 62
    4488:	cd bf       	out	0x3d, r28	; 61

0000448a <wdt_init>:
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    448a:	14 be       	out	0x34, r1	; 52
    MCUSR = 0;
    wdt_disable();
    448c:	88 e1       	ldi	r24, 0x18	; 24
    448e:	0f b6       	in	r0, 0x3f	; 63
    4490:	f8 94       	cli
    4492:	80 93 60 00 	sts	0x0060, r24
    4496:	10 92 60 00 	sts	0x0060, r1
    449a:	0f be       	out	0x3f, r0	; 63

0000449c <__do_copy_data>:
    449c:	11 e0       	ldi	r17, 0x01	; 1
    449e:	a0 e0       	ldi	r26, 0x00	; 0
    44a0:	b1 e0       	ldi	r27, 0x01	; 1
    44a2:	e6 e6       	ldi	r30, 0x66	; 102
    44a4:	ff e7       	ldi	r31, 0x7F	; 127
    44a6:	02 c0       	rjmp	.+4      	; 0x44ac <.do_copy_data_start>

000044a8 <.do_copy_data_loop>:
    44a8:	05 90       	lpm	r0, Z+
    44aa:	0d 92       	st	X+, r0

000044ac <.do_copy_data_start>:
    44ac:	ae 36       	cpi	r26, 0x6E	; 110
    44ae:	b1 07       	cpc	r27, r17
    44b0:	d9 f7       	brne	.-10     	; 0x44a8 <.do_copy_data_loop>

000044b2 <__do_clear_bss>:
    44b2:	1e e0       	ldi	r17, 0x0E	; 14
    44b4:	ae e6       	ldi	r26, 0x6E	; 110
    44b6:	b1 e0       	ldi	r27, 0x01	; 1
    44b8:	01 c0       	rjmp	.+2      	; 0x44bc <.do_clear_bss_start>

000044ba <.do_clear_bss_loop>:
    44ba:	1d 92       	st	X+, r1

000044bc <.do_clear_bss_start>:
    44bc:	ad 3e       	cpi	r26, 0xED	; 237
    44be:	b1 07       	cpc	r27, r17
    44c0:	e1 f7       	brne	.-8      	; 0x44ba <.do_clear_bss_loop>

000044c2 <Initialize>:

/**
 * Called by the assembler initialization routines, should not be called directly.
 */
int i;
void Initialize(void){
    44c2:	f8 94       	cli
    44c4:	ec e2       	ldi	r30, 0x2C	; 44
    44c6:	f8 e0       	ldi	r31, 0x08	; 8
    44c8:	80 e0       	ldi	r24, 0x00	; 0
    44ca:	90 e0       	ldi	r25, 0x00	; 0

	cli();

	//Initialize the mixer buffer
	for(i=0;i<MIX_BANK_SIZE*2;i++){
		mix_buf[i]=0x80;
    44cc:	20 e8       	ldi	r18, 0x80	; 128
    44ce:	02 c0       	rjmp	.+4      	; 0x44d4 <Initialize+0x12>
    44d0:	21 93       	st	Z+, r18
    44d2:	01 96       	adiw	r24, 0x01	; 1


	cli();

	//Initialize the mixer buffer
	for(i=0;i<MIX_BANK_SIZE*2;i++){
    44d4:	32 e0       	ldi	r19, 0x02	; 2
    44d6:	8c 30       	cpi	r24, 0x0C	; 12
    44d8:	93 07       	cpc	r25, r19
    44da:	d4 f3       	brlt	.-12     	; 0x44d0 <Initialize+0xe>
		mix_buf[i]=0x80;
	}	
	
	mix_pos=mix_buf;
    44dc:	8c e2       	ldi	r24, 0x2C	; 44
    44de:	98 e0       	ldi	r25, 0x08	; 8
    44e0:	90 93 39 0a 	sts	0x0A39, r25
    44e4:	80 93 38 0a 	sts	0x0A38, r24
	mix_bank=0;
    44e8:	10 92 3a 0a 	sts	0x0A3A, r1
    44ec:	ed e3       	ldi	r30, 0x3D	; 61
    44ee:	fa e0       	ldi	r31, 0x0A	; 10
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	03 c0       	rjmp	.+6      	; 0x44fc <Initialize+0x3a>

	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    44f6:	10 82       	st	Z, r1
    44f8:	01 96       	adiw	r24, 0x01	; 1
    44fa:	3a 96       	adiw	r30, 0x0a	; 10
	}	
	
	mix_pos=mix_buf;
	mix_bank=0;

	for(i=0;i<CHANNELS;i++){
    44fc:	84 30       	cpi	r24, 0x04	; 4
    44fe:	91 05       	cpc	r25, r1
    4500:	d4 f3       	brlt	.-12     	; 0x44f6 <Initialize+0x34>
	}

	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    4502:	81 e0       	ldi	r24, 0x01	; 1
    4504:	80 93 5d 0a 	sts	0x0A5D, r24
		tr4_barrel_hi=1;		
    4508:	80 93 5e 0a 	sts	0x0A5E, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    450c:	80 93 5c 0a 	sts	0x0A5C, r24
		UBRR0L=56; //31250 bauds (.5% error)
	#endif

	
	//stop timers
	TCCR1B=0;
    4510:	10 92 81 00 	sts	0x0081, r1
	TCCR0B=0;
    4514:	15 bc       	out	0x25, r1	; 37
    4516:	e0 e9       	ldi	r30, 0x90	; 144
    4518:	fa e0       	ldi	r31, 0x0A	; 10
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	90 e0       	ldi	r25, 0x00	; 0
	#endif
	
	#if VIDEO_MODE == 3
		//clear srpites
		for(i=0;i<MAX_SPRITES;i++){
			sprites[i].y=(SCREEN_TILES_V*TILE_HEIGHT);		
    451e:	28 ed       	ldi	r18, 0xD8	; 216
    4520:	03 c0       	rjmp	.+6      	; 0x4528 <Initialize+0x66>
    4522:	20 83       	st	Z, r18
    4524:	01 96       	adiw	r24, 0x01	; 1
    4526:	34 96       	adiw	r30, 0x04	; 4

	#endif
	
	#if VIDEO_MODE == 3
		//clear srpites
		for(i=0;i<MAX_SPRITES;i++){
    4528:	84 30       	cpi	r24, 0x04	; 4
    452a:	91 05       	cpc	r25, r1
    452c:	d4 f3       	brlt	.-12     	; 0x4522 <Initialize+0x60>
    452e:	90 93 8b 0a 	sts	0x0A8B, r25
    4532:	80 93 8a 0a 	sts	0x0A8A, r24

	#endif


	//set ports
	DDRC=0xff; //video dac
    4536:	8f ef       	ldi	r24, 0xFF	; 255
    4538:	87 b9       	out	0x07, r24	; 7
	DDRB=0xff; //h-sync for ad725
    453a:	84 b9       	out	0x04, r24	; 4
	DDRD=(1<<PD7)+(1<<PD4)+(1<<PD3); //audio-out, midi-in +led + switch
    453c:	88 e9       	ldi	r24, 0x98	; 152
    453e:	8a b9       	out	0x0a, r24	; 10
	//DDRD=0x80; //audio-out, midi-in

	//setup port A for joypads
	DDRA =0b00001100; //set only control lines as outputs
    4540:	8c e0       	ldi	r24, 0x0C	; 12
    4542:	81 b9       	out	0x01, r24	; 1
	PORTA=0b11111011; //activate pullups on the data lines
    4544:	8b ef       	ldi	r24, 0xFB	; 251
    4546:	82 b9       	out	0x02, r24	; 2
	
	//PORTD=0;
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1
	sync_phase=SYNC_PHASE_PRE_EQ;
    4548:	10 92 06 08 	sts	0x0806, r1
	sync_pulse=SYNC_PRE_EQ_PULSES;
    454c:	86 e0       	ldi	r24, 0x06	; 6
    454e:	80 93 07 08 	sts	0x0807, r24

	//clear timers
	TCNT1H=0;
    4552:	10 92 85 00 	sts	0x0085, r1
	TCNT1L=0;
    4556:	10 92 84 00 	sts	0x0084, r1

	//set sync generator counter on TIMER1
	OCR1AH=HDRIVE_CL_TWICE>>8;
    455a:	83 e0       	ldi	r24, 0x03	; 3
    455c:	80 93 89 00 	sts	0x0089, r24
	OCR1AL=HDRIVE_CL_TWICE&0xff;
    4560:	8d e8       	ldi	r24, 0x8D	; 141
    4562:	80 93 88 00 	sts	0x0088, r24

	TCCR1B=(1<<WGM12)+(1<<CS10);//CTC mode, use OCR1A for match
    4566:	89 e0       	ldi	r24, 0x09	; 9
    4568:	80 93 81 00 	sts	0x0081, r24
	TIMSK1=(1<<OCIE1A);			//generate interrupt on match
    456c:	82 e0       	ldi	r24, 0x02	; 2
    456e:	80 93 6f 00 	sts	0x006F, r24

	//set clock divider counter for AD725 on TIMER0
	//outputs 14.31818Mhz (4FSC)
	TCCR0A=(1<<COM0A0)+(1<<WGM01); //toggle on compare match + CTC
    4572:	82 e4       	ldi	r24, 0x42	; 66
    4574:	84 bd       	out	0x24, r24	; 36
	OCR0A=0; //divide main clock by 2
    4576:	17 bc       	out	0x27, r1	; 39
	TCCR0B=(1<<CS00); //enable timer, no pre-scaler
    4578:	91 e0       	ldi	r25, 0x01	; 1
    457a:	95 bd       	out	0x25, r25	; 37

	//set sound PWM on TIMER2
	TCCR2A=(1<<COM2A1)+(1<<WGM21)+(1<<WGM20); //Fast PWM	
    457c:	83 e8       	ldi	r24, 0x83	; 131
    457e:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A=0; //duty cycle (amplitude)
    4582:	10 92 b3 00 	sts	0x00B3, r1
	TCCR2B=(1<<CS20);  //enable timer, no pre-scaler
    4586:	90 93 b1 00 	sts	0x00B1, r25

	SYNC_PORT=(1<<SYNC_PIN)|(1<<VIDEOCE_PIN); //set sync & chip enable line to hi
    458a:	81 e1       	ldi	r24, 0x11	; 17
    458c:	85 b9       	out	0x05, r24	; 5

	burstOffset=0;
    458e:	10 92 17 08 	sts	0x0817, r1
	curr_frame=0;
    4592:	10 92 0a 08 	sts	0x080A, r1
	vsync_phase=0;
    4596:	10 92 0b 08 	sts	0x080B, r1
	joypad1_status_hi=0;
    459a:	10 92 12 08 	sts	0x0812, r1
    459e:	10 92 11 08 	sts	0x0811, r1
	joypad2_status_hi=0;
    45a2:	10 92 16 08 	sts	0x0816, r1
    45a6:	10 92 15 08 	sts	0x0815, r1
	snesMouseEnabled=false;
    45aa:	10 92 20 08 	sts	0x0820, r1

	//enable color correction
	ReadButtons();
    45ae:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <ReadButtons>
	if(ReadJoypad(0)&BTN_B){
    45b2:	80 e0       	ldi	r24, 0x00	; 0
    45b4:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    45b8:	80 ff       	sbrs	r24, 0
    45ba:	03 c0       	rjmp	.+6      	; 0x45c2 <Initialize+0x100>
		SetColorBurstOffset(4);
    45bc:	84 e0       	ldi	r24, 0x04	; 4
    45be:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <SetColorBurstOffset>
	#if VIDEO_MODE == 6
		render_start=0;
		playback_start=0;
	#endif

	sei();
    45c2:	78 94       	sei
    45c4:	0e 94 a1 3a 	call	0x7542	; 0x7542 <main>
    45c8:	0c 94 b1 3f 	jmp	0x7f62	; 0x7f62 <_exit>

000045cc <__bad_interrupt>:
    45cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000045d0 <sync_func_vectors>:
    45d0:	4f 24       	eor	r4, r15
    45d2:	59 24       	eor	r5, r9
    45d4:	67 24       	eor	r6, r7
    45d6:	bb 23       	and	r27, r27

000045d8 <sub_video_mode3>:
    45d8:	e0 ee       	ldi	r30, 0xE0	; 224
    45da:	f7 e0       	ldi	r31, 0x07	; 7
    45dc:	c0 e8       	ldi	r28, 0x80	; 128
    45de:	d1 e0       	ldi	r29, 0x01	; 1
    45e0:	20 91 a1 0a 	lds	r18, 0x0AA1
    45e4:	00 27       	eor	r16, r16

000045e6 <upd_loop>:
    45e6:	a0 81       	ld	r26, Z
    45e8:	b1 81       	ldd	r27, Z+1	; 0x01
    45ea:	ac 0f       	add	r26, r28
    45ec:	bd 1f       	adc	r27, r29
    45ee:	1c 91       	ld	r17, X
    45f0:	12 83       	std	Z+2, r17	; 0x02
    45f2:	02 17       	cp	r16, r18
    45f4:	08 f4       	brcc	.+2      	; 0x45f8 <noov>
    45f6:	10 2f       	mov	r17, r16

000045f8 <noov>:
    45f8:	1c 93       	st	X, r17
    45fa:	33 96       	adiw	r30, 0x03	; 3
    45fc:	03 95       	inc	r16
    45fe:	0c 30       	cpi	r16, 0x0C	; 12
    4600:	90 f3       	brcs	.-28     	; 0x45e6 <upd_loop>
    4602:	09 e4       	ldi	r16, 0x49	; 73
    4604:	0c 50       	subi	r16, 0x0C	; 12

00004606 <wait_loop>:
    4606:	16 e0       	ldi	r17, 0x06	; 6
    4608:	1a 95       	dec	r17
    460a:	f1 f7       	brne	.-4      	; 0x4608 <wait_loop+0x2>
    460c:	0a 95       	dec	r16
    460e:	d9 f7       	brne	.-10     	; 0x4606 <wait_loop>
    4610:	16 e0       	ldi	r17, 0x06	; 6
    4612:	1a 95       	dec	r17
    4614:	f1 f7       	brne	.-4      	; 0x4612 <wait_loop+0xc>
    4616:	00 c0       	rjmp	.+0      	; 0x4618 <wait_loop+0x12>
    4618:	c0 e8       	ldi	r28, 0x80	; 128
    461a:	d1 e0       	ldi	r29, 0x01	; 1
    461c:	08 ed       	ldi	r16, 0xD8	; 216
    461e:	a0 2e       	mov	r10, r16
    4620:	66 27       	eor	r22, r22
    4622:	78 e0       	ldi	r23, 0x08	; 8

00004624 <next_text_line>:
    4624:	2d d1       	rcall	.+602    	; 0x4880 <hsync_pulse>
    4626:	33 e2       	ldi	r19, 0x23	; 35

00004628 <text_wait1>:
    4628:	3a 95       	dec	r19
    462a:	f1 f7       	brne	.-4      	; 0x4628 <text_wait1>
    462c:	0e 94 52 23 	call	0x46a4	; 0x46a4 <render_tile_line>
    4630:	3f e0       	ldi	r19, 0x0F	; 15

00004632 <text_wait2>:
    4632:	3a 95       	dec	r19
    4634:	f1 f7       	brne	.-4      	; 0x4632 <text_wait2>
    4636:	00 c0       	rjmp	.+0      	; 0x4638 <text_wait2+0x6>
    4638:	aa 94       	dec	r10
    463a:	a9 f0       	breq	.+42     	; 0x4666 <text_frame_end>
    463c:	00 00       	nop
    463e:	63 95       	inc	r22
    4640:	00 00       	nop
    4642:	00 00       	nop
    4644:	68 30       	cpi	r22, 0x08	; 8
    4646:	29 f0       	breq	.+10     	; 0x4652 <next_text_row>
    4648:	c8 95       	lpm
    464a:	c8 95       	lpm
    464c:	c8 95       	lpm
    464e:	00 00       	nop
    4650:	e9 cf       	rjmp	.-46     	; 0x4624 <next_text_line>

00004652 <next_text_row>:
    4652:	66 27       	eor	r22, r22
    4654:	00 24       	eor	r0, r0
    4656:	30 e2       	ldi	r19, 0x20	; 32
    4658:	c3 0f       	add	r28, r19
    465a:	d0 1d       	adc	r29, r0
	...
    4664:	df cf       	rjmp	.-66     	; 0x4624 <next_text_line>

00004666 <text_frame_end>:
    4666:	c8 95       	lpm
    4668:	c8 95       	lpm
    466a:	c8 95       	lpm
    466c:	c8 95       	lpm
    466e:	c8 95       	lpm
    4670:	00 00       	nop
    4672:	00 00       	nop
    4674:	05 d1       	rcall	.+522    	; 0x4880 <hsync_pulse>
    4676:	0e 94 e7 2f 	call	0x5fce	; 0x5fce <RestoreBackground>
    467a:	11 e0       	ldi	r17, 0x01	; 1
    467c:	00 91 09 08 	lds	r16, 0x0809
    4680:	01 27       	eor	r16, r17
    4682:	00 93 09 08 	sts	0x0809, r16
    4686:	20 91 0a 08 	lds	r18, 0x080A
    468a:	00 23       	and	r16, r16
    468c:	09 f0       	breq	.+2      	; 0x4690 <text_frame_end+0x2a>
    468e:	21 27       	eor	r18, r17
    4690:	20 93 0a 08 	sts	0x080A, r18
    4694:	e1 e0       	ldi	r30, 0x01	; 1
    4696:	e0 93 08 08 	sts	0x0808, r30
    469a:	e2 e0       	ldi	r30, 0x02	; 2
    469c:	e0 93 36 00 	sts	0x0036, r30
    46a0:	11 24       	eor	r1, r1
    46a2:	08 95       	ret

000046a4 <render_tile_line>:
    46a4:	de 01       	movw	r26, r28
    46a6:	67 9f       	mul	r22, r23
    46a8:	00 00       	nop
    46aa:	00 91 0c 08 	lds	r16, 0x080C
    46ae:	10 91 0d 08 	lds	r17, 0x080D
    46b2:	00 50       	subi	r16, 0x00	; 0
    46b4:	13 40       	sbci	r17, 0x03	; 3
    46b6:	00 0d       	add	r16, r0
    46b8:	11 1d       	adc	r17, r1
    46ba:	18 01       	movw	r2, r16
    46bc:	00 ee       	ldi	r16, 0xE0	; 224
    46be:	14 e0       	ldi	r17, 0x04	; 4
    46c0:	00 0d       	add	r16, r0
    46c2:	11 1d       	adc	r17, r1
    46c4:	28 01       	movw	r4, r16
    46c6:	30 e4       	ldi	r19, 0x40	; 64
    46c8:	1e e1       	ldi	r17, 0x1E	; 30
    46ca:	2d 91       	ld	r18, X+
    46cc:	2c 30       	cpi	r18, 0x0C	; 12
    46ce:	6f b6       	in	r6, 0x3f	; 63
    46d0:	60 fa       	bst	r6, 0
    46d2:	23 9f       	mul	r18, r19
    46d4:	a1 01       	movw	r20, r2
    46d6:	0e f4       	brtc	.+2      	; 0x46da <render_tile_line+0x36>
    46d8:	a2 01       	movw	r20, r4
    46da:	04 0e       	add	r0, r20
    46dc:	15 1e       	adc	r1, r21
    46de:	f0 01       	movw	r30, r0
    46e0:	f6 f0       	brts	.+60     	; 0x471e <ramloop>

000046e2 <romloop>:
    46e2:	05 91       	lpm	r16, Z+
    46e4:	08 b9       	out	0x08, r16	; 8
    46e6:	2d 91       	ld	r18, X+
    46e8:	05 91       	lpm	r16, Z+
    46ea:	08 b9       	out	0x08, r16	; 8
    46ec:	23 9f       	mul	r18, r19
    46ee:	05 91       	lpm	r16, Z+
    46f0:	08 b9       	out	0x08, r16	; 8
    46f2:	2c 30       	cpi	r18, 0x0C	; 12
    46f4:	6f b6       	in	r6, 0x3f	; 63
    46f6:	05 91       	lpm	r16, Z+
    46f8:	08 b9       	out	0x08, r16	; 8
    46fa:	08 f4       	brcc	.+2      	; 0x46fe <romloop+0x1c>
    46fc:	a2 01       	movw	r20, r4
    46fe:	05 91       	lpm	r16, Z+
    4700:	08 b9       	out	0x08, r16	; 8
    4702:	60 fa       	bst	r6, 0
    4704:	04 0e       	add	r0, r20
    4706:	05 91       	lpm	r16, Z+
    4708:	08 b9       	out	0x08, r16	; 8
    470a:	15 1e       	adc	r1, r21
    470c:	1a 95       	dec	r17
    470e:	05 91       	lpm	r16, Z+
    4710:	08 b9       	out	0x08, r16	; 8
    4712:	05 91       	lpm	r16, Z+
    4714:	39 f1       	breq	.+78     	; 0x4764 <end>
    4716:	f0 01       	movw	r30, r0
    4718:	08 b9       	out	0x08, r16	; 8
    471a:	1e f7       	brtc	.-58     	; 0x46e2 <romloop>
    471c:	00 c0       	rjmp	.+0      	; 0x471e <ramloop>

0000471e <ramloop>:
    471e:	01 91       	ld	r16, Z+
    4720:	08 b9       	out	0x08, r16	; 8
    4722:	2d 91       	ld	r18, X+
    4724:	01 91       	ld	r16, Z+
    4726:	00 00       	nop
    4728:	08 b9       	out	0x08, r16	; 8
    472a:	23 9f       	mul	r18, r19
    472c:	01 91       	ld	r16, Z+
    472e:	00 00       	nop
    4730:	08 b9       	out	0x08, r16	; 8
    4732:	2c 30       	cpi	r18, 0x0C	; 12
    4734:	6f b6       	in	r6, 0x3f	; 63
    4736:	60 fa       	bst	r6, 0
    4738:	01 91       	ld	r16, Z+
    473a:	08 b9       	out	0x08, r16	; 8
    473c:	0e f0       	brts	.+2      	; 0x4740 <ramloop+0x22>
    473e:	a1 01       	movw	r20, r2
    4740:	01 91       	ld	r16, Z+
    4742:	04 0e       	add	r0, r20
    4744:	08 b9       	out	0x08, r16	; 8
    4746:	15 1e       	adc	r1, r21
    4748:	00 c0       	rjmp	.+0      	; 0x474a <ramloop+0x2c>
    474a:	01 91       	ld	r16, Z+
    474c:	08 b9       	out	0x08, r16	; 8
    474e:	00 00       	nop
    4750:	00 c0       	rjmp	.+0      	; 0x4752 <ramloop+0x34>
    4752:	01 91       	ld	r16, Z+
    4754:	08 b9       	out	0x08, r16	; 8
    4756:	01 91       	ld	r16, Z+
    4758:	1a 95       	dec	r17
    475a:	21 f0       	breq	.+8      	; 0x4764 <end>
    475c:	f0 01       	movw	r30, r0
    475e:	08 b9       	out	0x08, r16	; 8
    4760:	06 f6       	brtc	.-128    	; 0x46e2 <romloop>
    4762:	dd cf       	rjmp	.-70     	; 0x471e <ramloop>

00004764 <end>:
    4764:	08 b9       	out	0x08, r16	; 8
    4766:	00 27       	eor	r16, r16
    4768:	c8 95       	lpm
    476a:	00 00       	nop
    476c:	08 b9       	out	0x08, r16	; 8
    476e:	05 e0       	ldi	r16, 0x05	; 5
    4770:	0a 95       	dec	r16
    4772:	f1 f7       	brne	.-4      	; 0x4770 <end+0xc>
    4774:	08 95       	ret

00004776 <do_hsync>:
    4776:	28 98       	cbi	0x05, 0	; 5
    4778:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <update_sound_buffer>
    477c:	e7 e1       	ldi	r30, 0x17	; 23

0000477e <do_hsync_delay>:
    477e:	ea 95       	dec	r30
    4780:	f1 f7       	brne	.-4      	; 0x477e <do_hsync_delay>
    4782:	28 9a       	sbi	0x05, 0	; 5
    4784:	e3 d0       	rcall	.+454    	; 0x494c <set_normal_rate_HDRIVE>
    4786:	e0 e0       	ldi	r30, 0x00	; 0
    4788:	f6 e0       	ldi	r31, 0x06	; 6
    478a:	c6 d0       	rcall	.+396    	; 0x4918 <update_sync_phase>
    478c:	e0 ff       	sbrs	r30, 0
    478e:	05 d0       	rcall	.+10     	; 0x479a <render>
    4790:	e0 ff       	sbrs	r30, 0
    4792:	02 c0       	rjmp	.+4      	; 0x4798 <not_start_of_frame>
    4794:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <MixSound>

00004798 <not_start_of_frame>:
    4798:	08 95       	ret

0000479a <render>:
    479a:	ef 93       	push	r30
    479c:	e0 91 07 08 	lds	r30, 0x0807
    47a0:	e5 3e       	cpi	r30, 0xE5	; 229
    47a2:	e0 f5       	brcc	.+120    	; 0x481c <render_end>
    47a4:	ed 30       	cpi	r30, 0x0D	; 13
    47a6:	d0 f1       	brcs	.+116    	; 0x481c <render_end>
    47a8:	2f 92       	push	r2
    47aa:	3f 92       	push	r3
    47ac:	4f 92       	push	r4
    47ae:	5f 92       	push	r5
    47b0:	6f 92       	push	r6
    47b2:	7f 92       	push	r7
    47b4:	8f 92       	push	r8
    47b6:	9f 92       	push	r9
    47b8:	af 92       	push	r10
    47ba:	bf 92       	push	r11
    47bc:	cf 92       	push	r12
    47be:	df 92       	push	r13
    47c0:	ef 92       	push	r14
    47c2:	ff 92       	push	r15
    47c4:	0f 93       	push	r16
    47c6:	1f 93       	push	r17
    47c8:	2f 93       	push	r18
    47ca:	3f 93       	push	r19
    47cc:	4f 93       	push	r20
    47ce:	5f 93       	push	r21
    47d0:	6f 93       	push	r22
    47d2:	7f 93       	push	r23
    47d4:	8f 93       	push	r24
    47d6:	9f 93       	push	r25
    47d8:	af 93       	push	r26
    47da:	bf 93       	push	r27
    47dc:	cf 93       	push	r28
    47de:	df 93       	push	r29
    47e0:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <sub_video_mode3>
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	bf 91       	pop	r27
    47ea:	af 91       	pop	r26
    47ec:	9f 91       	pop	r25
    47ee:	8f 91       	pop	r24
    47f0:	7f 91       	pop	r23
    47f2:	6f 91       	pop	r22
    47f4:	5f 91       	pop	r21
    47f6:	4f 91       	pop	r20
    47f8:	3f 91       	pop	r19
    47fa:	2f 91       	pop	r18
    47fc:	1f 91       	pop	r17
    47fe:	0f 91       	pop	r16
    4800:	ff 90       	pop	r15
    4802:	ef 90       	pop	r14
    4804:	df 90       	pop	r13
    4806:	cf 90       	pop	r12
    4808:	bf 90       	pop	r11
    480a:	af 90       	pop	r10
    480c:	9f 90       	pop	r9
    480e:	8f 90       	pop	r8
    4810:	7f 90       	pop	r7
    4812:	6f 90       	pop	r6
    4814:	5f 90       	pop	r5
    4816:	4f 90       	pop	r4
    4818:	3f 90       	pop	r3
    481a:	2f 90       	pop	r2

0000481c <render_end>:
    481c:	ef 91       	pop	r30
    481e:	08 95       	ret

00004820 <__vector_13>:
    4820:	ff 93       	push	r31
    4822:	ef 93       	push	r30
    4824:	ef b7       	in	r30, 0x3f	; 63
    4826:	ef 93       	push	r30
    4828:	e0 91 84 00 	lds	r30, 0x0084
    482c:	ee 50       	subi	r30, 0x0E	; 14
    482e:	e1 30       	cpi	r30, 0x01	; 1
    4830:	00 f0       	brcs	.+0      	; 0x4832 <__vector_13+0x12>
    4832:	e2 30       	cpi	r30, 0x02	; 2
    4834:	00 f0       	brcs	.+0      	; 0x4836 <__vector_13+0x16>
    4836:	e3 30       	cpi	r30, 0x03	; 3
    4838:	00 f0       	brcs	.+0      	; 0x483a <__vector_13+0x1a>
    483a:	e4 30       	cpi	r30, 0x04	; 4
    483c:	00 f0       	brcs	.+0      	; 0x483e <__vector_13+0x1e>
    483e:	e5 30       	cpi	r30, 0x05	; 5
    4840:	00 f0       	brcs	.+0      	; 0x4842 <__vector_13+0x22>
    4842:	e6 30       	cpi	r30, 0x06	; 6
    4844:	00 f0       	brcs	.+0      	; 0x4846 <__vector_13+0x26>
    4846:	e7 30       	cpi	r30, 0x07	; 7
    4848:	00 f0       	brcs	.+0      	; 0x484a <__vector_13+0x2a>
    484a:	e8 30       	cpi	r30, 0x08	; 8
    484c:	00 f0       	brcs	.+0      	; 0x484e <__vector_13+0x2e>
    484e:	e9 30       	cpi	r30, 0x09	; 9
    4850:	00 f0       	brcs	.+0      	; 0x4852 <__vector_13+0x32>
    4852:	05 d0       	rcall	.+10     	; 0x485e <sync>
    4854:	ef 91       	pop	r30
    4856:	ef bf       	out	0x3f, r30	; 63
    4858:	ef 91       	pop	r30
    485a:	ff 91       	pop	r31
    485c:	18 95       	reti

0000485e <sync>:
    485e:	0f 92       	push	r0
    4860:	1f 92       	push	r1
    4862:	e0 ed       	ldi	r30, 0xD0	; 208
    4864:	f5 e4       	ldi	r31, 0x45	; 69
    4866:	00 90 06 08 	lds	r0, 0x0806
    486a:	00 0c       	add	r0, r0
    486c:	11 24       	eor	r1, r1
    486e:	e0 0d       	add	r30, r0
    4870:	f1 1d       	adc	r31, r1
    4872:	05 90       	lpm	r0, Z+
    4874:	14 90       	lpm	r1, Z+
    4876:	f0 01       	movw	r30, r0
    4878:	09 95       	icall
    487a:	1f 90       	pop	r1
    487c:	0f 90       	pop	r0
    487e:	08 95       	ret

00004880 <hsync_pulse>:
    4880:	28 98       	cbi	0x05, 0	; 5
    4882:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <update_sound_buffer>
    4886:	e5 e1       	ldi	r30, 0x15	; 21
    4888:	ea 95       	dec	r30
    488a:	f1 f7       	brne	.-4      	; 0x4888 <hsync_pulse+0x8>
    488c:	e0 91 07 08 	lds	r30, 0x0807
    4890:	ea 95       	dec	r30
    4892:	e0 93 07 08 	sts	0x0807, r30
    4896:	28 9a       	sbi	0x05, 0	; 5
    4898:	00 00       	nop
    489a:	00 00       	nop
    489c:	08 95       	ret

0000489e <do_pre_eq>:
    489e:	28 98       	cbi	0x05, 0	; 5
    48a0:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <update_sound_buffer_2>
    48a4:	28 9a       	sbi	0x05, 0	; 5
    48a6:	00 00       	nop
    48a8:	e1 e0       	ldi	r30, 0x01	; 1
    48aa:	f6 e0       	ldi	r31, 0x06	; 6
    48ac:	35 d0       	rcall	.+106    	; 0x4918 <update_sync_phase>
    48ae:	47 d0       	rcall	.+142    	; 0x493e <set_double_rate_HDRIVE>
    48b0:	08 95       	ret

000048b2 <do_eq>:
    48b2:	28 98       	cbi	0x05, 0	; 5
    48b4:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <update_sound_buffer_2>
    48b8:	e0 eb       	ldi	r30, 0xB0	; 176

000048ba <do_eq_delay>:
    48ba:	00 00       	nop
    48bc:	ea 95       	dec	r30
    48be:	e9 f7       	brne	.-6      	; 0x48ba <do_eq_delay>
    48c0:	00 00       	nop
    48c2:	00 00       	nop
    48c4:	28 9a       	sbi	0x05, 0	; 5
    48c6:	f6 e0       	ldi	r31, 0x06	; 6
    48c8:	e2 e0       	ldi	r30, 0x02	; 2
    48ca:	26 d0       	rcall	.+76     	; 0x4918 <update_sync_phase>
    48cc:	08 95       	ret

000048ce <do_post_eq>:
    48ce:	28 98       	cbi	0x05, 0	; 5
    48d0:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <update_sound_buffer_2>
    48d4:	28 9a       	sbi	0x05, 0	; 5
    48d6:	00 00       	nop
    48d8:	e3 e0       	ldi	r30, 0x03	; 3
    48da:	fd ef       	ldi	r31, 0xFD	; 253
    48dc:	1d d0       	rcall	.+58     	; 0x4918 <update_sync_phase>
    48de:	e0 91 07 08 	lds	r30, 0x0807
    48e2:	e5 30       	cpi	r30, 0x05	; 5
    48e4:	91 f4       	brne	.+36     	; 0x490a <noshift>
    48e6:	e0 91 09 08 	lds	r30, 0x0809
    48ea:	e1 30       	cpi	r30, 0x01	; 1
    48ec:	00 00       	nop
    48ee:	f0 91 17 08 	lds	r31, 0x0817
    48f2:	19 f4       	brne	.+6      	; 0x48fa <peq_odd>
    48f4:	f0 91 17 08 	lds	r31, 0x0817
    48f8:	f1 95       	neg	r31

000048fa <peq_odd>:
    48fa:	e3 e0       	ldi	r30, 0x03	; 3
    48fc:	e0 93 89 00 	sts	0x0089, r30
    4900:	ed e8       	ldi	r30, 0x8D	; 141
    4902:	ef 0f       	add	r30, r31
    4904:	e0 93 88 00 	sts	0x0088, r30
    4908:	08 95       	ret

0000490a <noshift>:
    490a:	e3 e0       	ldi	r30, 0x03	; 3
    490c:	e0 93 89 00 	sts	0x0089, r30
    4910:	ed e8       	ldi	r30, 0x8D	; 141
    4912:	e0 93 88 00 	sts	0x0088, r30
    4916:	08 95       	ret

00004918 <update_sync_phase>:
    4918:	00 90 07 08 	lds	r0, 0x0807
    491c:	0a 94       	dec	r0
    491e:	10 90 5f 00 	lds	r1, 0x005F
    4922:	11 fc       	sbrc	r1, 1
    4924:	0f 2e       	mov	r0, r31
    4926:	00 92 07 08 	sts	0x0807, r0
    492a:	00 90 06 08 	lds	r0, 0x0806
    492e:	11 fc       	sbrc	r1, 1
    4930:	0e 2e       	mov	r0, r30
    4932:	00 92 06 08 	sts	0x0806, r0
    4936:	e0 e0       	ldi	r30, 0x00	; 0
    4938:	11 fc       	sbrc	r1, 1
    493a:	e1 e0       	ldi	r30, 0x01	; 1
    493c:	08 95       	ret

0000493e <set_double_rate_HDRIVE>:
    493e:	e3 e0       	ldi	r30, 0x03	; 3
    4940:	e0 93 89 00 	sts	0x0089, r30
    4944:	ed e8       	ldi	r30, 0x8D	; 141
    4946:	e0 93 88 00 	sts	0x0088, r30
    494a:	08 95       	ret

0000494c <set_normal_rate_HDRIVE>:
    494c:	e7 e0       	ldi	r30, 0x07	; 7
    494e:	e0 93 89 00 	sts	0x0089, r30
    4952:	eb e1       	ldi	r30, 0x1B	; 27
    4954:	e0 93 88 00 	sts	0x0088, r30
    4958:	08 95       	ret

0000495a <ClearVram>:
    495a:	e0 e6       	ldi	r30, 0x60	; 96
    495c:	f3 e0       	ldi	r31, 0x03	; 3
    495e:	a0 e8       	ldi	r26, 0x80	; 128
    4960:	b1 e0       	ldi	r27, 0x01	; 1
    4962:	6c e0       	ldi	r22, 0x0C	; 12

00004964 <fill_vram_loop>:
    4964:	6d 93       	st	X+, r22
    4966:	31 97       	sbiw	r30, 0x01	; 1
    4968:	e9 f7       	brne	.-6      	; 0x4964 <fill_vram_loop>
    496a:	11 24       	eor	r1, r1
    496c:	08 95       	ret
    496e:	cc 03       	fmulsu	r20, r20
    4970:	cc 03       	fmulsu	r20, r20
    4972:	cc 03       	fmulsu	r20, r20
    4974:	cc 03       	fmulsu	r20, r20
    4976:	cc 03       	fmulsu	r20, r20
    4978:	cc 03       	fmulsu	r20, r20
    497a:	cc 03       	fmulsu	r20, r20
    497c:	cc 03       	fmulsu	r20, r20
    497e:	cc 03       	fmulsu	r20, r20
    4980:	cc 03       	fmulsu	r20, r20
    4982:	cc 03       	fmulsu	r20, r20
    4984:	cc 03       	fmulsu	r20, r20
    4986:	cc 03       	fmulsu	r20, r20
    4988:	cc 03       	fmulsu	r20, r20
    498a:	cc 03       	fmulsu	r20, r20
    498c:	cc 03       	fmulsu	r20, r20
    498e:	cc 03       	fmulsu	r20, r20
    4990:	cc 03       	fmulsu	r20, r20
    4992:	cc 03       	fmulsu	r20, r20
    4994:	cc 03       	fmulsu	r20, r20
    4996:	cc 03       	fmulsu	r20, r20
    4998:	cc 03       	fmulsu	r20, r20
    499a:	cc 03       	fmulsu	r20, r20
    499c:	cc 03       	fmulsu	r20, r20
    499e:	cc 03       	fmulsu	r20, r20
    49a0:	cc 03       	fmulsu	r20, r20
    49a2:	cc 03       	fmulsu	r20, r20
    49a4:	cc 03       	fmulsu	r20, r20
    49a6:	cc 03       	fmulsu	r20, r20
    49a8:	cc 03       	fmulsu	r20, r20
    49aa:	cc 03       	fmulsu	r20, r20
    49ac:	cc 03       	fmulsu	r20, r20
    49ae:	cc 03       	fmulsu	r20, r20
    49b0:	cc 03       	fmulsu	r20, r20
    49b2:	cc 03       	fmulsu	r20, r20
    49b4:	cc 03       	fmulsu	r20, r20
    49b6:	cc 03       	fmulsu	r20, r20
    49b8:	cc 03       	fmulsu	r20, r20
    49ba:	cc 03       	fmulsu	r20, r20
    49bc:	cc 03       	fmulsu	r20, r20
    49be:	cc 03       	fmulsu	r20, r20
    49c0:	cc 03       	fmulsu	r20, r20
    49c2:	cc 03       	fmulsu	r20, r20
    49c4:	cc 03       	fmulsu	r20, r20
    49c6:	cc 03       	fmulsu	r20, r20
    49c8:	cc 03       	fmulsu	r20, r20
    49ca:	cc 03       	fmulsu	r20, r20
    49cc:	cc 03       	fmulsu	r20, r20
    49ce:	cc 03       	fmulsu	r20, r20
    49d0:	cc 03       	fmulsu	r20, r20

000049d2 <SetTile>:
    49d2:	99 27       	eor	r25, r25
    49d4:	77 27       	eor	r23, r23
    49d6:	20 e2       	ldi	r18, 0x20	; 32
    49d8:	62 9f       	mul	r22, r18
    49da:	08 0e       	add	r0, r24
    49dc:	19 1e       	adc	r1, r25
    49de:	a0 e8       	ldi	r26, 0x80	; 128
    49e0:	b1 e0       	ldi	r27, 0x01	; 1
    49e2:	a0 0d       	add	r26, r0
    49e4:	b1 1d       	adc	r27, r1
    49e6:	44 5f       	subi	r20, 0xF4	; 244
    49e8:	4c 93       	st	X, r20
    49ea:	11 24       	eor	r1, r1
    49ec:	08 95       	ret

000049ee <LoadMap>:
    49ee:	08 95       	ret

000049f0 <SetFont>:
    49f0:	99 27       	eor	r25, r25
    49f2:	20 e2       	ldi	r18, 0x20	; 32
    49f4:	62 9f       	mul	r22, r18
    49f6:	08 0e       	add	r0, r24
    49f8:	19 1e       	adc	r1, r25
    49fa:	a0 e8       	ldi	r26, 0x80	; 128
    49fc:	b1 e0       	ldi	r27, 0x01	; 1
    49fe:	a0 0d       	add	r26, r0
    4a00:	b1 1d       	adc	r27, r1
    4a02:	50 91 0e 08 	lds	r21, 0x080E
    4a06:	45 0f       	add	r20, r21
    4a08:	4c 93       	st	X, r20
    4a0a:	11 24       	eor	r1, r1
    4a0c:	08 95       	ret

00004a0e <SetFontTilesIndex>:
    4a0e:	80 93 0e 08 	sts	0x080E, r24
    4a12:	08 95       	ret

00004a14 <SetSpritesTileTable>:
    4a14:	80 93 04 08 	sts	0x0804, r24
    4a18:	90 93 05 08 	sts	0x0805, r25
    4a1c:	08 95       	ret

00004a1e <SetTileTable>:
    4a1e:	80 93 0c 08 	sts	0x080C, r24
    4a22:	90 93 0d 08 	sts	0x080D, r25
    4a26:	08 95       	ret

00004a28 <GetVsyncFlag>:
    4a28:	80 91 08 08 	lds	r24, 0x0808
    4a2c:	08 95       	ret

00004a2e <ClearVsyncFlag>:
    4a2e:	11 24       	eor	r1, r1
    4a30:	10 92 08 08 	sts	0x0808, r1
    4a34:	08 95       	ret

00004a36 <SetLowSpeed>:
    4a36:	80 e8       	ldi	r24, 0x80	; 128
    4a38:	91 e0       	ldi	r25, 0x01	; 1
    4a3a:	80 93 61 00 	sts	0x0061, r24
    4a3e:	90 93 61 00 	sts	0x0061, r25
    4a42:	08 95       	ret

00004a44 <SetFullSpeed>:
    4a44:	80 e8       	ldi	r24, 0x80	; 128
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	80 93 61 00 	sts	0x0061, r24
    4a4c:	90 93 61 00 	sts	0x0061, r25
    4a50:	08 95       	ret

00004a52 <CopyTileToRam>:
    4a52:	20 e4       	ldi	r18, 0x40	; 64
    4a54:	e0 91 0c 08 	lds	r30, 0x080C
    4a58:	f0 91 0d 08 	lds	r31, 0x080D
    4a5c:	8c 50       	subi	r24, 0x0C	; 12
    4a5e:	82 9f       	mul	r24, r18
    4a60:	e0 0d       	add	r30, r0
    4a62:	f1 1d       	adc	r31, r1
    4a64:	a0 ee       	ldi	r26, 0xE0	; 224
    4a66:	b4 e0       	ldi	r27, 0x04	; 4
    4a68:	62 9f       	mul	r22, r18
    4a6a:	a0 0d       	add	r26, r0
    4a6c:	b1 1d       	adc	r27, r1
    4a6e:	00 24       	eor	r0, r0
    4a70:	05 90       	lpm	r0, Z+
    4a72:	0d 92       	st	X+, r0
    4a74:	05 90       	lpm	r0, Z+
    4a76:	0d 92       	st	X+, r0
    4a78:	05 90       	lpm	r0, Z+
    4a7a:	0d 92       	st	X+, r0
    4a7c:	05 90       	lpm	r0, Z+
    4a7e:	0d 92       	st	X+, r0
    4a80:	05 90       	lpm	r0, Z+
    4a82:	0d 92       	st	X+, r0
    4a84:	05 90       	lpm	r0, Z+
    4a86:	0d 92       	st	X+, r0
    4a88:	05 90       	lpm	r0, Z+
    4a8a:	0d 92       	st	X+, r0
    4a8c:	05 90       	lpm	r0, Z+
    4a8e:	0d 92       	st	X+, r0
    4a90:	05 90       	lpm	r0, Z+
    4a92:	0d 92       	st	X+, r0
    4a94:	05 90       	lpm	r0, Z+
    4a96:	0d 92       	st	X+, r0
    4a98:	05 90       	lpm	r0, Z+
    4a9a:	0d 92       	st	X+, r0
    4a9c:	05 90       	lpm	r0, Z+
    4a9e:	0d 92       	st	X+, r0
    4aa0:	05 90       	lpm	r0, Z+
    4aa2:	0d 92       	st	X+, r0
    4aa4:	05 90       	lpm	r0, Z+
    4aa6:	0d 92       	st	X+, r0
    4aa8:	05 90       	lpm	r0, Z+
    4aaa:	0d 92       	st	X+, r0
    4aac:	05 90       	lpm	r0, Z+
    4aae:	0d 92       	st	X+, r0
    4ab0:	05 90       	lpm	r0, Z+
    4ab2:	0d 92       	st	X+, r0
    4ab4:	05 90       	lpm	r0, Z+
    4ab6:	0d 92       	st	X+, r0
    4ab8:	05 90       	lpm	r0, Z+
    4aba:	0d 92       	st	X+, r0
    4abc:	05 90       	lpm	r0, Z+
    4abe:	0d 92       	st	X+, r0
    4ac0:	05 90       	lpm	r0, Z+
    4ac2:	0d 92       	st	X+, r0
    4ac4:	05 90       	lpm	r0, Z+
    4ac6:	0d 92       	st	X+, r0
    4ac8:	05 90       	lpm	r0, Z+
    4aca:	0d 92       	st	X+, r0
    4acc:	05 90       	lpm	r0, Z+
    4ace:	0d 92       	st	X+, r0
    4ad0:	05 90       	lpm	r0, Z+
    4ad2:	0d 92       	st	X+, r0
    4ad4:	05 90       	lpm	r0, Z+
    4ad6:	0d 92       	st	X+, r0
    4ad8:	05 90       	lpm	r0, Z+
    4ada:	0d 92       	st	X+, r0
    4adc:	05 90       	lpm	r0, Z+
    4ade:	0d 92       	st	X+, r0
    4ae0:	05 90       	lpm	r0, Z+
    4ae2:	0d 92       	st	X+, r0
    4ae4:	05 90       	lpm	r0, Z+
    4ae6:	0d 92       	st	X+, r0
    4ae8:	05 90       	lpm	r0, Z+
    4aea:	0d 92       	st	X+, r0
    4aec:	05 90       	lpm	r0, Z+
    4aee:	0d 92       	st	X+, r0
    4af0:	05 90       	lpm	r0, Z+
    4af2:	0d 92       	st	X+, r0
    4af4:	05 90       	lpm	r0, Z+
    4af6:	0d 92       	st	X+, r0
    4af8:	05 90       	lpm	r0, Z+
    4afa:	0d 92       	st	X+, r0
    4afc:	05 90       	lpm	r0, Z+
    4afe:	0d 92       	st	X+, r0
    4b00:	05 90       	lpm	r0, Z+
    4b02:	0d 92       	st	X+, r0
    4b04:	05 90       	lpm	r0, Z+
    4b06:	0d 92       	st	X+, r0
    4b08:	05 90       	lpm	r0, Z+
    4b0a:	0d 92       	st	X+, r0
    4b0c:	05 90       	lpm	r0, Z+
    4b0e:	0d 92       	st	X+, r0
    4b10:	05 90       	lpm	r0, Z+
    4b12:	0d 92       	st	X+, r0
    4b14:	05 90       	lpm	r0, Z+
    4b16:	0d 92       	st	X+, r0
    4b18:	05 90       	lpm	r0, Z+
    4b1a:	0d 92       	st	X+, r0
    4b1c:	05 90       	lpm	r0, Z+
    4b1e:	0d 92       	st	X+, r0
    4b20:	05 90       	lpm	r0, Z+
    4b22:	0d 92       	st	X+, r0
    4b24:	05 90       	lpm	r0, Z+
    4b26:	0d 92       	st	X+, r0
    4b28:	05 90       	lpm	r0, Z+
    4b2a:	0d 92       	st	X+, r0
    4b2c:	05 90       	lpm	r0, Z+
    4b2e:	0d 92       	st	X+, r0
    4b30:	05 90       	lpm	r0, Z+
    4b32:	0d 92       	st	X+, r0
    4b34:	05 90       	lpm	r0, Z+
    4b36:	0d 92       	st	X+, r0
    4b38:	05 90       	lpm	r0, Z+
    4b3a:	0d 92       	st	X+, r0
    4b3c:	05 90       	lpm	r0, Z+
    4b3e:	0d 92       	st	X+, r0
    4b40:	05 90       	lpm	r0, Z+
    4b42:	0d 92       	st	X+, r0
    4b44:	05 90       	lpm	r0, Z+
    4b46:	0d 92       	st	X+, r0
    4b48:	05 90       	lpm	r0, Z+
    4b4a:	0d 92       	st	X+, r0
    4b4c:	05 90       	lpm	r0, Z+
    4b4e:	0d 92       	st	X+, r0
    4b50:	05 90       	lpm	r0, Z+
    4b52:	0d 92       	st	X+, r0
    4b54:	05 90       	lpm	r0, Z+
    4b56:	0d 92       	st	X+, r0
    4b58:	05 90       	lpm	r0, Z+
    4b5a:	0d 92       	st	X+, r0
    4b5c:	05 90       	lpm	r0, Z+
    4b5e:	0d 92       	st	X+, r0
    4b60:	05 90       	lpm	r0, Z+
    4b62:	0d 92       	st	X+, r0
    4b64:	05 90       	lpm	r0, Z+
    4b66:	0d 92       	st	X+, r0
    4b68:	05 90       	lpm	r0, Z+
    4b6a:	0d 92       	st	X+, r0
    4b6c:	05 90       	lpm	r0, Z+
    4b6e:	0d 92       	st	X+, r0
    4b70:	11 24       	eor	r1, r1
    4b72:	08 95       	ret

00004b74 <BlitSprite>:
    4b74:	94 e0       	ldi	r25, 0x04	; 4
    4b76:	89 9f       	mul	r24, r25
    4b78:	ef e8       	ldi	r30, 0x8F	; 143
    4b7a:	fa e0       	ldi	r31, 0x0A	; 10
    4b7c:	e0 0d       	add	r30, r0
    4b7e:	f1 1d       	adc	r31, r1
    4b80:	82 81       	ldd	r24, Z+2	; 0x02
    4b82:	e0 91 04 08 	lds	r30, 0x0804
    4b86:	f0 91 05 08 	lds	r31, 0x0805
    4b8a:	90 e4       	ldi	r25, 0x40	; 64
    4b8c:	89 9f       	mul	r24, r25
    4b8e:	e0 0d       	add	r30, r0
    4b90:	f1 1d       	adc	r31, r1
    4b92:	a0 ee       	ldi	r26, 0xE0	; 224
    4b94:	b4 e0       	ldi	r27, 0x04	; 4
    4b96:	69 9f       	mul	r22, r25
    4b98:	a0 0d       	add	r26, r0
    4b9a:	b1 1d       	adc	r27, r1
    4b9c:	11 24       	eor	r1, r1
    4b9e:	40 30       	cpi	r20, 0x00	; 0
    4ba0:	21 f4       	brne	.+8      	; 0x4baa <x_2nd_tile>
    4ba2:	a2 0f       	add	r26, r18
    4ba4:	b1 1d       	adc	r27, r1
    4ba6:	82 2f       	mov	r24, r18
    4ba8:	04 c0       	rjmp	.+8      	; 0x4bb2 <x_check_end>

00004baa <x_2nd_tile>:
    4baa:	88 e0       	ldi	r24, 0x08	; 8
    4bac:	82 1b       	sub	r24, r18
    4bae:	e8 0f       	add	r30, r24
    4bb0:	f1 1d       	adc	r31, r1

00004bb2 <x_check_end>:
    4bb2:	50 30       	cpi	r21, 0x00	; 0
    4bb4:	31 f4       	brne	.+12     	; 0x4bc2 <y_2nd_tile>
    4bb6:	98 e0       	ldi	r25, 0x08	; 8
    4bb8:	93 9f       	mul	r25, r19
    4bba:	a0 0d       	add	r26, r0
    4bbc:	b1 1d       	adc	r27, r1
    4bbe:	93 2f       	mov	r25, r19
    4bc0:	06 c0       	rjmp	.+12     	; 0x4bce <y_check_end>

00004bc2 <y_2nd_tile>:
    4bc2:	98 e0       	ldi	r25, 0x08	; 8
    4bc4:	93 1b       	sub	r25, r19
    4bc6:	58 e0       	ldi	r21, 0x08	; 8
    4bc8:	59 9f       	mul	r21, r25
    4bca:	e0 0d       	add	r30, r0
    4bcc:	f1 1d       	adc	r31, r1

00004bce <y_check_end>:
    4bce:	11 24       	eor	r1, r1
    4bd0:	3e ef       	ldi	r19, 0xFE	; 254
    4bd2:	58 e0       	ldi	r21, 0x08	; 8
    4bd4:	59 1b       	sub	r21, r25

00004bd6 <y2_loop>:
    4bd6:	48 e0       	ldi	r20, 0x08	; 8
    4bd8:	48 1b       	sub	r20, r24

00004bda <x2_loop>:
    4bda:	25 91       	lpm	r18, Z+
    4bdc:	23 13       	cpse	r18, r19
    4bde:	2c 93       	st	X, r18
    4be0:	11 96       	adiw	r26, 0x01	; 1
    4be2:	4a 95       	dec	r20
    4be4:	d1 f7       	brne	.-12     	; 0x4bda <x2_loop>
    4be6:	e8 0f       	add	r30, r24
    4be8:	f1 1d       	adc	r31, r1
    4bea:	a8 0f       	add	r26, r24
    4bec:	b1 1d       	adc	r27, r1
    4bee:	5a 95       	dec	r21
    4bf0:	91 f7       	brne	.-28     	; 0x4bd6 <y2_loop>
    4bf2:	11 24       	eor	r1, r1
    4bf4:	08 95       	ret

00004bf6 <SetColorBurstOffset>:
    4bf6:	80 93 17 08 	sts	0x0817, r24
    4bfa:	08 95       	ret

00004bfc <ReadJoypad>:
    4bfc:	88 23       	and	r24, r24
    4bfe:	29 f4       	brne	.+10     	; 0x4c0a <rj_p2>
    4c00:	80 91 0f 08 	lds	r24, 0x080F
    4c04:	90 91 10 08 	lds	r25, 0x0810
    4c08:	08 95       	ret

00004c0a <rj_p2>:
    4c0a:	80 91 13 08 	lds	r24, 0x0813
    4c0e:	90 91 14 08 	lds	r25, 0x0814
    4c12:	08 95       	ret

00004c14 <ReadJoypadExt>:
    4c14:	88 23       	and	r24, r24
    4c16:	29 f4       	brne	.+10     	; 0x4c22 <rj_p2m>
    4c18:	80 91 11 08 	lds	r24, 0x0811
    4c1c:	90 91 12 08 	lds	r25, 0x0812
    4c20:	08 95       	ret

00004c22 <rj_p2m>:
    4c22:	80 91 15 08 	lds	r24, 0x0815
    4c26:	90 91 16 08 	lds	r25, 0x0816
    4c2a:	08 95       	ret

00004c2c <WaitUs>:
    4c2c:	78 e0       	ldi	r23, 0x08	; 8
    4c2e:	7a 95       	dec	r23
    4c30:	f1 f7       	brne	.-4      	; 0x4c2e <WaitUs+0x2>
    4c32:	00 00       	nop
    4c34:	01 97       	sbiw	r24, 0x01	; 1
    4c36:	d1 f7       	brne	.-12     	; 0x4c2c <WaitUs>
    4c38:	08 95       	ret

00004c3a <WriteEeprom>:
    4c3a:	f9 99       	sbic	0x1f, 1	; 31
    4c3c:	fe cf       	rjmp	.-4      	; 0x4c3a <WriteEeprom>
    4c3e:	92 bd       	out	0x22, r25	; 34
    4c40:	81 bd       	out	0x21, r24	; 33
    4c42:	60 bd       	out	0x20, r22	; 32
    4c44:	f8 94       	cli
    4c46:	fa 9a       	sbi	0x1f, 2	; 31
    4c48:	f9 9a       	sbi	0x1f, 1	; 31
    4c4a:	78 94       	sei
    4c4c:	08 95       	ret

00004c4e <ReadEeprom>:
    4c4e:	f9 99       	sbic	0x1f, 1	; 31
    4c50:	fe cf       	rjmp	.-4      	; 0x4c4e <ReadEeprom>
    4c52:	92 bd       	out	0x22, r25	; 34
    4c54:	81 bd       	out	0x21, r24	; 33
    4c56:	f8 94       	cli
    4c58:	f8 9a       	sbi	0x1f, 0	; 31
    4c5a:	80 b5       	in	r24, 0x20	; 32
    4c5c:	78 94       	sei
    4c5e:	08 95       	ret

00004c60 <internal_spi_byte>:
    4c60:	8e bd       	out	0x2e, r24	; 46
    4c62:	95 e0       	ldi	r25, 0x05	; 5
    4c64:	9a 95       	dec	r25
    4c66:	f1 f7       	brne	.-4      	; 0x4c64 <internal_spi_byte+0x4>
    4c68:	8d b5       	in	r24, 0x2d	; 45
    4c6a:	8e b5       	in	r24, 0x2e	; 46
    4c6c:	08 95       	ret
	...

00004d00 <SetMixerNote>:
    4d00:	99 27       	eor	r25, r25
    4d02:	77 27       	eor	r23, r23
    4d04:	83 30       	cpi	r24, 0x03	; 3
    4d06:	08 f0       	brcs	.+2      	; 0x4d0a <set_note_waves>
    4d08:	08 95       	ret

00004d0a <set_note_waves>:
    4d0a:	e0 e0       	ldi	r30, 0x00	; 0
    4d0c:	f9 e5       	ldi	r31, 0x59	; 89
    4d0e:	66 0f       	add	r22, r22
    4d10:	77 1f       	adc	r23, r23
    4d12:	e6 0f       	add	r30, r22
    4d14:	f7 1f       	adc	r31, r23
    4d16:	a5 91       	lpm	r26, Z+
    4d18:	b4 91       	lpm	r27, Z+
    4d1a:	ed e3       	ldi	r30, 0x3D	; 61
    4d1c:	fa e0       	ldi	r31, 0x0A	; 10
    4d1e:	2a e0       	ldi	r18, 0x0A	; 10
    4d20:	28 9f       	mul	r18, r24
    4d22:	e0 0d       	add	r30, r0
    4d24:	f1 1d       	adc	r31, r1
    4d26:	a1 83       	std	Z+1, r26	; 0x01
    4d28:	b2 83       	std	Z+2, r27	; 0x02
    4d2a:	11 24       	eor	r1, r1
    4d2c:	08 95       	ret

00004d2e <SetMixerNoiseParams>:
    4d2e:	90 91 5c 0a 	lds	r25, 0x0A5C
    4d32:	91 70       	andi	r25, 0x01	; 1
    4d34:	88 0f       	add	r24, r24
    4d36:	89 2b       	or	r24, r25
    4d38:	80 93 5c 0a 	sts	0x0A5C, r24
    4d3c:	08 95       	ret

00004d3e <SetMixerWave>:
    4d3e:	99 27       	eor	r25, r25
    4d40:	77 27       	eor	r23, r23
    4d42:	ed e3       	ldi	r30, 0x3D	; 61
    4d44:	fa e0       	ldi	r31, 0x0A	; 10
    4d46:	2a e0       	ldi	r18, 0x0A	; 10
    4d48:	28 9f       	mul	r18, r24
    4d4a:	e0 0d       	add	r30, r0
    4d4c:	f1 1d       	adc	r31, r1
    4d4e:	6e 3f       	cpi	r22, 0xFE	; 254
    4d50:	31 f4       	brne	.+12     	; 0x4d5e <smw1>
    4d52:	60 91 5c 0a 	lds	r22, 0x0A5C
    4d56:	6e 7f       	andi	r22, 0xFE	; 254
    4d58:	60 93 5c 0a 	sts	0x0A5C, r22
    4d5c:	0b c0       	rjmp	.+22     	; 0x4d74 <esmw>

00004d5e <smw1>:
    4d5e:	6f 3f       	cpi	r22, 0xFF	; 255
    4d60:	31 f4       	brne	.+12     	; 0x4d6e <smw2>
    4d62:	60 91 5c 0a 	lds	r22, 0x0A5C
    4d66:	6e 6f       	ori	r22, 0xFE	; 254
    4d68:	60 93 5c 0a 	sts	0x0A5C, r22
    4d6c:	03 c0       	rjmp	.+6      	; 0x4d74 <esmw>

00004d6e <smw2>:
    4d6e:	7f e4       	ldi	r23, 0x4F	; 79
    4d70:	76 0f       	add	r23, r22
    4d72:	75 83       	std	Z+5, r23	; 0x05

00004d74 <esmw>:
    4d74:	11 24       	eor	r1, r1
    4d76:	08 95       	ret

00004d78 <SetMixerVolume>:
    4d78:	99 27       	eor	r25, r25
    4d7a:	77 27       	eor	r23, r23
    4d7c:	ed e3       	ldi	r30, 0x3D	; 61
    4d7e:	fa e0       	ldi	r31, 0x0A	; 10
    4d80:	2a e0       	ldi	r18, 0x0A	; 10
    4d82:	28 9f       	mul	r18, r24
    4d84:	e0 0d       	add	r30, r0
    4d86:	f1 1d       	adc	r31, r1
    4d88:	60 83       	st	Z, r22
    4d8a:	11 24       	eor	r1, r1
    4d8c:	08 95       	ret

00004d8e <MixSound>:
    4d8e:	2f 93       	push	r18
    4d90:	3f 93       	push	r19
    4d92:	4f 93       	push	r20
    4d94:	5f 93       	push	r21
    4d96:	6f 93       	push	r22
    4d98:	7f 93       	push	r23
    4d9a:	8f 93       	push	r24
    4d9c:	9f 93       	push	r25
    4d9e:	af 93       	push	r26
    4da0:	bf 93       	push	r27
    4da2:	78 94       	sei
    4da4:	11 24       	eor	r1, r1
    4da6:	0e 94 76 30 	call	0x60ec	; 0x60ec <ProcessFading>
    4daa:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <ReadControllers>
    4dae:	0e 94 3f 32 	call	0x647e	; 0x647e <mmc_processMixer>
    4db2:	0e 94 72 2e 	call	0x5ce4	; 0x5ce4 <processMouseMovement>
    4db6:	0e 94 3c 31 	call	0x6278	; 0x6278 <ProcessSprites>
    4dba:	2f 92       	push	r2
    4dbc:	3f 92       	push	r3
    4dbe:	4f 92       	push	r4
    4dc0:	5f 92       	push	r5
    4dc2:	6f 92       	push	r6
    4dc4:	7f 92       	push	r7
    4dc6:	8f 92       	push	r8
    4dc8:	9f 92       	push	r9
    4dca:	af 92       	push	r10
    4dcc:	bf 92       	push	r11
    4dce:	cf 92       	push	r12
    4dd0:	df 92       	push	r13
    4dd2:	ef 92       	push	r14
    4dd4:	ff 92       	push	r15
    4dd6:	0f 93       	push	r16
    4dd8:	1f 93       	push	r17
    4dda:	cf 93       	push	r28
    4ddc:	df 93       	push	r29
    4dde:	00 90 3a 0a 	lds	r0, 0x0A3A
    4de2:	00 20       	and	r0, r0
    4de4:	19 f4       	brne	.+6      	; 0x4dec <set_hi_bank>
    4de6:	ac e2       	ldi	r26, 0x2C	; 44
    4de8:	b8 e0       	ldi	r27, 0x08	; 8
    4dea:	02 c0       	rjmp	.+4      	; 0x4df0 <end_set_bank>

00004dec <set_hi_bank>:
    4dec:	a2 e3       	ldi	r26, 0x32	; 50
    4dee:	b9 e0       	ldi	r27, 0x09	; 9

00004df0 <end_set_bank>:
    4df0:	01 e0       	ldi	r16, 0x01	; 1
    4df2:	00 26       	eor	r0, r16
    4df4:	00 92 3a 0a 	sts	0x0A3A, r0
    4df8:	02 e0       	ldi	r16, 0x02	; 2
    4dfa:	00 93 3b 0a 	sts	0x0A3B, r16
    4dfe:	df 91       	pop	r29
    4e00:	cf 91       	pop	r28
    4e02:	1f 91       	pop	r17
    4e04:	0f 91       	pop	r16
    4e06:	ff 90       	pop	r15
    4e08:	ef 90       	pop	r14
    4e0a:	df 90       	pop	r13
    4e0c:	cf 90       	pop	r12
    4e0e:	bf 90       	pop	r11
    4e10:	af 90       	pop	r10
    4e12:	9f 90       	pop	r9
    4e14:	8f 90       	pop	r8
    4e16:	7f 90       	pop	r7
    4e18:	6f 90       	pop	r6
    4e1a:	5f 90       	pop	r5
    4e1c:	4f 90       	pop	r4
    4e1e:	3f 90       	pop	r3
    4e20:	2f 90       	pop	r2
    4e22:	99 27       	eor	r25, r25
    4e24:	80 91 06 08 	lds	r24, 0x0806
    4e28:	77 27       	eor	r23, r23
    4e2a:	60 91 07 08 	lds	r22, 0x0807
    4e2e:	11 24       	eor	r1, r1
    4e30:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <DisplayMixStats>
    4e34:	bf 91       	pop	r27
    4e36:	af 91       	pop	r26
    4e38:	9f 91       	pop	r25
    4e3a:	8f 91       	pop	r24
    4e3c:	7f 91       	pop	r23
    4e3e:	6f 91       	pop	r22
    4e40:	5f 91       	pop	r21
    4e42:	4f 91       	pop	r20
    4e44:	3f 91       	pop	r19
    4e46:	2f 91       	pop	r18
    4e48:	08 95       	ret

00004e4a <update_sound_buffer>:
    4e4a:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <update_sound_buffer+0x4>
    4e4e:	0c 94 29 27 	jmp	0x4e52	; 0x4e52 <update_sound_buffer_2b>

00004e52 <update_sound_buffer_2b>:
    4e52:	0f 93       	push	r16
    4e54:	1f 93       	push	r17
    4e56:	2f 93       	push	r18
    4e58:	e0 91 38 0a 	lds	r30, 0x0A38
    4e5c:	f0 91 39 0a 	lds	r31, 0x0A39
    4e60:	01 91       	ld	r16, Z+
    4e62:	00 93 b3 00 	sts	0x00B3, r16
    4e66:	0a e0       	ldi	r16, 0x0A	; 10
    4e68:	e8 33       	cpi	r30, 0x38	; 56
    4e6a:	f0 07       	cpc	r31, r16
    4e6c:	10 f4       	brcc	.+4      	; 0x4e72 <s1>
    4e6e:	00 00       	nop
	...

00004e72 <s1>:
    4e72:	10 f0       	brcs	.+4      	; 0x4e78 <s2>
    4e74:	ec e2       	ldi	r30, 0x2C	; 44
    4e76:	f8 e0       	ldi	r31, 0x08	; 8

00004e78 <s2>:
    4e78:	e0 93 38 0a 	sts	0x0A38, r30
    4e7c:	f0 93 39 0a 	sts	0x0A39, r31
    4e80:	c8 95       	lpm
    4e82:	c8 95       	lpm
    4e84:	c8 95       	lpm
    4e86:	c8 95       	lpm
    4e88:	c8 95       	lpm
    4e8a:	c8 95       	lpm
    4e8c:	00 00       	nop
    4e8e:	00 00       	nop
    4e90:	2f 91       	pop	r18
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	08 95       	ret

00004e98 <update_sound_buffer_2>:
    4e98:	00 00       	nop
    4e9a:	e0 91 07 08 	lds	r30, 0x0807
    4e9e:	e0 ff       	sbrs	r30, 0
    4ea0:	d8 cf       	rjmp	.-80     	; 0x4e52 <update_sound_buffer_2b>
    4ea2:	e1 e1       	ldi	r30, 0x11	; 17

00004ea4 <usb2>:
    4ea4:	ea 95       	dec	r30
    4ea6:	f1 f7       	brne	.-4      	; 0x4ea4 <usb2>
    4ea8:	00 00       	nop
    4eaa:	00 00       	nop
    4eac:	08 95       	ret
	...

00004f00 <waves>:
    4f00:	00 03       	mulsu	r16, r16
    4f02:	06 09       	sbc	r16, r6
    4f04:	0c 10       	cpse	r0, r12
    4f06:	13 16       	cp	r1, r19
    4f08:	19 1c       	adc	r1, r9
    4f0a:	1f 22       	and	r1, r31
    4f0c:	25 28       	or	r2, r5
    4f0e:	2b 2e       	mov	r2, r27
    4f10:	31 33       	cpi	r19, 0x31	; 49
    4f12:	36 39       	cpi	r19, 0x96	; 150
    4f14:	3c 3f       	cpi	r19, 0xFC	; 252
    4f16:	41 44       	sbci	r20, 0x41	; 65
    4f18:	47 49       	sbci	r20, 0x97	; 151
    4f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    4f1c:	51 53       	subi	r21, 0x31	; 49
    4f1e:	55 58       	subi	r21, 0x85	; 133
    4f20:	5a 5c       	subi	r21, 0xCA	; 202
    4f22:	5e 60       	ori	r21, 0x0E	; 14
    4f24:	62 64       	ori	r22, 0x42	; 66
    4f26:	66 68       	ori	r22, 0x86	; 134
    4f28:	6a 6b       	ori	r22, 0xBA	; 186
    4f2a:	6d 6f       	ori	r22, 0xFD	; 253
    4f2c:	70 71       	andi	r23, 0x10	; 16
    4f2e:	73 74       	andi	r23, 0x43	; 67
    4f30:	75 76       	andi	r23, 0x65	; 101
    4f32:	78 79       	andi	r23, 0x98	; 152
    4f34:	7a 7a       	andi	r23, 0xAA	; 170
    4f36:	7b 7c       	andi	r23, 0xCB	; 203
    4f38:	7d 7d       	andi	r23, 0xDD	; 221
    4f3a:	7e 7e       	andi	r23, 0xEE	; 238
    4f3c:	7e 7f       	andi	r23, 0xFE	; 254
    4f3e:	7f 7f       	andi	r23, 0xFF	; 255
    4f40:	7f 7f       	andi	r23, 0xFF	; 255
    4f42:	7f 7f       	andi	r23, 0xFF	; 255
    4f44:	7e 7e       	andi	r23, 0xEE	; 238
    4f46:	7e 7d       	andi	r23, 0xDE	; 222
    4f48:	7d 7c       	andi	r23, 0xCD	; 205
    4f4a:	7b 7a       	andi	r23, 0xAB	; 171
    4f4c:	7a 79       	andi	r23, 0x9A	; 154
    4f4e:	78 76       	andi	r23, 0x68	; 104
    4f50:	75 74       	andi	r23, 0x45	; 69
    4f52:	73 71       	andi	r23, 0x13	; 19
    4f54:	70 6f       	ori	r23, 0xF0	; 240
    4f56:	6d 6b       	ori	r22, 0xBD	; 189
    4f58:	6a 68       	ori	r22, 0x8A	; 138
    4f5a:	66 64       	ori	r22, 0x46	; 70
    4f5c:	62 60       	ori	r22, 0x02	; 2
    4f5e:	5e 5c       	subi	r21, 0xCE	; 206
    4f60:	5a 58       	subi	r21, 0x8A	; 138
    4f62:	55 53       	subi	r21, 0x35	; 53
    4f64:	51 4e       	sbci	r21, 0xE1	; 225
    4f66:	4c 49       	sbci	r20, 0x9C	; 156
    4f68:	47 44       	sbci	r20, 0x47	; 71
    4f6a:	41 3f       	cpi	r20, 0xF1	; 241
    4f6c:	3c 39       	cpi	r19, 0x9C	; 156
    4f6e:	36 33       	cpi	r19, 0x36	; 54
    4f70:	31 2e       	mov	r3, r17
    4f72:	2b 28       	or	r2, r11
    4f74:	25 22       	and	r2, r21
    4f76:	1f 1c       	adc	r1, r15
    4f78:	19 16       	cp	r1, r25
    4f7a:	13 10       	cpse	r1, r3
    4f7c:	0c 09       	sbc	r16, r12
    4f7e:	06 03       	mulsu	r16, r22
    4f80:	00 fd       	sbrc	r16, 0
    4f82:	fa f7       	brpl	.-2      	; 0x4f82 <waves+0x82>
    4f84:	f4 f0       	brlt	.+60     	; 0x4fc2 <waves+0xc2>
    4f86:	ed ea       	ldi	r30, 0xAD	; 173
    4f88:	e7 e4       	ldi	r30, 0x47	; 71
    4f8a:	e1 de       	rcall	.-574    	; 0x4d4e <SetMixerWave+0x10>
    4f8c:	db d8       	rcall	.-3658   	; 0x4144 <map_main+0x105>
    4f8e:	d5 d2       	rcall	.+1450   	; 0x553a <waves+0x63a>
    4f90:	cf cd       	rjmp	.-1122   	; 0x4b30 <CopyTileToRam+0xde>
    4f92:	ca c7       	rjmp	.+3988   	; 0x5f28 <ReadControllers+0x54>
    4f94:	c4 c1       	rjmp	.+904    	; 0x531e <waves+0x41e>
    4f96:	bf bc       	out	0x2f, r11	; 47
    4f98:	b9 b7       	in	r27, 0x39	; 57
    4f9a:	b4 b2       	in	r11, 0x14	; 20
    4f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    4f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    4fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    4fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    4fa4:	9e 9c       	mul	r9, r14
    4fa6:	9a 98       	cbi	0x13, 2	; 19
    4fa8:	96 95       	lsr	r25
    4faa:	93 91       	.word	0x9193	; ????
    4fac:	90 8f       	std	Z+24, r25	; 0x18
    4fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    4fb0:	8b 8a       	std	Y+19, r8	; 0x13
    4fb2:	88 87       	std	Y+8, r24	; 0x08
    4fb4:	86 86       	std	Z+14, r8	; 0x0e
    4fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    4fb8:	83 83       	std	Z+3, r24	; 0x03
    4fba:	82 82       	std	Z+2, r8	; 0x02
    4fbc:	82 81       	ldd	r24, Z+2	; 0x02
    4fbe:	81 81       	ldd	r24, Z+1	; 0x01
    4fc0:	81 81       	ldd	r24, Z+1	; 0x01
    4fc2:	81 81       	ldd	r24, Z+1	; 0x01
    4fc4:	82 82       	std	Z+2, r8	; 0x02
    4fc6:	82 83       	std	Z+2, r24	; 0x02
    4fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    4fca:	85 86       	std	Z+13, r8	; 0x0d
    4fcc:	86 87       	std	Z+14, r24	; 0x0e
    4fce:	88 8a       	std	Y+16, r8	; 0x10
    4fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    4fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    4fd4:	90 91 93 95 	lds	r25, 0x9593
    4fd8:	96 98       	cbi	0x12, 6	; 18
    4fda:	9a 9c       	mul	r9, r10
    4fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    4fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    4fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    4fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    4fe4:	af b2       	in	r10, 0x1f	; 31
    4fe6:	b4 b7       	in	r27, 0x34	; 52
    4fe8:	b9 bc       	out	0x29, r11	; 41
    4fea:	bf c1       	rjmp	.+894    	; 0x536a <waves+0x46a>
    4fec:	c4 c7       	rjmp	.+3976   	; 0x5f76 <EnableSnesMouse+0x22>
    4fee:	ca cd       	rjmp	.-1132   	; 0x4b84 <BlitSprite+0x10>
    4ff0:	cf d2       	rcall	.+1438   	; 0x5590 <waves+0x690>
    4ff2:	d5 d8       	rcall	.-3670   	; 0x419e <map_main+0x15f>
    4ff4:	db de       	rcall	.-586    	; 0x4dac <MixSound+0x1e>
    4ff6:	e1 e4       	ldi	r30, 0x41	; 65
    4ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    4ffa:	ed f0       	brhs	.+58     	; 0x5036 <waves+0x136>
    4ffc:	f4 f7       	brge	.-4      	; 0x4ffa <waves+0xfa>
    4ffe:	fa fd       	.word	0xfdfa	; ????
    5000:	80 81       	ld	r24, Z
    5002:	82 83       	std	Z+2, r24	; 0x02
    5004:	84 85       	ldd	r24, Z+12	; 0x0c
    5006:	86 87       	std	Z+14, r24	; 0x0e
    5008:	88 89       	ldd	r24, Y+16	; 0x10
    500a:	8a 8b       	std	Y+18, r24	; 0x12
    500c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    500e:	8e 8f       	std	Y+30, r24	; 0x1e
    5010:	90 91 92 93 	lds	r25, 0x9392
    5014:	94 95       	.word	0x9594	; ????
    5016:	96 97       	sbiw	r26, 0x26	; 38
    5018:	98 99       	sbic	0x13, 0	; 19
    501a:	9a 9b       	sbis	0x13, 2	; 19
    501c:	9c 9d       	mul	r25, r12
    501e:	9e 9f       	mul	r25, r30
    5020:	a0 a1       	ldd	r26, Z+32	; 0x20
    5022:	a2 a3       	std	Z+34, r26	; 0x22
    5024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    5026:	a6 a7       	std	Z+46, r26	; 0x2e
    5028:	a8 a9       	ldd	r26, Y+48	; 0x30
    502a:	aa ab       	std	Y+50, r26	; 0x32
    502c:	ac ad       	ldd	r26, Y+60	; 0x3c
    502e:	ae af       	std	Y+62, r26	; 0x3e
    5030:	b0 b1       	in	r27, 0x00	; 0
    5032:	b2 b3       	in	r27, 0x12	; 18
    5034:	b4 b5       	in	r27, 0x24	; 36
    5036:	b6 b7       	in	r27, 0x36	; 54
    5038:	b8 b9       	out	0x08, r27	; 8
    503a:	ba bb       	out	0x1a, r27	; 26
    503c:	bc bd       	out	0x2c, r27	; 44
    503e:	be bf       	out	0x3e, r27	; 62
    5040:	c0 c1       	rjmp	.+896    	; 0x53c2 <waves+0x4c2>
    5042:	c2 c3       	rjmp	.+1924   	; 0x57c8 <waves+0x8c8>
    5044:	c4 c5       	rjmp	.+2952   	; 0x5bce <processButtons+0x17a>
    5046:	c6 c7       	rjmp	.+3980   	; 0x5fd4 <RestoreBackground+0x6>
    5048:	c8 c9       	rjmp	.-3184   	; 0x43da <map_btnPlayNormal+0x2>
    504a:	ca cb       	rjmp	.-2156   	; 0x47e0 <render+0x46>
    504c:	cc cd       	rjmp	.-1128   	; 0x4be6 <x2_loop+0xc>
    504e:	ce cf       	rjmp	.-100    	; 0x4fec <waves+0xec>
    5050:	d0 d1       	rcall	.+928    	; 0x53f2 <waves+0x4f2>
    5052:	d2 d3       	rcall	.+1956   	; 0x57f8 <waves+0x8f8>
    5054:	d4 d5       	rcall	.+2984   	; 0x5bfe <processButtons+0x1aa>
    5056:	d6 d7       	rcall	.+4012   	; 0x6004 <DrawMap2+0x8>
    5058:	d8 d9       	rcall	.-3152   	; 0x440a <map_btnNextNormal+0x2>
    505a:	da db       	rcall	.-2124   	; 0x4810 <render+0x76>
    505c:	dc dd       	rcall	.-1096   	; 0x4c16 <ReadJoypadExt+0x2>
    505e:	de df       	rcall	.-68     	; 0x501c <waves+0x11c>
    5060:	e0 e1       	ldi	r30, 0x10	; 16
    5062:	e2 e3       	ldi	r30, 0x32	; 50
    5064:	e4 e5       	ldi	r30, 0x54	; 84
    5066:	e6 e7       	ldi	r30, 0x76	; 118
    5068:	e8 e9       	ldi	r30, 0x98	; 152
    506a:	ea eb       	ldi	r30, 0xBA	; 186
    506c:	ec ed       	ldi	r30, 0xDC	; 220
    506e:	ee ef       	ldi	r30, 0xFE	; 254
    5070:	f0 f1       	brcs	.+124    	; 0x50ee <waves+0x1ee>
    5072:	f2 f3       	brmi	.-4      	; 0x5070 <waves+0x170>
    5074:	f4 f5       	brge	.+124    	; 0x50f2 <waves+0x1f2>
    5076:	f6 f7       	brtc	.-4      	; 0x5074 <waves+0x174>
    5078:	f8 f9       	.word	0xf9f8	; ????
    507a:	fa fb       	.word	0xfbfa	; ????
    507c:	fc fd       	.word	0xfdfc	; ????
    507e:	fe ff       	.word	0xfffe	; ????
    5080:	00 01       	movw	r0, r0
    5082:	02 03       	mulsu	r16, r18
    5084:	04 05       	cpc	r16, r4
    5086:	06 07       	cpc	r16, r22
    5088:	08 09       	sbc	r16, r8
    508a:	0a 0b       	sbc	r16, r26
    508c:	0c 0d       	add	r16, r12
    508e:	0e 0f       	add	r16, r30
    5090:	10 11       	cpse	r17, r0
    5092:	12 13       	cpse	r17, r18
    5094:	14 15       	cp	r17, r4
    5096:	16 17       	cp	r17, r22
    5098:	18 19       	sub	r17, r8
    509a:	1a 1b       	sub	r17, r26
    509c:	1c 1d       	adc	r17, r12
    509e:	1e 1f       	adc	r17, r30
    50a0:	20 21       	and	r18, r0
    50a2:	22 23       	and	r18, r18
    50a4:	24 25       	eor	r18, r4
    50a6:	26 27       	eor	r18, r22
    50a8:	28 29       	or	r18, r8
    50aa:	2a 2b       	or	r18, r26
    50ac:	2c 2d       	mov	r18, r12
    50ae:	2e 2f       	mov	r18, r30
    50b0:	30 31       	cpi	r19, 0x10	; 16
    50b2:	32 33       	cpi	r19, 0x32	; 50
    50b4:	34 35       	cpi	r19, 0x54	; 84
    50b6:	36 37       	cpi	r19, 0x76	; 118
    50b8:	38 39       	cpi	r19, 0x98	; 152
    50ba:	3a 3b       	cpi	r19, 0xBA	; 186
    50bc:	3c 3d       	cpi	r19, 0xDC	; 220
    50be:	3e 3f       	cpi	r19, 0xFE	; 254
    50c0:	40 41       	sbci	r20, 0x10	; 16
    50c2:	42 43       	sbci	r20, 0x32	; 50
    50c4:	44 45       	sbci	r20, 0x54	; 84
    50c6:	46 47       	sbci	r20, 0x76	; 118
    50c8:	48 49       	sbci	r20, 0x98	; 152
    50ca:	4a 4b       	sbci	r20, 0xBA	; 186
    50cc:	4c 4d       	sbci	r20, 0xDC	; 220
    50ce:	4e 4f       	sbci	r20, 0xFE	; 254
    50d0:	50 51       	subi	r21, 0x10	; 16
    50d2:	52 53       	subi	r21, 0x32	; 50
    50d4:	54 55       	subi	r21, 0x54	; 84
    50d6:	56 57       	subi	r21, 0x76	; 118
    50d8:	58 59       	subi	r21, 0x98	; 152
    50da:	5a 5b       	subi	r21, 0xBA	; 186
    50dc:	5c 5d       	subi	r21, 0xDC	; 220
    50de:	5e 5f       	subi	r21, 0xFE	; 254
    50e0:	60 61       	ori	r22, 0x10	; 16
    50e2:	62 63       	ori	r22, 0x32	; 50
    50e4:	64 65       	ori	r22, 0x54	; 84
    50e6:	66 67       	ori	r22, 0x76	; 118
    50e8:	68 69       	ori	r22, 0x98	; 152
    50ea:	6a 6b       	ori	r22, 0xBA	; 186
    50ec:	6c 6d       	ori	r22, 0xDC	; 220
    50ee:	6e 6f       	ori	r22, 0xFE	; 254
    50f0:	70 71       	andi	r23, 0x10	; 16
    50f2:	72 73       	andi	r23, 0x32	; 50
    50f4:	74 75       	andi	r23, 0x54	; 84
    50f6:	76 77       	andi	r23, 0x76	; 118
    50f8:	78 79       	andi	r23, 0x98	; 152
    50fa:	7a 7b       	andi	r23, 0xBA	; 186
    50fc:	7c 7d       	andi	r23, 0xDC	; 220
    50fe:	7e 7f       	andi	r23, 0xFE	; 254
    5100:	00 02       	muls	r16, r16
    5102:	04 06       	cpc	r0, r20
    5104:	08 0a       	sbc	r0, r24
    5106:	0c 0e       	add	r0, r28
    5108:	10 12       	cpse	r1, r16
    510a:	14 16       	cp	r1, r20
    510c:	18 1a       	sub	r1, r24
    510e:	1c 1e       	adc	r1, r28
    5110:	20 22       	and	r2, r16
    5112:	24 26       	eor	r2, r20
    5114:	28 2a       	or	r2, r24
    5116:	2c 2e       	mov	r2, r28
    5118:	30 32       	cpi	r19, 0x20	; 32
    511a:	34 36       	cpi	r19, 0x64	; 100
    511c:	38 3a       	cpi	r19, 0xA8	; 168
    511e:	3c 3e       	cpi	r19, 0xEC	; 236
    5120:	40 42       	sbci	r20, 0x20	; 32
    5122:	44 46       	sbci	r20, 0x64	; 100
    5124:	48 4a       	sbci	r20, 0xA8	; 168
    5126:	4c 4e       	sbci	r20, 0xEC	; 236
    5128:	50 52       	subi	r21, 0x20	; 32
    512a:	54 56       	subi	r21, 0x64	; 100
    512c:	58 5a       	subi	r21, 0xA8	; 168
    512e:	5c 5e       	subi	r21, 0xEC	; 236
    5130:	60 62       	ori	r22, 0x20	; 32
    5132:	64 66       	ori	r22, 0x64	; 100
    5134:	68 6a       	ori	r22, 0xA8	; 168
    5136:	6c 6e       	ori	r22, 0xEC	; 236
    5138:	70 72       	andi	r23, 0x20	; 32
    513a:	74 76       	andi	r23, 0x64	; 100
    513c:	78 7a       	andi	r23, 0xA8	; 168
    513e:	7c 7e       	andi	r23, 0xEC	; 236
    5140:	7f 7d       	andi	r23, 0xDF	; 223
    5142:	7b 79       	andi	r23, 0x9B	; 155
    5144:	77 75       	andi	r23, 0x57	; 87
    5146:	73 71       	andi	r23, 0x13	; 19
    5148:	6f 6d       	ori	r22, 0xDF	; 223
    514a:	6b 69       	ori	r22, 0x9B	; 155
    514c:	67 65       	ori	r22, 0x57	; 87
    514e:	63 61       	ori	r22, 0x13	; 19
    5150:	5f 5d       	subi	r21, 0xDF	; 223
    5152:	5b 59       	subi	r21, 0x9B	; 155
    5154:	57 55       	subi	r21, 0x57	; 87
    5156:	53 51       	subi	r21, 0x13	; 19
    5158:	4f 4d       	sbci	r20, 0xDF	; 223
    515a:	4b 49       	sbci	r20, 0x9B	; 155
    515c:	47 45       	sbci	r20, 0x57	; 87
    515e:	43 41       	sbci	r20, 0x13	; 19
    5160:	3f 3d       	cpi	r19, 0xDF	; 223
    5162:	3b 39       	cpi	r19, 0x9B	; 155
    5164:	37 35       	cpi	r19, 0x57	; 87
    5166:	33 31       	cpi	r19, 0x13	; 19
    5168:	2f 2d       	mov	r18, r15
    516a:	2b 29       	or	r18, r11
    516c:	27 25       	eor	r18, r7
    516e:	23 21       	and	r18, r3
    5170:	1f 1d       	adc	r17, r15
    5172:	1b 19       	sub	r17, r11
    5174:	17 15       	cp	r17, r7
    5176:	13 11       	cpse	r17, r3
    5178:	0f 0d       	add	r16, r15
    517a:	0b 09       	sbc	r16, r11
    517c:	07 05       	cpc	r16, r7
    517e:	03 01       	movw	r0, r6
    5180:	ff fd       	.word	0xfdff	; ????
    5182:	fb f9       	.word	0xf9fb	; ????
    5184:	f7 f5       	brid	.+124    	; 0x5202 <waves+0x302>
    5186:	f3 f1       	brvs	.+124    	; 0x5204 <waves+0x304>
    5188:	ef ed       	ldi	r30, 0xDF	; 223
    518a:	eb e9       	ldi	r30, 0x9B	; 155
    518c:	e7 e5       	ldi	r30, 0x57	; 87
    518e:	e3 e1       	ldi	r30, 0x13	; 19
    5190:	df dd       	rcall	.-1090   	; 0x4d50 <SetMixerWave+0x12>
    5192:	db d9       	rcall	.-3146   	; 0x454a <Initialize+0x88>
    5194:	d7 d5       	rcall	.+2990   	; 0x5d44 <processMouseMovement+0x60>
    5196:	d3 d1       	rcall	.+934    	; 0x553e <waves+0x63e>
    5198:	cf cd       	rjmp	.-1122   	; 0x4d38 <SetMixerNoiseParams+0xa>
    519a:	cb c9       	rjmp	.-3178   	; 0x4532 <Initialize+0x70>
    519c:	c7 c5       	rjmp	.+2958   	; 0x5d2c <processMouseMovement+0x48>
    519e:	c3 c1       	rjmp	.+902    	; 0x5526 <waves+0x626>
    51a0:	bf bd       	out	0x2f, r27	; 47
    51a2:	bb b9       	out	0x0b, r27	; 11
    51a4:	b7 b5       	in	r27, 0x27	; 39
    51a6:	b3 b1       	in	r27, 0x03	; 3
    51a8:	af ad       	ldd	r26, Y+63	; 0x3f
    51aa:	ab a9       	ldd	r26, Y+51	; 0x33
    51ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    51ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    51b0:	9f 9d       	mul	r25, r15
    51b2:	9b 99       	sbic	0x13, 3	; 19
    51b4:	97 95       	ror	r25
    51b6:	93 91       	.word	0x9193	; ????
    51b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51ba:	8b 89       	ldd	r24, Y+19	; 0x13
    51bc:	87 85       	ldd	r24, Z+15	; 0x0f
    51be:	83 81       	ldd	r24, Z+3	; 0x03
    51c0:	80 82       	st	Z, r8
    51c2:	84 86       	std	Z+12, r8	; 0x0c
    51c4:	88 8a       	std	Y+16, r8	; 0x10
    51c6:	8c 8e       	std	Y+28, r8	; 0x1c
    51c8:	90 92 94 96 	sts	0x9694, r9
    51cc:	98 9a       	sbi	0x13, 0	; 19
    51ce:	9c 9e       	mul	r9, r28
    51d0:	a0 a2       	std	Z+32, r10	; 0x20
    51d2:	a4 a6       	std	Z+44, r10	; 0x2c
    51d4:	a8 aa       	std	Y+48, r10	; 0x30
    51d6:	ac ae       	std	Y+60, r10	; 0x3c
    51d8:	b0 b2       	in	r11, 0x10	; 16
    51da:	b4 b6       	in	r11, 0x34	; 52
    51dc:	b8 ba       	out	0x18, r11	; 24
    51de:	bc be       	out	0x3c, r11	; 60
    51e0:	c0 c2       	rjmp	.+1408   	; 0x5762 <waves+0x862>
    51e2:	c4 c6       	rjmp	.+3464   	; 0x5f6c <EnableSnesMouse+0x18>
    51e4:	c8 ca       	rjmp	.-2672   	; 0x4776 <do_hsync>
    51e6:	cc ce       	rjmp	.-616    	; 0x4f80 <waves+0x80>
    51e8:	d0 d2       	rcall	.+1440   	; 0x578a <waves+0x88a>
    51ea:	d4 d6       	rcall	.+3496   	; 0x5f94 <EnableSnesMouse+0x40>
    51ec:	d8 da       	rcall	.-2640   	; 0x479e <render+0x4>
    51ee:	dc de       	rcall	.-584    	; 0x4fa8 <waves+0xa8>
    51f0:	e0 e2       	ldi	r30, 0x20	; 32
    51f2:	e4 e6       	ldi	r30, 0x64	; 100
    51f4:	e8 ea       	ldi	r30, 0xA8	; 168
    51f6:	ec ee       	ldi	r30, 0xEC	; 236
    51f8:	f0 f2       	brcs	.-68     	; 0x51b6 <waves+0x2b6>
    51fa:	f4 f6       	brge	.-68     	; 0x51b8 <waves+0x2b8>
    51fc:	f8 fa       	.word	0xfaf8	; ????
    51fe:	fc fe       	.word	0xfefc	; ????
    5200:	7f 7f       	andi	r23, 0xFF	; 255
    5202:	7f 7f       	andi	r23, 0xFF	; 255
    5204:	7f 7f       	andi	r23, 0xFF	; 255
    5206:	7f 7f       	andi	r23, 0xFF	; 255
    5208:	7f 7f       	andi	r23, 0xFF	; 255
    520a:	7f 7f       	andi	r23, 0xFF	; 255
    520c:	7f 7f       	andi	r23, 0xFF	; 255
    520e:	7f 7f       	andi	r23, 0xFF	; 255
    5210:	7f 7f       	andi	r23, 0xFF	; 255
    5212:	7f 7f       	andi	r23, 0xFF	; 255
    5214:	7f 7f       	andi	r23, 0xFF	; 255
    5216:	7f 7f       	andi	r23, 0xFF	; 255
    5218:	7f 7f       	andi	r23, 0xFF	; 255
    521a:	7f 7f       	andi	r23, 0xFF	; 255
    521c:	7f 7f       	andi	r23, 0xFF	; 255
    521e:	7f 7f       	andi	r23, 0xFF	; 255
    5220:	7f 7f       	andi	r23, 0xFF	; 255
    5222:	7f 7f       	andi	r23, 0xFF	; 255
    5224:	7f 7f       	andi	r23, 0xFF	; 255
    5226:	7f 7f       	andi	r23, 0xFF	; 255
    5228:	7f 7f       	andi	r23, 0xFF	; 255
    522a:	7f 7f       	andi	r23, 0xFF	; 255
    522c:	7f 7f       	andi	r23, 0xFF	; 255
    522e:	7f 7f       	andi	r23, 0xFF	; 255
    5230:	7f 7f       	andi	r23, 0xFF	; 255
    5232:	7f 7f       	andi	r23, 0xFF	; 255
    5234:	7f 7f       	andi	r23, 0xFF	; 255
    5236:	7f 7f       	andi	r23, 0xFF	; 255
    5238:	7f 7f       	andi	r23, 0xFF	; 255
    523a:	7f 7f       	andi	r23, 0xFF	; 255
    523c:	7f 7f       	andi	r23, 0xFF	; 255
    523e:	7f 7f       	andi	r23, 0xFF	; 255
    5240:	80 80       	ld	r8, Z
    5242:	80 80       	ld	r8, Z
    5244:	80 80       	ld	r8, Z
    5246:	80 80       	ld	r8, Z
    5248:	80 80       	ld	r8, Z
    524a:	80 80       	ld	r8, Z
    524c:	80 80       	ld	r8, Z
    524e:	80 80       	ld	r8, Z
    5250:	80 80       	ld	r8, Z
    5252:	80 80       	ld	r8, Z
    5254:	80 80       	ld	r8, Z
    5256:	80 80       	ld	r8, Z
    5258:	80 80       	ld	r8, Z
    525a:	80 80       	ld	r8, Z
    525c:	80 80       	ld	r8, Z
    525e:	80 80       	ld	r8, Z
    5260:	80 80       	ld	r8, Z
    5262:	80 80       	ld	r8, Z
    5264:	80 80       	ld	r8, Z
    5266:	80 80       	ld	r8, Z
    5268:	80 80       	ld	r8, Z
    526a:	80 80       	ld	r8, Z
    526c:	80 80       	ld	r8, Z
    526e:	80 80       	ld	r8, Z
    5270:	80 80       	ld	r8, Z
    5272:	80 80       	ld	r8, Z
    5274:	80 80       	ld	r8, Z
    5276:	80 80       	ld	r8, Z
    5278:	80 80       	ld	r8, Z
    527a:	80 80       	ld	r8, Z
    527c:	80 80       	ld	r8, Z
    527e:	80 80       	ld	r8, Z
    5280:	80 80       	ld	r8, Z
    5282:	80 80       	ld	r8, Z
    5284:	80 80       	ld	r8, Z
    5286:	80 80       	ld	r8, Z
    5288:	80 80       	ld	r8, Z
    528a:	80 80       	ld	r8, Z
    528c:	80 80       	ld	r8, Z
    528e:	80 80       	ld	r8, Z
    5290:	80 80       	ld	r8, Z
    5292:	80 80       	ld	r8, Z
    5294:	80 80       	ld	r8, Z
    5296:	80 80       	ld	r8, Z
    5298:	80 80       	ld	r8, Z
    529a:	80 80       	ld	r8, Z
    529c:	80 80       	ld	r8, Z
    529e:	80 80       	ld	r8, Z
    52a0:	80 80       	ld	r8, Z
    52a2:	80 80       	ld	r8, Z
    52a4:	80 80       	ld	r8, Z
    52a6:	80 80       	ld	r8, Z
    52a8:	80 80       	ld	r8, Z
    52aa:	80 80       	ld	r8, Z
    52ac:	80 80       	ld	r8, Z
    52ae:	80 80       	ld	r8, Z
    52b0:	80 80       	ld	r8, Z
    52b2:	80 80       	ld	r8, Z
    52b4:	80 80       	ld	r8, Z
    52b6:	80 80       	ld	r8, Z
    52b8:	80 80       	ld	r8, Z
    52ba:	80 80       	ld	r8, Z
    52bc:	80 80       	ld	r8, Z
    52be:	80 80       	ld	r8, Z
    52c0:	80 80       	ld	r8, Z
    52c2:	80 80       	ld	r8, Z
    52c4:	80 80       	ld	r8, Z
    52c6:	80 80       	ld	r8, Z
    52c8:	80 80       	ld	r8, Z
    52ca:	80 80       	ld	r8, Z
    52cc:	80 80       	ld	r8, Z
    52ce:	80 80       	ld	r8, Z
    52d0:	80 80       	ld	r8, Z
    52d2:	80 80       	ld	r8, Z
    52d4:	80 80       	ld	r8, Z
    52d6:	80 80       	ld	r8, Z
    52d8:	80 80       	ld	r8, Z
    52da:	80 80       	ld	r8, Z
    52dc:	80 80       	ld	r8, Z
    52de:	80 80       	ld	r8, Z
    52e0:	80 80       	ld	r8, Z
    52e2:	80 80       	ld	r8, Z
    52e4:	80 80       	ld	r8, Z
    52e6:	80 80       	ld	r8, Z
    52e8:	80 80       	ld	r8, Z
    52ea:	80 80       	ld	r8, Z
    52ec:	80 80       	ld	r8, Z
    52ee:	80 80       	ld	r8, Z
    52f0:	80 80       	ld	r8, Z
    52f2:	80 80       	ld	r8, Z
    52f4:	80 80       	ld	r8, Z
    52f6:	80 80       	ld	r8, Z
    52f8:	80 80       	ld	r8, Z
    52fa:	80 80       	ld	r8, Z
    52fc:	80 80       	ld	r8, Z
    52fe:	80 80       	ld	r8, Z
    5300:	7f 7f       	andi	r23, 0xFF	; 255
    5302:	7f 7f       	andi	r23, 0xFF	; 255
    5304:	7f 7f       	andi	r23, 0xFF	; 255
    5306:	7f 7f       	andi	r23, 0xFF	; 255
    5308:	7f 7f       	andi	r23, 0xFF	; 255
    530a:	7f 7f       	andi	r23, 0xFF	; 255
    530c:	7f 7f       	andi	r23, 0xFF	; 255
    530e:	7f 7f       	andi	r23, 0xFF	; 255
    5310:	7f 7f       	andi	r23, 0xFF	; 255
    5312:	7f 7f       	andi	r23, 0xFF	; 255
    5314:	7f 7f       	andi	r23, 0xFF	; 255
    5316:	7f 7f       	andi	r23, 0xFF	; 255
    5318:	7f 7f       	andi	r23, 0xFF	; 255
    531a:	7f 7f       	andi	r23, 0xFF	; 255
    531c:	7f 7f       	andi	r23, 0xFF	; 255
    531e:	7f 7f       	andi	r23, 0xFF	; 255
    5320:	7f 7f       	andi	r23, 0xFF	; 255
    5322:	7f 7f       	andi	r23, 0xFF	; 255
    5324:	7f 7f       	andi	r23, 0xFF	; 255
    5326:	7f 7f       	andi	r23, 0xFF	; 255
    5328:	7f 7f       	andi	r23, 0xFF	; 255
    532a:	7f 7f       	andi	r23, 0xFF	; 255
    532c:	7f 7f       	andi	r23, 0xFF	; 255
    532e:	7f 7f       	andi	r23, 0xFF	; 255
    5330:	7f 7f       	andi	r23, 0xFF	; 255
    5332:	7f 7f       	andi	r23, 0xFF	; 255
    5334:	7f 7f       	andi	r23, 0xFF	; 255
    5336:	7f 7f       	andi	r23, 0xFF	; 255
    5338:	7f 7f       	andi	r23, 0xFF	; 255
    533a:	7f 7f       	andi	r23, 0xFF	; 255
    533c:	7f 7f       	andi	r23, 0xFF	; 255
    533e:	7f 7f       	andi	r23, 0xFF	; 255
    5340:	7f 7f       	andi	r23, 0xFF	; 255
    5342:	7f 7f       	andi	r23, 0xFF	; 255
    5344:	7f 7f       	andi	r23, 0xFF	; 255
    5346:	7f 7f       	andi	r23, 0xFF	; 255
    5348:	7f 7f       	andi	r23, 0xFF	; 255
    534a:	7f 7f       	andi	r23, 0xFF	; 255
    534c:	7f 7f       	andi	r23, 0xFF	; 255
    534e:	7f 7f       	andi	r23, 0xFF	; 255
    5350:	7f 7f       	andi	r23, 0xFF	; 255
    5352:	7f 7f       	andi	r23, 0xFF	; 255
    5354:	7f 7f       	andi	r23, 0xFF	; 255
    5356:	7f 7f       	andi	r23, 0xFF	; 255
    5358:	7f 7f       	andi	r23, 0xFF	; 255
    535a:	7f 7f       	andi	r23, 0xFF	; 255
    535c:	7f 7f       	andi	r23, 0xFF	; 255
    535e:	7f 7f       	andi	r23, 0xFF	; 255
    5360:	7f 7f       	andi	r23, 0xFF	; 255
    5362:	7f 7f       	andi	r23, 0xFF	; 255
    5364:	7f 7f       	andi	r23, 0xFF	; 255
    5366:	7f 7f       	andi	r23, 0xFF	; 255
    5368:	7f 7f       	andi	r23, 0xFF	; 255
    536a:	7f 7f       	andi	r23, 0xFF	; 255
    536c:	7f 7f       	andi	r23, 0xFF	; 255
    536e:	7f 7f       	andi	r23, 0xFF	; 255
    5370:	7f 7f       	andi	r23, 0xFF	; 255
    5372:	7f 7f       	andi	r23, 0xFF	; 255
    5374:	7f 7f       	andi	r23, 0xFF	; 255
    5376:	7f 7f       	andi	r23, 0xFF	; 255
    5378:	7f 7f       	andi	r23, 0xFF	; 255
    537a:	7f 7f       	andi	r23, 0xFF	; 255
    537c:	7f 7f       	andi	r23, 0xFF	; 255
    537e:	7f 7f       	andi	r23, 0xFF	; 255
    5380:	80 80       	ld	r8, Z
    5382:	80 80       	ld	r8, Z
    5384:	80 80       	ld	r8, Z
    5386:	80 80       	ld	r8, Z
    5388:	80 80       	ld	r8, Z
    538a:	80 80       	ld	r8, Z
    538c:	80 80       	ld	r8, Z
    538e:	80 80       	ld	r8, Z
    5390:	80 80       	ld	r8, Z
    5392:	80 80       	ld	r8, Z
    5394:	80 80       	ld	r8, Z
    5396:	80 80       	ld	r8, Z
    5398:	80 80       	ld	r8, Z
    539a:	80 80       	ld	r8, Z
    539c:	80 80       	ld	r8, Z
    539e:	80 80       	ld	r8, Z
    53a0:	80 80       	ld	r8, Z
    53a2:	80 80       	ld	r8, Z
    53a4:	80 80       	ld	r8, Z
    53a6:	80 80       	ld	r8, Z
    53a8:	80 80       	ld	r8, Z
    53aa:	80 80       	ld	r8, Z
    53ac:	80 80       	ld	r8, Z
    53ae:	80 80       	ld	r8, Z
    53b0:	80 80       	ld	r8, Z
    53b2:	80 80       	ld	r8, Z
    53b4:	80 80       	ld	r8, Z
    53b6:	80 80       	ld	r8, Z
    53b8:	80 80       	ld	r8, Z
    53ba:	80 80       	ld	r8, Z
    53bc:	80 80       	ld	r8, Z
    53be:	80 80       	ld	r8, Z
    53c0:	80 80       	ld	r8, Z
    53c2:	80 80       	ld	r8, Z
    53c4:	80 80       	ld	r8, Z
    53c6:	80 80       	ld	r8, Z
    53c8:	80 80       	ld	r8, Z
    53ca:	80 80       	ld	r8, Z
    53cc:	80 80       	ld	r8, Z
    53ce:	80 80       	ld	r8, Z
    53d0:	80 80       	ld	r8, Z
    53d2:	80 80       	ld	r8, Z
    53d4:	80 80       	ld	r8, Z
    53d6:	80 80       	ld	r8, Z
    53d8:	80 80       	ld	r8, Z
    53da:	80 80       	ld	r8, Z
    53dc:	80 80       	ld	r8, Z
    53de:	80 80       	ld	r8, Z
    53e0:	80 80       	ld	r8, Z
    53e2:	80 80       	ld	r8, Z
    53e4:	80 80       	ld	r8, Z
    53e6:	80 80       	ld	r8, Z
    53e8:	80 80       	ld	r8, Z
    53ea:	80 80       	ld	r8, Z
    53ec:	80 80       	ld	r8, Z
    53ee:	80 80       	ld	r8, Z
    53f0:	80 80       	ld	r8, Z
    53f2:	80 80       	ld	r8, Z
    53f4:	80 80       	ld	r8, Z
    53f6:	80 80       	ld	r8, Z
    53f8:	80 80       	ld	r8, Z
    53fa:	80 80       	ld	r8, Z
    53fc:	80 80       	ld	r8, Z
    53fe:	80 80       	ld	r8, Z
    5400:	7f 7f       	andi	r23, 0xFF	; 255
    5402:	7f 7f       	andi	r23, 0xFF	; 255
    5404:	7f 7f       	andi	r23, 0xFF	; 255
    5406:	7f 7f       	andi	r23, 0xFF	; 255
    5408:	7f 7f       	andi	r23, 0xFF	; 255
    540a:	7f 7f       	andi	r23, 0xFF	; 255
    540c:	7f 7f       	andi	r23, 0xFF	; 255
    540e:	7f 7f       	andi	r23, 0xFF	; 255
    5410:	7f 7f       	andi	r23, 0xFF	; 255
    5412:	7f 7f       	andi	r23, 0xFF	; 255
    5414:	7f 7f       	andi	r23, 0xFF	; 255
    5416:	7f 7f       	andi	r23, 0xFF	; 255
    5418:	7f 7f       	andi	r23, 0xFF	; 255
    541a:	7f 7f       	andi	r23, 0xFF	; 255
    541c:	7f 7f       	andi	r23, 0xFF	; 255
    541e:	7f 7f       	andi	r23, 0xFF	; 255
    5420:	7f 7f       	andi	r23, 0xFF	; 255
    5422:	7f 7f       	andi	r23, 0xFF	; 255
    5424:	7f 7f       	andi	r23, 0xFF	; 255
    5426:	7f 7f       	andi	r23, 0xFF	; 255
    5428:	7f 7f       	andi	r23, 0xFF	; 255
    542a:	7f 7f       	andi	r23, 0xFF	; 255
    542c:	7f 7f       	andi	r23, 0xFF	; 255
    542e:	7f 7f       	andi	r23, 0xFF	; 255
    5430:	7f 7f       	andi	r23, 0xFF	; 255
    5432:	7f 7f       	andi	r23, 0xFF	; 255
    5434:	7f 7f       	andi	r23, 0xFF	; 255
    5436:	7f 7f       	andi	r23, 0xFF	; 255
    5438:	7f 7f       	andi	r23, 0xFF	; 255
    543a:	7f 7f       	andi	r23, 0xFF	; 255
    543c:	7f 7f       	andi	r23, 0xFF	; 255
    543e:	7f 7f       	andi	r23, 0xFF	; 255
    5440:	7f 7f       	andi	r23, 0xFF	; 255
    5442:	7f 7f       	andi	r23, 0xFF	; 255
    5444:	7f 7f       	andi	r23, 0xFF	; 255
    5446:	7f 7f       	andi	r23, 0xFF	; 255
    5448:	7f 7f       	andi	r23, 0xFF	; 255
    544a:	7f 7f       	andi	r23, 0xFF	; 255
    544c:	7f 7f       	andi	r23, 0xFF	; 255
    544e:	7f 7f       	andi	r23, 0xFF	; 255
    5450:	7f 7f       	andi	r23, 0xFF	; 255
    5452:	7f 7f       	andi	r23, 0xFF	; 255
    5454:	7f 7f       	andi	r23, 0xFF	; 255
    5456:	7f 7f       	andi	r23, 0xFF	; 255
    5458:	7f 7f       	andi	r23, 0xFF	; 255
    545a:	7f 7f       	andi	r23, 0xFF	; 255
    545c:	7f 7f       	andi	r23, 0xFF	; 255
    545e:	7f 7f       	andi	r23, 0xFF	; 255
    5460:	7f 7f       	andi	r23, 0xFF	; 255
    5462:	7f 7f       	andi	r23, 0xFF	; 255
    5464:	7f 7f       	andi	r23, 0xFF	; 255
    5466:	7f 7f       	andi	r23, 0xFF	; 255
    5468:	7f 7f       	andi	r23, 0xFF	; 255
    546a:	7f 7f       	andi	r23, 0xFF	; 255
    546c:	7f 7f       	andi	r23, 0xFF	; 255
    546e:	7f 7f       	andi	r23, 0xFF	; 255
    5470:	7f 7f       	andi	r23, 0xFF	; 255
    5472:	7f 7f       	andi	r23, 0xFF	; 255
    5474:	7f 7f       	andi	r23, 0xFF	; 255
    5476:	7f 7f       	andi	r23, 0xFF	; 255
    5478:	7f 7f       	andi	r23, 0xFF	; 255
    547a:	7f 7f       	andi	r23, 0xFF	; 255
    547c:	7f 7f       	andi	r23, 0xFF	; 255
    547e:	7f 7f       	andi	r23, 0xFF	; 255
    5480:	7f 7f       	andi	r23, 0xFF	; 255
    5482:	7f 7f       	andi	r23, 0xFF	; 255
    5484:	7f 7f       	andi	r23, 0xFF	; 255
    5486:	7f 7f       	andi	r23, 0xFF	; 255
    5488:	7f 7f       	andi	r23, 0xFF	; 255
    548a:	7f 7f       	andi	r23, 0xFF	; 255
    548c:	7f 7f       	andi	r23, 0xFF	; 255
    548e:	7f 7f       	andi	r23, 0xFF	; 255
    5490:	7f 7f       	andi	r23, 0xFF	; 255
    5492:	7f 7f       	andi	r23, 0xFF	; 255
    5494:	7f 7f       	andi	r23, 0xFF	; 255
    5496:	7f 7f       	andi	r23, 0xFF	; 255
    5498:	7f 7f       	andi	r23, 0xFF	; 255
    549a:	7f 7f       	andi	r23, 0xFF	; 255
    549c:	7f 7f       	andi	r23, 0xFF	; 255
    549e:	7f 7f       	andi	r23, 0xFF	; 255
    54a0:	7f 7f       	andi	r23, 0xFF	; 255
    54a2:	7f 7f       	andi	r23, 0xFF	; 255
    54a4:	7f 7f       	andi	r23, 0xFF	; 255
    54a6:	7f 7f       	andi	r23, 0xFF	; 255
    54a8:	7f 7f       	andi	r23, 0xFF	; 255
    54aa:	7f 7f       	andi	r23, 0xFF	; 255
    54ac:	7f 7f       	andi	r23, 0xFF	; 255
    54ae:	7f 7f       	andi	r23, 0xFF	; 255
    54b0:	7f 7f       	andi	r23, 0xFF	; 255
    54b2:	7f 7f       	andi	r23, 0xFF	; 255
    54b4:	7f 7f       	andi	r23, 0xFF	; 255
    54b6:	7f 7f       	andi	r23, 0xFF	; 255
    54b8:	7f 7f       	andi	r23, 0xFF	; 255
    54ba:	7f 7f       	andi	r23, 0xFF	; 255
    54bc:	7f 7f       	andi	r23, 0xFF	; 255
    54be:	7f 7f       	andi	r23, 0xFF	; 255
    54c0:	80 80       	ld	r8, Z
    54c2:	80 80       	ld	r8, Z
    54c4:	80 80       	ld	r8, Z
    54c6:	80 80       	ld	r8, Z
    54c8:	80 80       	ld	r8, Z
    54ca:	80 80       	ld	r8, Z
    54cc:	80 80       	ld	r8, Z
    54ce:	80 80       	ld	r8, Z
    54d0:	80 80       	ld	r8, Z
    54d2:	80 80       	ld	r8, Z
    54d4:	80 80       	ld	r8, Z
    54d6:	80 80       	ld	r8, Z
    54d8:	80 80       	ld	r8, Z
    54da:	80 80       	ld	r8, Z
    54dc:	80 80       	ld	r8, Z
    54de:	80 80       	ld	r8, Z
    54e0:	80 80       	ld	r8, Z
    54e2:	80 80       	ld	r8, Z
    54e4:	80 80       	ld	r8, Z
    54e6:	80 80       	ld	r8, Z
    54e8:	80 80       	ld	r8, Z
    54ea:	80 80       	ld	r8, Z
    54ec:	80 80       	ld	r8, Z
    54ee:	80 80       	ld	r8, Z
    54f0:	80 80       	ld	r8, Z
    54f2:	80 80       	ld	r8, Z
    54f4:	80 80       	ld	r8, Z
    54f6:	80 80       	ld	r8, Z
    54f8:	80 80       	ld	r8, Z
    54fa:	80 80       	ld	r8, Z
    54fc:	80 80       	ld	r8, Z
    54fe:	80 80       	ld	r8, Z
    5500:	03 09       	sbc	r16, r3
    5502:	13 1e       	adc	r1, r19
    5504:	28 31       	cpi	r18, 0x18	; 24
    5506:	3a 40       	sbci	r19, 0x0A	; 10
    5508:	46 4c       	sbci	r20, 0xC6	; 198
    550a:	50 54       	subi	r21, 0x40	; 64
    550c:	58 5b       	subi	r21, 0xB8	; 184
    550e:	5e 61       	ori	r21, 0x1E	; 30
    5510:	63 65       	ori	r22, 0x53	; 83
    5512:	67 69       	ori	r22, 0x97	; 151
    5514:	6b 6c       	ori	r22, 0xCB	; 203
    5516:	6e 6f       	ori	r22, 0xFE	; 254
    5518:	70 71       	andi	r23, 0x10	; 16
    551a:	72 73       	andi	r23, 0x32	; 50
    551c:	74 75       	andi	r23, 0x54	; 84
    551e:	76 77       	andi	r23, 0x76	; 118
    5520:	77 78       	andi	r23, 0x87	; 135
    5522:	79 79       	andi	r23, 0x99	; 153
    5524:	7a 7a       	andi	r23, 0xAA	; 170
    5526:	7b 7b       	andi	r23, 0xBB	; 187
    5528:	7c 7c       	andi	r23, 0xCC	; 204
    552a:	7c 7d       	andi	r23, 0xDC	; 220
    552c:	7d 7d       	andi	r23, 0xDD	; 221
    552e:	7e 7e       	andi	r23, 0xEE	; 238
    5530:	7e 7e       	andi	r23, 0xEE	; 238
    5532:	7f 7f       	andi	r23, 0xFF	; 255
    5534:	7f 7f       	andi	r23, 0xFF	; 255
    5536:	7f 7f       	andi	r23, 0xFF	; 255
    5538:	7f 7f       	andi	r23, 0xFF	; 255
    553a:	7f 7f       	andi	r23, 0xFF	; 255
    553c:	7f 7f       	andi	r23, 0xFF	; 255
    553e:	7f 7f       	andi	r23, 0xFF	; 255
    5540:	7f 7f       	andi	r23, 0xFF	; 255
    5542:	7f 7f       	andi	r23, 0xFF	; 255
    5544:	7f 7f       	andi	r23, 0xFF	; 255
    5546:	7f 7f       	andi	r23, 0xFF	; 255
    5548:	7f 7f       	andi	r23, 0xFF	; 255
    554a:	7f 7f       	andi	r23, 0xFF	; 255
    554c:	7f 7e       	andi	r23, 0xEF	; 239
    554e:	7e 7e       	andi	r23, 0xEE	; 238
    5550:	7e 7d       	andi	r23, 0xDE	; 222
    5552:	7d 7d       	andi	r23, 0xDD	; 221
    5554:	7c 7c       	andi	r23, 0xCC	; 204
    5556:	7c 7b       	andi	r23, 0xBC	; 188
    5558:	7b 7a       	andi	r23, 0xAB	; 171
    555a:	7a 79       	andi	r23, 0x9A	; 154
    555c:	79 78       	andi	r23, 0x89	; 137
    555e:	77 77       	andi	r23, 0x77	; 119
    5560:	76 75       	andi	r23, 0x56	; 86
    5562:	74 73       	andi	r23, 0x34	; 52
    5564:	72 71       	andi	r23, 0x12	; 18
    5566:	70 6f       	ori	r23, 0xF0	; 240
    5568:	6e 6c       	ori	r22, 0xCE	; 206
    556a:	6b 69       	ori	r22, 0x9B	; 155
    556c:	67 65       	ori	r22, 0x57	; 87
    556e:	63 61       	ori	r22, 0x13	; 19
    5570:	5e 5b       	subi	r21, 0xBE	; 190
    5572:	58 54       	subi	r21, 0x48	; 72
    5574:	50 4c       	sbci	r21, 0xC0	; 192
    5576:	46 40       	sbci	r20, 0x06	; 6
    5578:	3a 31       	cpi	r19, 0x1A	; 26
    557a:	28 1e       	adc	r2, r24
    557c:	13 09       	sbc	r17, r3
    557e:	03 00       	.word	0x0003	; ????
    5580:	c6 cc       	rjmp	.-1652   	; 0x4f0e <waves+0xe>
    5582:	d5 db       	rcall	.-2134   	; 0x4d2e <SetMixerNoiseParams>
    5584:	df e3       	ldi	r29, 0x3F	; 63
    5586:	e5 e7       	ldi	r30, 0x75	; 117
    5588:	e9 ea       	ldi	r30, 0xA9	; 169
    558a:	eb ec       	ldi	r30, 0xCB	; 203
    558c:	ed ee       	ldi	r30, 0xED	; 237
    558e:	ef ef       	ldi	r30, 0xFF	; 255
    5590:	f0 f0       	brcs	.+60     	; 0x55ce <waves+0x6ce>
    5592:	f0 f1       	brcs	.+124    	; 0x5610 <waves+0x710>
    5594:	f1 f1       	breq	.+124    	; 0x5612 <waves+0x712>
    5596:	f1 f2       	breq	.-68     	; 0x5554 <waves+0x654>
    5598:	f2 f2       	brmi	.-68     	; 0x5556 <waves+0x656>
    559a:	f2 f2       	brmi	.-68     	; 0x5558 <waves+0x658>
    559c:	f2 f2       	brmi	.-68     	; 0x555a <waves+0x65a>
    559e:	f2 f3       	brmi	.-4      	; 0x559c <waves+0x69c>
    55a0:	f3 f3       	brvs	.-4      	; 0x559e <waves+0x69e>
    55a2:	f3 f3       	brvs	.-4      	; 0x55a0 <waves+0x6a0>
    55a4:	f3 f3       	brvs	.-4      	; 0x55a2 <waves+0x6a2>
    55a6:	f3 f3       	brvs	.-4      	; 0x55a4 <waves+0x6a4>
    55a8:	f3 f3       	brvs	.-4      	; 0x55a6 <waves+0x6a6>
    55aa:	f3 f3       	brvs	.-4      	; 0x55a8 <waves+0x6a8>
    55ac:	f3 f3       	brvs	.-4      	; 0x55aa <waves+0x6aa>
    55ae:	f3 f3       	brvs	.-4      	; 0x55ac <waves+0x6ac>
    55b0:	f3 f3       	brvs	.-4      	; 0x55ae <waves+0x6ae>
    55b2:	f3 f3       	brvs	.-4      	; 0x55b0 <waves+0x6b0>
    55b4:	f3 f3       	brvs	.-4      	; 0x55b2 <waves+0x6b2>
    55b6:	f3 f3       	brvs	.-4      	; 0x55b4 <waves+0x6b4>
    55b8:	f3 f3       	brvs	.-4      	; 0x55b6 <waves+0x6b6>
    55ba:	f3 f3       	brvs	.-4      	; 0x55b8 <waves+0x6b8>
    55bc:	f3 f3       	brvs	.-4      	; 0x55ba <waves+0x6ba>
    55be:	f3 f3       	brvs	.-4      	; 0x55bc <waves+0x6bc>
    55c0:	f3 f3       	brvs	.-4      	; 0x55be <waves+0x6be>
    55c2:	f3 f3       	brvs	.-4      	; 0x55c0 <waves+0x6c0>
    55c4:	f3 f3       	brvs	.-4      	; 0x55c2 <waves+0x6c2>
    55c6:	f3 f3       	brvs	.-4      	; 0x55c4 <waves+0x6c4>
    55c8:	f3 f3       	brvs	.-4      	; 0x55c6 <waves+0x6c6>
    55ca:	f3 f3       	brvs	.-4      	; 0x55c8 <waves+0x6c8>
    55cc:	f3 f3       	brvs	.-4      	; 0x55ca <waves+0x6ca>
    55ce:	f3 f3       	brvs	.-4      	; 0x55cc <waves+0x6cc>
    55d0:	f3 f3       	brvs	.-4      	; 0x55ce <waves+0x6ce>
    55d2:	f3 f3       	brvs	.-4      	; 0x55d0 <waves+0x6d0>
    55d4:	f3 f3       	brvs	.-4      	; 0x55d2 <waves+0x6d2>
    55d6:	f3 f3       	brvs	.-4      	; 0x55d4 <waves+0x6d4>
    55d8:	f3 f3       	brvs	.-4      	; 0x55d6 <waves+0x6d6>
    55da:	f3 f3       	brvs	.-4      	; 0x55d8 <waves+0x6d8>
    55dc:	f3 f3       	brvs	.-4      	; 0x55da <waves+0x6da>
    55de:	f3 f3       	brvs	.-4      	; 0x55dc <waves+0x6dc>
    55e0:	f2 f2       	brmi	.-68     	; 0x559e <waves+0x69e>
    55e2:	f2 f2       	brmi	.-68     	; 0x55a0 <waves+0x6a0>
    55e4:	f2 f2       	brmi	.-68     	; 0x55a2 <waves+0x6a2>
    55e6:	f2 f2       	brmi	.-68     	; 0x55a4 <waves+0x6a4>
    55e8:	f1 f1       	breq	.+124    	; 0x5666 <waves+0x766>
    55ea:	f1 f1       	breq	.+124    	; 0x5668 <waves+0x768>
    55ec:	f0 f0       	brcs	.+60     	; 0x562a <waves+0x72a>
    55ee:	f0 ef       	ldi	r31, 0xF0	; 240
    55f0:	ef ee       	ldi	r30, 0xEF	; 239
    55f2:	ed ec       	ldi	r30, 0xCD	; 205
    55f4:	eb ea       	ldi	r30, 0xAB	; 171
    55f6:	e9 e7       	ldi	r30, 0x79	; 121
    55f8:	e5 e3       	ldi	r30, 0x35	; 53
    55fa:	df db       	rcall	.-2114   	; 0x4dba <MixSound+0x2c>
    55fc:	d5 cc       	rjmp	.-1622   	; 0x4fa8 <waves+0xa8>
    55fe:	c6 00       	.word	0x00c6	; ????
    5600:	00 28       	or	r0, r0
    5602:	3d 42       	sbci	r19, 0x2D	; 45
    5604:	30 2d       	mov	r19, r0
    5606:	2c 2b       	or	r18, r28
    5608:	2c 2d       	mov	r18, r12
    560a:	2e 2f       	mov	r18, r30
    560c:	30 32       	cpi	r19, 0x20	; 32
    560e:	33 35       	cpi	r19, 0x53	; 83
    5610:	37 39       	cpi	r19, 0x97	; 151
    5612:	3b 3d       	cpi	r19, 0xDB	; 219
    5614:	3f 41       	sbci	r19, 0x1F	; 31
    5616:	43 45       	sbci	r20, 0x53	; 83
    5618:	48 4a       	sbci	r20, 0xA8	; 168
    561a:	4c 4e       	sbci	r20, 0xEC	; 236
    561c:	50 53       	subi	r21, 0x30	; 48
    561e:	55 57       	subi	r21, 0x75	; 117
    5620:	59 5b       	subi	r21, 0xB9	; 185
    5622:	5d 5f       	subi	r21, 0xFD	; 253
    5624:	61 63       	ori	r22, 0x31	; 49
    5626:	65 67       	ori	r22, 0x75	; 117
    5628:	69 6b       	ori	r22, 0xB9	; 185
    562a:	6c 6e       	ori	r22, 0xEC	; 236
    562c:	70 71       	andi	r23, 0x10	; 16
    562e:	73 74       	andi	r23, 0x43	; 67
    5630:	75 77       	andi	r23, 0x75	; 117
    5632:	78 79       	andi	r23, 0x98	; 152
    5634:	7a 7b       	andi	r23, 0xBA	; 186
    5636:	7c 7d       	andi	r23, 0xDC	; 220
    5638:	7d 7e       	andi	r23, 0xED	; 237
    563a:	7e 7f       	andi	r23, 0xFE	; 254
    563c:	7f 7f       	andi	r23, 0xFF	; 255
    563e:	7f 7f       	andi	r23, 0xFF	; 255
    5640:	7f 7f       	andi	r23, 0xFF	; 255
    5642:	7f 7f       	andi	r23, 0xFF	; 255
    5644:	7f 7f       	andi	r23, 0xFF	; 255
    5646:	7e 7e       	andi	r23, 0xEE	; 238
    5648:	7d 7d       	andi	r23, 0xDD	; 221
    564a:	7c 7b       	andi	r23, 0xBC	; 188
    564c:	7a 79       	andi	r23, 0x9A	; 154
    564e:	78 77       	andi	r23, 0x78	; 120
    5650:	75 74       	andi	r23, 0x45	; 69
    5652:	73 71       	andi	r23, 0x13	; 19
    5654:	70 6e       	ori	r23, 0xE0	; 224
    5656:	6c 6b       	ori	r22, 0xBC	; 188
    5658:	69 67       	ori	r22, 0x79	; 121
    565a:	65 63       	ori	r22, 0x35	; 53
    565c:	61 5f       	subi	r22, 0xF1	; 241
    565e:	5d 5b       	subi	r21, 0xBD	; 189
    5660:	59 57       	subi	r21, 0x79	; 121
    5662:	55 53       	subi	r21, 0x35	; 53
    5664:	50 4e       	sbci	r21, 0xE0	; 224
    5666:	4c 4a       	sbci	r20, 0xAC	; 172
    5668:	48 45       	sbci	r20, 0x58	; 88
    566a:	43 41       	sbci	r20, 0x13	; 19
    566c:	3f 3d       	cpi	r19, 0xDF	; 223
    566e:	3b 39       	cpi	r19, 0x9B	; 155
    5670:	37 35       	cpi	r19, 0x57	; 87
    5672:	33 32       	cpi	r19, 0x23	; 35
    5674:	30 2f       	mov	r19, r16
    5676:	2e 2d       	mov	r18, r14
    5678:	2c 2b       	or	r18, r28
    567a:	2c 2d       	mov	r18, r12
    567c:	30 42       	sbci	r19, 0x20	; 32
    567e:	3d 28       	or	r3, r13
    5680:	00 e9       	ldi	r16, 0x90	; 144
    5682:	e5 fe       	sbrs	r14, 5
    5684:	d4 d7       	rcall	.+4008   	; 0x662e <mmc_mixerStart+0x28>
    5686:	d7 d7       	rcall	.+4014   	; 0x6636 <mmc_mixerStart+0x30>
    5688:	d6 d4       	rcall	.+2476   	; 0x6036 <DrawMap2+0x3a>
    568a:	d2 d0       	rcall	.+420    	; 0x5830 <waves+0x930>
    568c:	ce cc       	rjmp	.-1636   	; 0x502a <waves+0x12a>
    568e:	ca c8       	rjmp	.-3692   	; 0x4824 <__vector_13+0x4>
    5690:	c6 c3       	rjmp	.+1932   	; 0x5e1e <processMouseMovement+0x13a>
    5692:	c1 bf       	out	0x31, r28	; 49
    5694:	bd ba       	out	0x1d, r11	; 29
    5696:	b8 b6       	in	r11, 0x38	; 56
    5698:	b4 b1       	in	r27, 0x04	; 4
    569a:	af ad       	ldd	r26, Y+63	; 0x3f
    569c:	ab a9       	ldd	r26, Y+51	; 0x33
    569e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    56a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    56a2:	9f 9e       	mul	r9, r31
    56a4:	9c 9a       	sbi	0x13, 4	; 19
    56a6:	99 97       	sbiw	r26, 0x29	; 41
    56a8:	95 94       	asr	r9
    56aa:	93 91       	.word	0x9193	; ????
    56ac:	90 8f       	std	Z+24, r25	; 0x18
    56ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    56b0:	8b 8a       	std	Y+19, r8	; 0x13
    56b2:	89 88       	ldd	r8, Y+17	; 0x11
    56b4:	88 87       	std	Y+8, r24	; 0x08
    56b6:	86 85       	ldd	r24, Z+14	; 0x0e
    56b8:	85 84       	ldd	r8, Z+13	; 0x0d
    56ba:	84 84       	ldd	r8, Z+12	; 0x0c
    56bc:	83 83       	std	Z+3, r24	; 0x03
    56be:	83 83       	std	Z+3, r24	; 0x03
    56c0:	83 83       	std	Z+3, r24	; 0x03
    56c2:	83 83       	std	Z+3, r24	; 0x03
    56c4:	83 84       	ldd	r8, Z+11	; 0x0b
    56c6:	84 84       	ldd	r8, Z+12	; 0x0c
    56c8:	85 85       	ldd	r24, Z+13	; 0x0d
    56ca:	86 87       	std	Z+14, r24	; 0x0e
    56cc:	88 88       	ldd	r8, Y+16	; 0x10
    56ce:	89 8a       	std	Y+17, r8	; 0x11
    56d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    56d2:	8d 8f       	std	Y+29, r24	; 0x1d
    56d4:	90 91 93 94 	lds	r25, 0x9493
    56d8:	95 97       	sbiw	r26, 0x25	; 37
    56da:	99 9a       	sbi	0x13, 1	; 19
    56dc:	9c 9e       	mul	r9, r28
    56de:	9f a1       	ldd	r25, Y+39	; 0x27
    56e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    56e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    56e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    56e6:	af b1       	in	r26, 0x0f	; 15
    56e8:	b4 b6       	in	r11, 0x34	; 52
    56ea:	b8 ba       	out	0x18, r11	; 24
    56ec:	bd bf       	out	0x3d, r27	; 61
    56ee:	c1 c3       	rjmp	.+1922   	; 0x5e72 <ReadButtons+0x30>
    56f0:	c6 c8       	rjmp	.-3700   	; 0x487e <sync+0x20>
    56f2:	ca cc       	rjmp	.-1644   	; 0x5088 <waves+0x188>
    56f4:	ce d0       	rcall	.+412    	; 0x5892 <waves+0x992>
    56f6:	d2 d4       	rcall	.+2468   	; 0x609c <MapSprite+0x44>
    56f8:	d6 d7       	rcall	.+4012   	; 0x66a6 <mmc_init+0x1e>
    56fa:	d7 d7       	rcall	.+4014   	; 0x66aa <mmc_init+0x22>
    56fc:	d4 fe       	sbrs	r13, 4
    56fe:	e5 e9       	ldi	r30, 0x95	; 149
    5700:	f9 f8       	.word	0xf8f9	; ????
    5702:	f9 f5       	brne	.+126    	; 0x5782 <waves+0x882>
    5704:	eb e1       	ldi	r30, 0x1B	; 27
    5706:	dd de       	rcall	.-582    	; 0x54c2 <waves+0x5c2>
    5708:	e0 e2       	ldi	r30, 0x20	; 32
    570a:	e4 e5       	ldi	r30, 0x54	; 84
    570c:	e6 e5       	ldi	r30, 0x56	; 86
    570e:	e4 e2       	ldi	r30, 0x24	; 36
    5710:	de d9       	rcall	.-3140   	; 0x4ace <CopyTileToRam+0x7c>
    5712:	d2 ca       	rjmp	.-2652   	; 0x4cb8 <internal_spi_byte+0x58>
    5714:	c1 b7       	in	r28, 0x31	; 49
    5716:	ac a2       	std	Y+36, r10	; 0x24
    5718:	99 91       	ld	r25, Y+
    571a:	8a 86       	std	Y+10, r8	; 0x0a
    571c:	83 81       	ldd	r24, Z+3	; 0x03
    571e:	80 80       	ld	r8, Z
    5720:	81 82       	std	Z+1, r8	; 0x01
    5722:	83 85       	ldd	r24, Z+11	; 0x0b
    5724:	86 88       	ldd	r8, Z+22	; 0x16
    5726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    5728:	8d 8f       	std	Y+29, r24	; 0x1d
    572a:	90 92 93 95 	sts	0x9593, r9
    572e:	96 97       	sbiw	r26, 0x26	; 38
    5730:	98 99       	sbic	0x13, 0	; 19
    5732:	9a 9b       	sbis	0x13, 2	; 19
    5734:	9b 9c       	mul	r9, r11
    5736:	9d 9d       	mul	r25, r13
    5738:	9d 9e       	mul	r9, r29
    573a:	9e 9e       	mul	r9, r30
    573c:	9f 9f       	mul	r25, r31
    573e:	9f 9f       	mul	r25, r31
    5740:	9f 9f       	mul	r25, r31
    5742:	9f 9e       	mul	r9, r31
    5744:	9e 9e       	mul	r9, r30
    5746:	9d 9d       	mul	r25, r13
    5748:	9d 9c       	mul	r9, r13
    574a:	9b 9b       	sbis	0x13, 3	; 19
    574c:	9a 99       	sbic	0x13, 2	; 19
    574e:	98 97       	sbiw	r26, 0x28	; 40
    5750:	96 95       	lsr	r25
    5752:	93 92       	.word	0x9293	; ????
    5754:	90 8f       	std	Z+24, r25	; 0x18
    5756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    5758:	8a 88       	ldd	r8, Y+18	; 0x12
    575a:	86 85       	ldd	r24, Z+14	; 0x0e
    575c:	83 82       	std	Z+3, r8	; 0x03
    575e:	81 80       	ldd	r8, Z+1	; 0x01
    5760:	80 81       	ld	r24, Z
    5762:	83 86       	std	Z+11, r8	; 0x0b
    5764:	8a 91       	ld	r24, -Y
    5766:	99 a2       	std	Y+33, r9	; 0x21
    5768:	ac b7       	in	r26, 0x3c	; 60
    576a:	c1 ca       	rjmp	.-2686   	; 0x4cee <internal_spi_byte+0x8e>
    576c:	d2 d9       	rcall	.-3164   	; 0x4b12 <CopyTileToRam+0xc0>
    576e:	de e2       	ldi	r29, 0x2E	; 46
    5770:	e4 e5       	ldi	r30, 0x54	; 84
    5772:	e6 e5       	ldi	r30, 0x56	; 86
    5774:	e4 e2       	ldi	r30, 0x24	; 36
    5776:	e0 de       	rcall	.-576    	; 0x5538 <waves+0x638>
    5778:	dd e1       	ldi	r29, 0x1D	; 29
    577a:	eb f5       	brvc	.+122    	; 0x57f6 <waves+0x8f6>
    577c:	f9 f8       	.word	0xf8f9	; ????
    577e:	f9 00       	.word	0x00f9	; ????
    5780:	07 08       	sbc	r0, r7
    5782:	07 0b       	sbc	r16, r23
    5784:	15 1f       	adc	r17, r21
    5786:	23 22       	and	r2, r19
    5788:	20 1e       	adc	r2, r16
    578a:	1c 1b       	sub	r17, r28
    578c:	1a 1b       	sub	r17, r26
    578e:	1c 1e       	adc	r1, r28
    5790:	22 27       	eor	r18, r18
    5792:	2e 36       	cpi	r18, 0x6E	; 110
    5794:	3f 49       	sbci	r19, 0x9F	; 159
    5796:	54 5e       	subi	r21, 0xE4	; 228
    5798:	67 6f       	ori	r22, 0xF7	; 247
    579a:	76 7a       	andi	r23, 0xA6	; 166
    579c:	7e 7f       	andi	r23, 0xFE	; 254
    579e:	7f 7f       	andi	r23, 0xFF	; 255
    57a0:	7f 7e       	andi	r23, 0xEF	; 239
    57a2:	7d 7b       	andi	r23, 0xBD	; 189
    57a4:	7a 78       	andi	r23, 0x8A	; 138
    57a6:	76 74       	andi	r23, 0x46	; 70
    57a8:	73 71       	andi	r23, 0x13	; 19
    57aa:	70 6e       	ori	r23, 0xE0	; 224
    57ac:	6d 6b       	ori	r22, 0xBD	; 189
    57ae:	6a 69       	ori	r22, 0x9A	; 154
    57b0:	68 67       	ori	r22, 0x78	; 120
    57b2:	66 65       	ori	r22, 0x56	; 86
    57b4:	65 64       	ori	r22, 0x45	; 69
    57b6:	64 63       	ori	r22, 0x34	; 52
    57b8:	63 62       	ori	r22, 0x23	; 35
    57ba:	62 62       	ori	r22, 0x22	; 34
    57bc:	61 61       	ori	r22, 0x11	; 17
    57be:	61 61       	ori	r22, 0x11	; 17
    57c0:	61 61       	ori	r22, 0x11	; 17
    57c2:	61 62       	ori	r22, 0x21	; 33
    57c4:	62 62       	ori	r22, 0x22	; 34
    57c6:	63 63       	ori	r22, 0x33	; 51
    57c8:	63 64       	ori	r22, 0x43	; 67
    57ca:	65 65       	ori	r22, 0x55	; 85
    57cc:	66 67       	ori	r22, 0x76	; 118
    57ce:	68 69       	ori	r22, 0x98	; 152
    57d0:	6a 6b       	ori	r22, 0xBA	; 186
    57d2:	6d 6e       	ori	r22, 0xED	; 237
    57d4:	70 71       	andi	r23, 0x10	; 16
    57d6:	73 74       	andi	r23, 0x43	; 67
    57d8:	76 78       	andi	r23, 0x86	; 134
    57da:	7a 7b       	andi	r23, 0xBA	; 186
    57dc:	7d 7e       	andi	r23, 0xED	; 237
    57de:	7f 7f       	andi	r23, 0xFF	; 255
    57e0:	7f 7f       	andi	r23, 0xFF	; 255
    57e2:	7e 7a       	andi	r23, 0xAE	; 174
    57e4:	76 6f       	ori	r23, 0xF6	; 246
    57e6:	67 5e       	subi	r22, 0xE7	; 231
    57e8:	54 49       	sbci	r21, 0x94	; 148
    57ea:	3f 36       	cpi	r19, 0x6F	; 111
    57ec:	2e 27       	eor	r18, r30
    57ee:	22 1e       	adc	r2, r18
    57f0:	1c 1b       	sub	r17, r28
    57f2:	1a 1b       	sub	r17, r26
    57f4:	1c 1e       	adc	r1, r28
    57f6:	20 22       	and	r2, r16
    57f8:	23 1f       	adc	r18, r19
    57fa:	15 0b       	sbc	r17, r21
    57fc:	07 08       	sbc	r0, r7
    57fe:	07 00       	.word	0x0007	; ????
    5800:	1f 31       	cpi	r17, 0x1F	; 31
    5802:	3d 44       	sbci	r19, 0x4D	; 77
    5804:	4e 53       	subi	r20, 0x3E	; 62
    5806:	54 56       	subi	r21, 0x64	; 100
    5808:	5a 5f       	subi	r21, 0xFA	; 250
    580a:	64 69       	ori	r22, 0x94	; 148
    580c:	6e 74       	andi	r22, 0x4E	; 78
    580e:	76 79       	andi	r23, 0x96	; 150
    5810:	7c 7f       	andi	r23, 0xFC	; 252
    5812:	7f 7f       	andi	r23, 0xFF	; 255
    5814:	7f 7f       	andi	r23, 0xFF	; 255
    5816:	7f 7f       	andi	r23, 0xFF	; 255
    5818:	7f 7f       	andi	r23, 0xFF	; 255
    581a:	7f 7f       	andi	r23, 0xFF	; 255
    581c:	7f 7f       	andi	r23, 0xFF	; 255
    581e:	7f 7f       	andi	r23, 0xFF	; 255
    5820:	7f 7f       	andi	r23, 0xFF	; 255
    5822:	7f 7f       	andi	r23, 0xFF	; 255
    5824:	7f 7f       	andi	r23, 0xFF	; 255
    5826:	7f 7f       	andi	r23, 0xFF	; 255
    5828:	7f 7f       	andi	r23, 0xFF	; 255
    582a:	7f 7f       	andi	r23, 0xFF	; 255
    582c:	7f 7f       	andi	r23, 0xFF	; 255
    582e:	7f 7f       	andi	r23, 0xFF	; 255
    5830:	7f 7f       	andi	r23, 0xFF	; 255
    5832:	7f 7f       	andi	r23, 0xFF	; 255
    5834:	7f 7f       	andi	r23, 0xFF	; 255
    5836:	7f 7f       	andi	r23, 0xFF	; 255
    5838:	7f 7f       	andi	r23, 0xFF	; 255
    583a:	7f 7f       	andi	r23, 0xFF	; 255
    583c:	7f 7f       	andi	r23, 0xFF	; 255
    583e:	7f 7f       	andi	r23, 0xFF	; 255
    5840:	7f 7f       	andi	r23, 0xFF	; 255
    5842:	7f 7f       	andi	r23, 0xFF	; 255
    5844:	7f 7f       	andi	r23, 0xFF	; 255
    5846:	7f 7f       	andi	r23, 0xFF	; 255
    5848:	7f 7f       	andi	r23, 0xFF	; 255
    584a:	7f 7f       	andi	r23, 0xFF	; 255
    584c:	7f 7f       	andi	r23, 0xFF	; 255
    584e:	7f 7f       	andi	r23, 0xFF	; 255
    5850:	7f 7f       	andi	r23, 0xFF	; 255
    5852:	7f 7f       	andi	r23, 0xFF	; 255
    5854:	7f 7f       	andi	r23, 0xFF	; 255
    5856:	7f 7f       	andi	r23, 0xFF	; 255
    5858:	7f 7f       	andi	r23, 0xFF	; 255
    585a:	7f 7f       	andi	r23, 0xFF	; 255
    585c:	7f 7f       	andi	r23, 0xFF	; 255
    585e:	7f 7f       	andi	r23, 0xFF	; 255
    5860:	7f 7f       	andi	r23, 0xFF	; 255
    5862:	7f 7f       	andi	r23, 0xFF	; 255
    5864:	7f 7f       	andi	r23, 0xFF	; 255
    5866:	7f 7f       	andi	r23, 0xFF	; 255
    5868:	7f 7f       	andi	r23, 0xFF	; 255
    586a:	7f 7f       	andi	r23, 0xFF	; 255
    586c:	7f 7f       	andi	r23, 0xFF	; 255
    586e:	7f 7f       	andi	r23, 0xFF	; 255
    5870:	7f 7f       	andi	r23, 0xFF	; 255
    5872:	7f 7f       	andi	r23, 0xFF	; 255
    5874:	7f 7f       	andi	r23, 0xFF	; 255
    5876:	7f 7f       	andi	r23, 0xFF	; 255
    5878:	7f 7f       	andi	r23, 0xFF	; 255
    587a:	7f 7c       	andi	r23, 0xCF	; 207
    587c:	78 71       	andi	r23, 0x18	; 24
    587e:	68 4c       	sbci	r22, 0xC8	; 200
    5880:	2c 1c       	adc	r2, r12
    5882:	12 0c       	add	r1, r2
    5884:	0a 0b       	sbc	r16, r26
    5886:	0a 05       	cpc	r16, r10
    5888:	fd f3       	brhs	.-2      	; 0x5888 <waves+0x988>
    588a:	e9 df       	rcall	.-46     	; 0x585e <waves+0x95e>
    588c:	d4 ca       	rjmp	.-2648   	; 0x4e36 <end_set_bank+0x46>
    588e:	c0 b7       	in	r28, 0x30	; 48
    5890:	ae a6       	std	Y+46, r10	; 0x2e
    5892:	9e 97       	sbiw	r26, 0x2e	; 46
    5894:	91 8b       	std	Z+17, r25	; 0x11
    5896:	86 85       	ldd	r24, Z+14	; 0x0e
    5898:	82 80       	ldd	r8, Z+2	; 0x02
    589a:	80 80       	ld	r8, Z
    589c:	80 80       	ld	r8, Z
    589e:	80 80       	ld	r8, Z
    58a0:	80 80       	ld	r8, Z
    58a2:	80 80       	ld	r8, Z
    58a4:	80 80       	ld	r8, Z
    58a6:	80 80       	ld	r8, Z
    58a8:	80 80       	ld	r8, Z
    58aa:	80 80       	ld	r8, Z
    58ac:	80 80       	ld	r8, Z
    58ae:	80 80       	ld	r8, Z
    58b0:	80 80       	ld	r8, Z
    58b2:	80 80       	ld	r8, Z
    58b4:	80 80       	ld	r8, Z
    58b6:	80 80       	ld	r8, Z
    58b8:	80 80       	ld	r8, Z
    58ba:	80 80       	ld	r8, Z
    58bc:	80 80       	ld	r8, Z
    58be:	80 80       	ld	r8, Z
    58c0:	80 80       	ld	r8, Z
    58c2:	80 80       	ld	r8, Z
    58c4:	80 80       	ld	r8, Z
    58c6:	80 80       	ld	r8, Z
    58c8:	80 80       	ld	r8, Z
    58ca:	80 80       	ld	r8, Z
    58cc:	80 80       	ld	r8, Z
    58ce:	80 80       	ld	r8, Z
    58d0:	80 80       	ld	r8, Z
    58d2:	80 80       	ld	r8, Z
    58d4:	80 80       	ld	r8, Z
    58d6:	80 80       	ld	r8, Z
    58d8:	80 80       	ld	r8, Z
    58da:	80 80       	ld	r8, Z
    58dc:	80 80       	ld	r8, Z
    58de:	80 80       	ld	r8, Z
    58e0:	80 80       	ld	r8, Z
    58e2:	80 80       	ld	r8, Z
    58e4:	80 80       	ld	r8, Z
    58e6:	80 80       	ld	r8, Z
    58e8:	80 80       	ld	r8, Z
    58ea:	80 80       	ld	r8, Z
    58ec:	80 80       	ld	r8, Z
    58ee:	80 80       	ld	r8, Z
    58f0:	80 80       	ld	r8, Z
    58f2:	80 80       	ld	r8, Z
    58f4:	80 87       	std	Z+8, r24	; 0x08
    58f6:	91 9d       	mul	r25, r1
    58f8:	ac c4       	rjmp	.+2392   	; 0x6252 <PrintHexLong+0x38>
    58fa:	cb d4       	rcall	.+2454   	; 0x6292 <ProcessSprites+0x1a>
    58fc:	dd f2       	brhs	.-74     	; 0x58b4 <waves+0x9b4>
    58fe:	fa fa       	.word	0xfafa	; ????

00005900 <steptable>:
    5900:	22 00       	.word	0x0022	; ????
    5902:	24 00       	.word	0x0024	; ????
    5904:	26 00       	.word	0x0026	; ????
    5906:	28 00       	.word	0x0028	; ????
    5908:	2b 00       	.word	0x002b	; ????
    590a:	2d 00       	.word	0x002d	; ????
    590c:	30 00       	.word	0x0030	; ????
    590e:	33 00       	.word	0x0033	; ????
    5910:	36 00       	.word	0x0036	; ????
    5912:	39 00       	.word	0x0039	; ????
    5914:	3d 00       	.word	0x003d	; ????
    5916:	40 00       	.word	0x0040	; ????
    5918:	44 00       	.word	0x0044	; ????
    591a:	48 00       	.word	0x0048	; ????
    591c:	4c 00       	.word	0x004c	; ????
    591e:	51 00       	.word	0x0051	; ????
    5920:	56 00       	.word	0x0056	; ????
    5922:	5b 00       	.word	0x005b	; ????
    5924:	60 00       	.word	0x0060	; ????
    5926:	66 00       	.word	0x0066	; ????
    5928:	6c 00       	.word	0x006c	; ????
    592a:	73 00       	.word	0x0073	; ????
    592c:	79 00       	.word	0x0079	; ????
    592e:	81 00       	.word	0x0081	; ????
    5930:	88 00       	.word	0x0088	; ????
    5932:	90 00       	.word	0x0090	; ????
    5934:	99 00       	.word	0x0099	; ????
    5936:	a2 00       	.word	0x00a2	; ????
    5938:	ac 00       	.word	0x00ac	; ????
    593a:	b6 00       	.word	0x00b6	; ????
    593c:	c1 00       	.word	0x00c1	; ????
    593e:	cc 00       	.word	0x00cc	; ????
    5940:	d8 00       	.word	0x00d8	; ????
    5942:	e5 00       	.word	0x00e5	; ????
    5944:	f3 00       	.word	0x00f3	; ????
    5946:	01 01       	movw	r0, r2
    5948:	10 01       	movw	r2, r0
    594a:	21 01       	movw	r4, r2
    594c:	32 01       	movw	r6, r4
    594e:	44 01       	movw	r8, r8
    5950:	57 01       	movw	r10, r14
    5952:	6c 01       	movw	r12, r24
    5954:	81 01       	movw	r16, r2
    5956:	98 01       	movw	r18, r16
    5958:	b0 01       	movw	r22, r0
    595a:	ca 01       	movw	r24, r20
    595c:	e5 01       	movw	r28, r10
    595e:	02 02       	muls	r16, r18
    5960:	21 02       	muls	r18, r17
    5962:	41 02       	muls	r20, r17
    5964:	64 02       	muls	r22, r20
    5966:	88 02       	muls	r24, r24
    5968:	ae 02       	muls	r26, r30
    596a:	d7 02       	muls	r29, r23
    596c:	03 03       	mulsu	r16, r19
    596e:	30 03       	mulsu	r19, r16
    5970:	61 03       	mulsu	r22, r17
    5972:	94 03       	fmuls	r17, r20
    5974:	cb 03       	fmulsu	r20, r19
    5976:	05 04       	cpc	r0, r5
    5978:	42 04       	cpc	r4, r2
    597a:	83 04       	cpc	r8, r3
    597c:	c7 04       	cpc	r12, r7
    597e:	10 05       	cpc	r17, r0
    5980:	5d 05       	cpc	r21, r13
    5982:	af 05       	cpc	r26, r15
    5984:	05 06       	cpc	r0, r21
    5986:	61 06       	cpc	r6, r17
    5988:	c2 06       	cpc	r12, r18
    598a:	29 07       	cpc	r18, r25
    598c:	96 07       	cpc	r25, r22
    598e:	09 08       	sbc	r0, r9
    5990:	83 08       	sbc	r8, r3
    5992:	05 09       	sbc	r16, r5
    5994:	8e 09       	sbc	r24, r14
    5996:	20 0a       	sbc	r2, r16
    5998:	ba 0a       	sbc	r11, r26
    599a:	5d 0b       	sbc	r21, r29
    599c:	0a 0c       	add	r0, r10
    599e:	c1 0c       	add	r12, r1
    59a0:	84 0d       	add	r24, r4
    59a2:	51 0e       	add	r5, r17
    59a4:	2b 0f       	add	r18, r27
    59a6:	12 10       	cpse	r1, r2
    59a8:	07 11       	cpse	r16, r7
    59aa:	0a 12       	cpse	r0, r26
    59ac:	1d 13       	cpse	r17, r29
    59ae:	40 14       	cp	r4, r0
    59b0:	74 15       	cp	r23, r4
    59b2:	ba 16       	cp	r11, r26
    59b4:	14 18       	sub	r1, r4
    59b6:	83 19       	sub	r24, r3
    59b8:	07 1b       	sub	r16, r23
    59ba:	a3 1c       	adc	r10, r3
    59bc:	57 1e       	adc	r5, r23
    59be:	24 20       	and	r2, r4
    59c0:	0e 22       	and	r0, r30
    59c2:	14 24       	eor	r1, r4
    59c4:	39 26       	eor	r3, r25
    59c6:	7f 28       	or	r7, r15
    59c8:	e8 2a       	or	r14, r24
    59ca:	75 2d       	mov	r23, r5
    59cc:	29 30       	cpi	r18, 0x09	; 9
    59ce:	06 33       	cpi	r16, 0x36	; 54
    59d0:	0f 36       	cpi	r16, 0x6F	; 111
    59d2:	45 39       	cpi	r20, 0x95	; 149
    59d4:	ad 3c       	cpi	r26, 0xCD	; 205
    59d6:	49 40       	sbci	r20, 0x09	; 9
    59d8:	1b 44       	sbci	r17, 0x4B	; 75
    59da:	28 48       	sbci	r18, 0x88	; 136
    59dc:	73 4c       	sbci	r23, 0xC3	; 195
    59de:	fe 50       	subi	r31, 0x0E	; 14
    59e0:	cf 55       	subi	r28, 0x5F	; 95
    59e2:	ea 5a       	subi	r30, 0xAA	; 170
    59e4:	51 60       	ori	r21, 0x01	; 1
    59e6:	0c 66       	ori	r16, 0x6C	; 108
    59e8:	1d 6c       	ori	r17, 0xCD	; 205
    59ea:	8b 72       	andi	r24, 0x2B	; 43
    59ec:	5a 79       	andi	r21, 0x9A	; 154
    59ee:	92 80       	ldd	r9, Z+2	; 0x02
    59f0:	37 88       	ldd	r3, Z+23	; 0x17
    59f2:	50 90 e5 98 	lds	r5, 0x98E5
    59f6:	fd a1       	ldd	r31, Y+37	; 0x25
    59f8:	9f ab       	std	Y+55, r25	; 0x37
    59fa:	d3 b5       	in	r29, 0x23	; 35
    59fc:	a3 c0       	rjmp	.+326    	; 0x5b44 <processButtons+0xf0>
	...

00005a00 <GetMouseX>:
		return -1;
	}

}

unsigned char GetMouseX(){
    5a00:	80 91 23 08 	lds	r24, 0x0823
    5a04:	08 95       	ret

00005a06 <GetMouseY>:
	return mx;
}

unsigned char GetMouseY(){
    5a06:	80 91 25 08 	lds	r24, 0x0825
    5a0a:	08 95       	ret

00005a0c <GetActionButton>:
	return my;
}

unsigned int GetActionButton(){
    5a0c:	80 91 8c 0a 	lds	r24, 0x0A8C
    5a10:	90 91 8d 0a 	lds	r25, 0x0A8D
    5a14:	08 95       	ret

00005a16 <createAreaButton>:
	DrawMap2(x,y,normalMapPtr);

	btnCount++;	
}

void createAreaButton(Button *button, unsigned char x,unsigned char y,unsigned char width,unsigned char height){	
    5a16:	0f 93       	push	r16
    5a18:	fc 01       	movw	r30, r24

	button->x=x;
    5a1a:	61 83       	std	Z+1, r22	; 0x01
	button->y=y;
    5a1c:	42 83       	std	Z+2, r20	; 0x02
	button->width=width;
    5a1e:	23 83       	std	Z+3, r18	; 0x03
	button->height=height;
    5a20:	04 83       	std	Z+4, r16	; 0x04
	button->normalMapPtr=NULL;
    5a22:	16 82       	std	Z+6, r1	; 0x06
    5a24:	15 82       	std	Z+5, r1	; 0x05
	button->pushedMapPtr=NULL;
    5a26:	10 86       	std	Z+8, r1	; 0x08
    5a28:	17 82       	std	Z+7, r1	; 0x07
	button->state=0;
    5a2a:	11 86       	std	Z+9, r1	; 0x09
	button->clicked=false;
    5a2c:	12 86       	std	Z+10, r1	; 0x0a

	btnCount++;	
    5a2e:	80 91 27 08 	lds	r24, 0x0827
    5a32:	8f 5f       	subi	r24, 0xFF	; 255
    5a34:	80 93 27 08 	sts	0x0827, r24
}
    5a38:	0f 91       	pop	r16
    5a3a:	08 95       	ret

00005a3c <registerButtonHandler>:

void registerButtonHandler(ButtonHandler fptr, Button *btns){
    5a3c:	90 93 87 0a 	sts	0x0A87, r25
    5a40:	80 93 86 0a 	sts	0x0A86, r24
	btnHandlerPtr=fptr;
	_buttons=btns;
    5a44:	70 93 85 0a 	sts	0x0A85, r23
    5a48:	60 93 84 0a 	sts	0x0A84, r22
	buttonsHandlerActive=true;
    5a4c:	81 e0       	ldi	r24, 0x01	; 1
    5a4e:	80 93 28 08 	sts	0x0828, r24
}
    5a52:	08 95       	ret

00005a54 <processButtons>:

}


//char debug=0;
void processButtons(){
    5a54:	af 92       	push	r10
    5a56:	bf 92       	push	r11
    5a58:	cf 92       	push	r12
    5a5a:	df 92       	push	r13
    5a5c:	ef 92       	push	r14
    5a5e:	ff 92       	push	r15
    5a60:	0f 93       	push	r16
    5a62:	1f 93       	push	r17
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
	unsigned char i,tx,ty;
	unsigned int joy=ReadJoypad(playPort);
    5a68:	80 91 22 08 	lds	r24, 0x0822
    5a6c:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    5a70:	ec 01       	movw	r28, r24
	static unsigned int lastButtons=0;
	static unsigned char dblClickDelay=0;

	tx=mx>>3;
    5a72:	80 91 23 08 	lds	r24, 0x0823
    5a76:	90 91 24 08 	lds	r25, 0x0824
    5a7a:	43 e0       	ldi	r20, 0x03	; 3
    5a7c:	95 95       	asr	r25
    5a7e:	87 95       	ror	r24
    5a80:	4a 95       	dec	r20
    5a82:	e1 f7       	brne	.-8      	; 0x5a7c <processButtons+0x28>
    5a84:	b8 2e       	mov	r11, r24
	ty=my>>3;
    5a86:	80 91 25 08 	lds	r24, 0x0825
    5a8a:	90 91 26 08 	lds	r25, 0x0826
    5a8e:	33 e0       	ldi	r19, 0x03	; 3
    5a90:	95 95       	asr	r25
    5a92:	87 95       	ror	r24
    5a94:	3a 95       	dec	r19
    5a96:	e1 f7       	brne	.-8      	; 0x5a90 <processButtons+0x3c>
    5a98:	e8 2e       	mov	r14, r24

	for(i=0;i<btnCount;i++){
    5a9a:	a0 90 27 08 	lds	r10, 0x0827

		if(tx>=_buttons[i].x && tx<(_buttons[i].x+_buttons[i].width) && ty>=_buttons[i].y && ty<(_buttons[i].y+_buttons[i].height)){		
		

			if(joy&actionButton && _buttons[i].state==BUTTON_UP){
    5a9e:	40 91 8c 0a 	lds	r20, 0x0A8C
    5aa2:	50 91 8d 0a 	lds	r21, 0x0A8D
    5aa6:	4c 23       	and	r20, r28
    5aa8:	5d 23       	and	r21, r29
				return;
			}			
	


			if(dblClickDelay==DBL_CLICK_DELAY && _buttons[i].clicked==true){
    5aaa:	70 91 29 08 	lds	r23, 0x0829
    5aae:	e0 91 84 0a 	lds	r30, 0x0A84
    5ab2:	f0 91 85 0a 	lds	r31, 0x0A85
    5ab6:	ff 24       	eor	r15, r15
    5ab8:	00 e0       	ldi	r16, 0x00	; 0
    5aba:	10 e0       	ldi	r17, 0x00	; 0
	tx=mx>>3;
	ty=my>>3;

	for(i=0;i<btnCount;i++){

		if(tx>=_buttons[i].x && tx<(_buttons[i].x+_buttons[i].width) && ty>=_buttons[i].y && ty<(_buttons[i].y+_buttons[i].height)){		
    5abc:	cb 2c       	mov	r12, r11
    5abe:	dd 24       	eor	r13, r13
    5ac0:	a8 2f       	mov	r26, r24
    5ac2:	b0 e0       	ldi	r27, 0x00	; 0
    5ac4:	98 c0       	rjmp	.+304    	; 0x5bf6 <processButtons+0x1a2>
    5ac6:	31 81       	ldd	r19, Z+1	; 0x01
    5ac8:	b3 16       	cp	r11, r19
    5aca:	08 f4       	brcc	.+2      	; 0x5ace <processButtons+0x7a>
    5acc:	72 c0       	rjmp	.+228    	; 0x5bb2 <processButtons+0x15e>
    5ace:	23 81       	ldd	r18, Z+3	; 0x03
    5ad0:	83 2f       	mov	r24, r19
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	82 0f       	add	r24, r18
    5ad6:	91 1d       	adc	r25, r1
    5ad8:	c8 16       	cp	r12, r24
    5ada:	d9 06       	cpc	r13, r25
    5adc:	0c f0       	brlt	.+2      	; 0x5ae0 <processButtons+0x8c>
    5ade:	69 c0       	rjmp	.+210    	; 0x5bb2 <processButtons+0x15e>
    5ae0:	62 81       	ldd	r22, Z+2	; 0x02
    5ae2:	e6 16       	cp	r14, r22
    5ae4:	08 f4       	brcc	.+2      	; 0x5ae8 <processButtons+0x94>
    5ae6:	65 c0       	rjmp	.+202    	; 0x5bb2 <processButtons+0x15e>
    5ae8:	24 81       	ldd	r18, Z+4	; 0x04
    5aea:	86 2f       	mov	r24, r22
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	82 0f       	add	r24, r18
    5af0:	91 1d       	adc	r25, r1
    5af2:	a8 17       	cp	r26, r24
    5af4:	b9 07       	cpc	r27, r25
    5af6:	0c f0       	brlt	.+2      	; 0x5afa <processButtons+0xa6>
    5af8:	5c c0       	rjmp	.+184    	; 0x5bb2 <processButtons+0x15e>
    5afa:	81 85       	ldd	r24, Z+9	; 0x09
		

			if(joy&actionButton && _buttons[i].state==BUTTON_UP){
    5afc:	41 15       	cp	r20, r1
    5afe:	51 05       	cpc	r21, r1
    5b00:	c9 f0       	breq	.+50     	; 0x5b34 <processButtons+0xe0>
    5b02:	88 23       	and	r24, r24
    5b04:	09 f0       	breq	.+2      	; 0x5b08 <processButtons+0xb4>
    5b06:	4e c0       	rjmp	.+156    	; 0x5ba4 <processButtons+0x150>
				//button pushed
				if(_buttons[i].pushedMapPtr!=NULL) DrawMap2(_buttons[i].x,_buttons[i].y,_buttons[i].pushedMapPtr);				
    5b08:	47 81       	ldd	r20, Z+7	; 0x07
    5b0a:	50 85       	ldd	r21, Z+8	; 0x08
    5b0c:	41 15       	cp	r20, r1
    5b0e:	51 05       	cpc	r21, r1
    5b10:	19 f0       	breq	.+6      	; 0x5b18 <processButtons+0xc4>
    5b12:	83 2f       	mov	r24, r19
    5b14:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
				_buttons[i].state=BUTTON_DOWN;
    5b18:	e0 91 84 0a 	lds	r30, 0x0A84
    5b1c:	f0 91 85 0a 	lds	r31, 0x0A85
    5b20:	e0 0f       	add	r30, r16
    5b22:	f1 1f       	adc	r31, r17
    5b24:	81 e0       	ldi	r24, 0x01	; 1
    5b26:	81 87       	std	Z+9, r24	; 0x09
				btnHandlerPtr(i,BUTTON_DOWN);					
    5b28:	e0 91 86 0a 	lds	r30, 0x0A86
    5b2c:	f0 91 87 0a 	lds	r31, 0x0A87
    5b30:	61 e0       	ldi	r22, 0x01	; 1
    5b32:	5a c0       	rjmp	.+180    	; 0x5be8 <processButtons+0x194>
				lastButtons=joy;	
				return;
			}
		
			if((joy&actionButton)==0 && _buttons[i].state==BUTTON_DOWN && _buttons[i].clicked==true){
    5b34:	81 30       	cpi	r24, 0x01	; 1
    5b36:	b1 f5       	brne	.+108    	; 0x5ba4 <processButtons+0x150>
    5b38:	82 85       	ldd	r24, Z+10	; 0x0a
    5b3a:	45 81       	ldd	r20, Z+5	; 0x05
    5b3c:	56 81       	ldd	r21, Z+6	; 0x06
    5b3e:	88 23       	and	r24, r24
    5b40:	a1 f0       	breq	.+40     	; 0x5b6a <processButtons+0x116>
				//button clicked
				if(_buttons[i].normalMapPtr!=NULL) DrawMap2(_buttons[i].x,_buttons[i].y,_buttons[i].normalMapPtr);
    5b42:	41 15       	cp	r20, r1
    5b44:	51 05       	cpc	r21, r1
    5b46:	19 f0       	breq	.+6      	; 0x5b4e <processButtons+0xfa>
    5b48:	83 2f       	mov	r24, r19
    5b4a:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
				_buttons[i].state=BUTTON_UP;
    5b4e:	e0 91 84 0a 	lds	r30, 0x0A84
    5b52:	f0 91 85 0a 	lds	r31, 0x0A85
    5b56:	e0 0f       	add	r30, r16
    5b58:	f1 1f       	adc	r31, r17
    5b5a:	11 86       	std	Z+9, r1	; 0x09
				_buttons[i].clicked=false;				
    5b5c:	12 86       	std	Z+10, r1	; 0x0a
				btnHandlerPtr(i,BUTTON_DBLCLICK);					
    5b5e:	e0 91 86 0a 	lds	r30, 0x0A86
    5b62:	f0 91 87 0a 	lds	r31, 0x0A87
    5b66:	63 e0       	ldi	r22, 0x03	; 3
    5b68:	3f c0       	rjmp	.+126    	; 0x5be8 <processButtons+0x194>
				return;
			}
	
			if((joy&actionButton)==0 && _buttons[i].state==BUTTON_DOWN && !_buttons[i].clicked){
				//button clicked
				if(_buttons[i].normalMapPtr!=NULL) DrawMap2(_buttons[i].x,_buttons[i].y,_buttons[i].normalMapPtr);
    5b6a:	41 15       	cp	r20, r1
    5b6c:	51 05       	cpc	r21, r1
    5b6e:	19 f0       	breq	.+6      	; 0x5b76 <processButtons+0x122>
    5b70:	83 2f       	mov	r24, r19
    5b72:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
				_buttons[i].state=BUTTON_UP;
    5b76:	e0 91 84 0a 	lds	r30, 0x0A84
    5b7a:	f0 91 85 0a 	lds	r31, 0x0A85
    5b7e:	e0 0f       	add	r30, r16
    5b80:	f1 1f       	adc	r31, r17
    5b82:	11 86       	std	Z+9, r1	; 0x09
				_buttons[i].clicked=true;				
    5b84:	81 e0       	ldi	r24, 0x01	; 1
    5b86:	82 87       	std	Z+10, r24	; 0x0a
				btnHandlerPtr(i,BUTTON_CLICK);					
    5b88:	e0 91 86 0a 	lds	r30, 0x0A86
    5b8c:	f0 91 87 0a 	lds	r31, 0x0A87
    5b90:	62 e0       	ldi	r22, 0x02	; 2
    5b92:	8f 2d       	mov	r24, r15
    5b94:	09 95       	icall
				lastButtons=joy;
    5b96:	d0 93 2b 08 	sts	0x082B, r29
    5b9a:	c0 93 2a 08 	sts	0x082A, r28
				dblClickDelay=0;	
    5b9e:	10 92 29 08 	sts	0x0829, r1
    5ba2:	33 c0       	rjmp	.+102    	; 0x5c0a <processButtons+0x1b6>
				return;
			}			
	


			if(dblClickDelay==DBL_CLICK_DELAY && _buttons[i].clicked==true){
    5ba4:	7f 30       	cpi	r23, 0x0F	; 15
    5ba6:	19 f5       	brne	.+70     	; 0x5bee <processButtons+0x19a>
    5ba8:	82 85       	ldd	r24, Z+10	; 0x0a
    5baa:	88 23       	and	r24, r24
    5bac:	01 f1       	breq	.+64     	; 0x5bee <processButtons+0x19a>
				//btnHandlerPtr(i,BUTTON_CLICK);
				_buttons[i].clicked=false;
    5bae:	12 86       	std	Z+10, r1	; 0x0a
    5bb0:	28 c0       	rjmp	.+80     	; 0x5c02 <processButtons+0x1ae>
				return;
			}
		
		}else{
		
			if((joy&actionButton)==0 && _buttons[i].state==BUTTON_DOWN){
    5bb2:	41 15       	cp	r20, r1
    5bb4:	51 05       	cpc	r21, r1
    5bb6:	d9 f4       	brne	.+54     	; 0x5bee <processButtons+0x19a>
    5bb8:	81 85       	ldd	r24, Z+9	; 0x09
    5bba:	81 30       	cpi	r24, 0x01	; 1
    5bbc:	c1 f4       	brne	.+48     	; 0x5bee <processButtons+0x19a>
				//button released outside of button
				if(_buttons[i].normalMapPtr!=NULL) DrawMap2(_buttons[i].x,_buttons[i].y,_buttons[i].normalMapPtr);
    5bbe:	45 81       	ldd	r20, Z+5	; 0x05
    5bc0:	56 81       	ldd	r21, Z+6	; 0x06
    5bc2:	41 15       	cp	r20, r1
    5bc4:	51 05       	cpc	r21, r1
    5bc6:	21 f0       	breq	.+8      	; 0x5bd0 <processButtons+0x17c>
    5bc8:	62 81       	ldd	r22, Z+2	; 0x02
    5bca:	83 2f       	mov	r24, r19
    5bcc:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
				_buttons[i].state=BUTTON_UP;
    5bd0:	e0 91 84 0a 	lds	r30, 0x0A84
    5bd4:	f0 91 85 0a 	lds	r31, 0x0A85
    5bd8:	e0 0f       	add	r30, r16
    5bda:	f1 1f       	adc	r31, r17
    5bdc:	11 86       	std	Z+9, r1	; 0x09
				btnHandlerPtr(i,BUTTON_UP);					
    5bde:	e0 91 86 0a 	lds	r30, 0x0A86
    5be2:	f0 91 87 0a 	lds	r31, 0x0A87
    5be6:	60 e0       	ldi	r22, 0x00	; 0
    5be8:	8f 2d       	mov	r24, r15
    5bea:	09 95       	icall
    5bec:	0a c0       	rjmp	.+20     	; 0x5c02 <processButtons+0x1ae>
	static unsigned char dblClickDelay=0;

	tx=mx>>3;
	ty=my>>3;

	for(i=0;i<btnCount;i++){
    5bee:	f3 94       	inc	r15
    5bf0:	3b 96       	adiw	r30, 0x0b	; 11
    5bf2:	05 5f       	subi	r16, 0xF5	; 245
    5bf4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf6:	fa 14       	cp	r15, r10
    5bf8:	08 f4       	brcc	.+2      	; 0x5bfc <processButtons+0x1a8>
    5bfa:	65 cf       	rjmp	.-310    	; 0x5ac6 <processButtons+0x72>

	

	}

	dblClickDelay++;
    5bfc:	7f 5f       	subi	r23, 0xFF	; 255
    5bfe:	70 93 29 08 	sts	0x0829, r23
	lastButtons=joy;
    5c02:	d0 93 2b 08 	sts	0x082B, r29
    5c06:	c0 93 2a 08 	sts	0x082A, r28
}
    5c0a:	df 91       	pop	r29
    5c0c:	cf 91       	pop	r28
    5c0e:	1f 91       	pop	r17
    5c10:	0f 91       	pop	r16
    5c12:	ff 90       	pop	r15
    5c14:	ef 90       	pop	r14
    5c16:	df 90       	pop	r13
    5c18:	cf 90       	pop	r12
    5c1a:	bf 90       	pop	r11
    5c1c:	af 90       	pop	r10
    5c1e:	08 95       	ret

00005c20 <createButton>:
ButtonHandler btnHandlerPtr;
Button *_buttons;
unsigned char btnCount=0;
bool buttonsHandlerActive=false;

void createButton(Button *button, unsigned char x,unsigned char y,const char *normalMapPtr,const char *pushedMapPtr){	
    5c20:	0f 93       	push	r16
    5c22:	1f 93       	push	r17
    5c24:	dc 01       	movw	r26, r24
    5c26:	86 2f       	mov	r24, r22
    5c28:	64 2f       	mov	r22, r20
    5c2a:	f9 01       	movw	r30, r18

	button->x=x;
    5c2c:	11 96       	adiw	r26, 0x01	; 1
    5c2e:	8c 93       	st	X, r24
    5c30:	11 97       	sbiw	r26, 0x01	; 1
	button->y=y;
    5c32:	12 96       	adiw	r26, 0x02	; 2
    5c34:	4c 93       	st	X, r20
    5c36:	12 97       	sbiw	r26, 0x02	; 2
	button->normalMapPtr=normalMapPtr;
    5c38:	16 96       	adiw	r26, 0x06	; 6
    5c3a:	3c 93       	st	X, r19
    5c3c:	2e 93       	st	-X, r18
    5c3e:	15 97       	sbiw	r26, 0x05	; 5
	button->pushedMapPtr=pushedMapPtr;
    5c40:	18 96       	adiw	r26, 0x08	; 8
    5c42:	1c 93       	st	X, r17
    5c44:	0e 93       	st	-X, r16
    5c46:	17 97       	sbiw	r26, 0x07	; 7
	button->state=0;
    5c48:	19 96       	adiw	r26, 0x09	; 9
    5c4a:	1c 92       	st	X, r1
    5c4c:	19 97       	sbiw	r26, 0x09	; 9
	button->width=pgm_read_byte(&(normalMapPtr[0]));
    5c4e:	94 91       	lpm	r25, Z+
    5c50:	13 96       	adiw	r26, 0x03	; 3
    5c52:	9c 93       	st	X, r25
    5c54:	13 97       	sbiw	r26, 0x03	; 3
	button->height=pgm_read_byte(&(normalMapPtr[1]));
    5c56:	31 96       	adiw	r30, 0x01	; 1
    5c58:	94 91       	lpm	r25, Z+
    5c5a:	31 97       	sbiw	r30, 0x01	; 1
    5c5c:	14 96       	adiw	r26, 0x04	; 4
    5c5e:	9c 93       	st	X, r25
    5c60:	14 97       	sbiw	r26, 0x04	; 4
	button->clicked=false;
    5c62:	1a 96       	adiw	r26, 0x0a	; 10
    5c64:	1c 92       	st	X, r1
	DrawMap2(x,y,normalMapPtr);
    5c66:	af 01       	movw	r20, r30
    5c68:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>

	btnCount++;	
    5c6c:	80 91 27 08 	lds	r24, 0x0827
    5c70:	8f 5f       	subi	r24, 0xFF	; 255
    5c72:	80 93 27 08 	sts	0x0827, r24
}
    5c76:	1f 91       	pop	r17
    5c78:	0f 91       	pop	r16
    5c7a:	08 95       	ret

00005c7c <DetectControllers>:
	}
}



unsigned char DetectControllers(){
    5c7c:	88 e0       	ldi	r24, 0x08	; 8
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	0e 94 9a 30 	call	0x6134	; 0x6134 <WaitVsync>
	unsigned int joy;
	unsigned char resp=0;
	//wait a frame for mouse to settle
	WaitVsync(8);
	joy=ReadJoypad(0);
    5c84:	80 e0       	ldi	r24, 0x00	; 0
    5c86:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
	if((joy&0x8000)!=0){
    5c8a:	97 ff       	sbrs	r25, 7
    5c8c:	0d c0       	rjmp	.+26     	; 0x5ca8 <DetectControllers+0x2c>
		//we have a mouse in player 1 port
		playDevice=1;
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	80 93 21 08 	sts	0x0821, r24
		playPort=0;
    5c94:	10 92 22 08 	sts	0x0822, r1
		actionButton=BTN_MOUSE_LEFT;
    5c98:	80 e0       	ldi	r24, 0x00	; 0
    5c9a:	92 e0       	ldi	r25, 0x02	; 2
    5c9c:	90 93 8d 0a 	sts	0x0A8D, r25
    5ca0:	80 93 8c 0a 	sts	0x0A8C, r24
    5ca4:	81 e0       	ldi	r24, 0x01	; 1
    5ca6:	08 95       	ret
		resp=1;
		return resp;
	}else{
		playDevice=0;
    5ca8:	10 92 21 08 	sts	0x0821, r1
		playPort=0;
    5cac:	10 92 22 08 	sts	0x0822, r1
		actionButton=BTN_A;
    5cb0:	80 e0       	ldi	r24, 0x00	; 0
    5cb2:	91 e0       	ldi	r25, 0x01	; 1
    5cb4:	90 93 8d 0a 	sts	0x0A8D, r25
    5cb8:	80 93 8c 0a 	sts	0x0A8C, r24
	}

	joy=ReadJoypad(1);
    5cbc:	81 e0       	ldi	r24, 0x01	; 1
    5cbe:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
	if((joy&0x8000)!=0){
    5cc2:	97 fd       	sbrc	r25, 7
    5cc4:	02 c0       	rjmp	.+4      	; 0x5cca <DetectControllers+0x4e>
    5cc6:	80 e0       	ldi	r24, 0x00	; 0
    5cc8:	08 95       	ret
		//we have a mouse in player 2 port
		playDevice=1;
    5cca:	81 e0       	ldi	r24, 0x01	; 1
    5ccc:	80 93 21 08 	sts	0x0821, r24
		playPort=1;
    5cd0:	80 93 22 08 	sts	0x0822, r24
		actionButton=BTN_MOUSE_LEFT;
    5cd4:	80 e0       	ldi	r24, 0x00	; 0
    5cd6:	92 e0       	ldi	r25, 0x02	; 2
    5cd8:	90 93 8d 0a 	sts	0x0A8D, r25
    5cdc:	80 93 8c 0a 	sts	0x0A8C, r24
    5ce0:	80 e1       	ldi	r24, 0x10	; 16
		resp=1<<4;
	}

	return resp;
}
    5ce2:	08 95       	ret

00005ce4 <processMouseMovement>:





void processMouseMovement(void){
    5ce4:	0f 93       	push	r16
	unsigned int joy;
	
	if(snesMouseEnabled){
    5ce6:	80 91 20 08 	lds	r24, 0x0820
    5cea:	88 23       	and	r24, r24
    5cec:	09 f4       	brne	.+2      	; 0x5cf0 <processMouseMovement+0xc>
    5cee:	a7 c0       	rjmp	.+334    	; 0x5e3e <processMouseMovement+0x15a>

		//check in case its a SNES pad

		if(playDevice==0){
    5cf0:	80 91 21 08 	lds	r24, 0x0821
    5cf4:	88 23       	and	r24, r24
    5cf6:	09 f0       	breq	.+2      	; 0x5cfa <processMouseMovement+0x16>
    5cf8:	43 c0       	rjmp	.+134    	; 0x5d80 <processMouseMovement+0x9c>
			joy=ReadJoypad(playPort);
    5cfa:	80 91 22 08 	lds	r24, 0x0822
    5cfe:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    5d02:	28 2f       	mov	r18, r24

			if(joy&BTN_LEFT){
    5d04:	86 ff       	sbrs	r24, 6
    5d06:	0f c0       	rjmp	.+30     	; 0x5d26 <processMouseMovement+0x42>
				mx-=2;
    5d08:	80 91 23 08 	lds	r24, 0x0823
    5d0c:	90 91 24 08 	lds	r25, 0x0824
    5d10:	02 97       	sbiw	r24, 0x02	; 2
    5d12:	90 93 24 08 	sts	0x0824, r25
    5d16:	80 93 23 08 	sts	0x0823, r24
				if(mx<0) mx=0; 
    5d1a:	97 ff       	sbrs	r25, 7
    5d1c:	04 c0       	rjmp	.+8      	; 0x5d26 <processMouseMovement+0x42>
    5d1e:	10 92 24 08 	sts	0x0824, r1
    5d22:	10 92 23 08 	sts	0x0823, r1
			}
			if(joy&BTN_RIGHT){
    5d26:	27 ff       	sbrs	r18, 7
    5d28:	12 c0       	rjmp	.+36     	; 0x5d4e <processMouseMovement+0x6a>
				mx+=2;
    5d2a:	80 91 23 08 	lds	r24, 0x0823
    5d2e:	90 91 24 08 	lds	r25, 0x0824
    5d32:	02 96       	adiw	r24, 0x02	; 2
    5d34:	90 93 24 08 	sts	0x0824, r25
    5d38:	80 93 23 08 	sts	0x0823, r24
				if(mx>231) mx=231;
    5d3c:	88 3e       	cpi	r24, 0xE8	; 232
    5d3e:	91 05       	cpc	r25, r1
    5d40:	34 f0       	brlt	.+12     	; 0x5d4e <processMouseMovement+0x6a>
    5d42:	87 ee       	ldi	r24, 0xE7	; 231
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	90 93 24 08 	sts	0x0824, r25
    5d4a:	80 93 23 08 	sts	0x0823, r24
			}
			if(joy&BTN_UP){
    5d4e:	24 ff       	sbrs	r18, 4
    5d50:	0f c0       	rjmp	.+30     	; 0x5d70 <processMouseMovement+0x8c>
				my-=2;
    5d52:	80 91 25 08 	lds	r24, 0x0825
    5d56:	90 91 26 08 	lds	r25, 0x0826
    5d5a:	02 97       	sbiw	r24, 0x02	; 2
    5d5c:	90 93 26 08 	sts	0x0826, r25
    5d60:	80 93 25 08 	sts	0x0825, r24
				if(my<0)my=0;
    5d64:	97 ff       	sbrs	r25, 7
    5d66:	04 c0       	rjmp	.+8      	; 0x5d70 <processMouseMovement+0x8c>
    5d68:	10 92 26 08 	sts	0x0826, r1
    5d6c:	10 92 25 08 	sts	0x0825, r1
			}
			if(joy&BTN_DOWN){
    5d70:	25 ff       	sbrs	r18, 5
    5d72:	59 c0       	rjmp	.+178    	; 0x5e26 <processMouseMovement+0x142>
				my+=2;
    5d74:	80 91 25 08 	lds	r24, 0x0825
    5d78:	90 91 26 08 	lds	r25, 0x0826
    5d7c:	02 96       	adiw	r24, 0x02	; 2
    5d7e:	46 c0       	rjmp	.+140    	; 0x5e0c <processMouseMovement+0x128>
				if(my>215)my=215;
			}

		}else{
	
			joy=ReadJoypadExt(playPort);
    5d80:	80 91 22 08 	lds	r24, 0x0822
    5d84:	0e 94 0a 26 	call	0x4c14	; 0x4c14 <ReadJoypadExt>
    5d88:	9c 01       	movw	r18, r24
    5d8a:	40 91 23 08 	lds	r20, 0x0823
    5d8e:	50 91 24 08 	lds	r21, 0x0824
    5d92:	8f 77       	andi	r24, 0x7F	; 127
    5d94:	90 70       	andi	r25, 0x00	; 0

			if(joy&0x80){
    5d96:	27 ff       	sbrs	r18, 7
    5d98:	0e c0       	rjmp	.+28     	; 0x5db6 <processMouseMovement+0xd2>
				mx-=(joy&0x7f);
    5d9a:	ba 01       	movw	r22, r20
    5d9c:	68 1b       	sub	r22, r24
    5d9e:	79 0b       	sbc	r23, r25
    5da0:	70 93 24 08 	sts	0x0824, r23
    5da4:	60 93 23 08 	sts	0x0823, r22
				if(mx<0) mx=0; 
    5da8:	77 ff       	sbrs	r23, 7
    5daa:	14 c0       	rjmp	.+40     	; 0x5dd4 <processMouseMovement+0xf0>
    5dac:	10 92 24 08 	sts	0x0824, r1
    5db0:	10 92 23 08 	sts	0x0823, r1
    5db4:	0f c0       	rjmp	.+30     	; 0x5dd4 <processMouseMovement+0xf0>
			}else{
				mx+=(joy&0x7f);
    5db6:	84 0f       	add	r24, r20
    5db8:	95 1f       	adc	r25, r21
    5dba:	90 93 24 08 	sts	0x0824, r25
    5dbe:	80 93 23 08 	sts	0x0823, r24
				if(mx>231) mx=231;
    5dc2:	88 3e       	cpi	r24, 0xE8	; 232
    5dc4:	91 05       	cpc	r25, r1
    5dc6:	34 f0       	brlt	.+12     	; 0x5dd4 <processMouseMovement+0xf0>
    5dc8:	87 ee       	ldi	r24, 0xE7	; 231
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	90 93 24 08 	sts	0x0824, r25
    5dd0:	80 93 23 08 	sts	0x0823, r24
    5dd4:	40 91 25 08 	lds	r20, 0x0825
    5dd8:	50 91 26 08 	lds	r21, 0x0826
    5ddc:	83 2f       	mov	r24, r19
    5dde:	99 27       	eor	r25, r25
			}
	
			if(joy&0x8000){
    5de0:	37 ff       	sbrs	r19, 7
    5de2:	10 c0       	rjmp	.+32     	; 0x5e04 <processMouseMovement+0x120>
				my-=((joy>>8)&0x7f);
    5de4:	8f 77       	andi	r24, 0x7F	; 127
    5de6:	90 70       	andi	r25, 0x00	; 0
    5de8:	9a 01       	movw	r18, r20
    5dea:	28 1b       	sub	r18, r24
    5dec:	39 0b       	sbc	r19, r25
    5dee:	30 93 26 08 	sts	0x0826, r19
    5df2:	20 93 25 08 	sts	0x0825, r18
				if(my<0)my=0;
    5df6:	37 ff       	sbrs	r19, 7
    5df8:	16 c0       	rjmp	.+44     	; 0x5e26 <processMouseMovement+0x142>
    5dfa:	10 92 26 08 	sts	0x0826, r1
    5dfe:	10 92 25 08 	sts	0x0825, r1
    5e02:	11 c0       	rjmp	.+34     	; 0x5e26 <processMouseMovement+0x142>
			}else{
				my+=((joy>>8)&0x7f);
    5e04:	8f 77       	andi	r24, 0x7F	; 127
    5e06:	90 70       	andi	r25, 0x00	; 0
    5e08:	84 0f       	add	r24, r20
    5e0a:	95 1f       	adc	r25, r21
    5e0c:	90 93 26 08 	sts	0x0826, r25
    5e10:	80 93 25 08 	sts	0x0825, r24
				if(my>215)my=215;
    5e14:	88 3d       	cpi	r24, 0xD8	; 216
    5e16:	91 05       	cpc	r25, r1
    5e18:	34 f0       	brlt	.+12     	; 0x5e26 <processMouseMovement+0x142>
    5e1a:	87 ed       	ldi	r24, 0xD7	; 215
    5e1c:	90 e0       	ldi	r25, 0x00	; 0
    5e1e:	90 93 26 08 	sts	0x0826, r25
    5e22:	80 93 25 08 	sts	0x0825, r24
			}
	
		}

		MoveSprite(mouseSpriteIndex,mx,my,mouseWidth,mouseHeight);
    5e26:	00 91 8e 0a 	lds	r16, 0x0A8E
    5e2a:	20 91 89 0a 	lds	r18, 0x0A89
    5e2e:	40 91 25 08 	lds	r20, 0x0825
    5e32:	60 91 23 08 	lds	r22, 0x0823
    5e36:	80 91 88 0a 	lds	r24, 0x0A88
    5e3a:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <MoveSprite>
	}
}
    5e3e:	0f 91       	pop	r16
    5e40:	08 95       	ret

00005e42 <ReadButtons>:
	#if VIDEO_MODE != 7
	logo();
	#endif
}

void ReadButtons(){
    5e42:	ff 92       	push	r15
    5e44:	0f 93       	push	r16
    5e46:	1f 93       	push	r17
    5e48:	cf 93       	push	r28
    5e4a:	df 93       	push	r29
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    5e4c:	12 9a       	sbi	0x02, 2	; 2
	if(snesMouseEnabled){
    5e4e:	80 91 20 08 	lds	r24, 0x0820
    5e52:	88 23       	and	r24, r24
    5e54:	29 f0       	breq	.+10     	; 0x5e60 <ReadButtons+0x1e>
		WaitUs(1);
    5e56:	81 e0       	ldi	r24, 0x01	; 1
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <WaitUs>
    5e5e:	02 c0       	rjmp	.+4      	; 0x5e64 <ReadButtons+0x22>
	}else{
		Wait200ns();
    5e60:	c8 95       	lpm
    5e62:	c8 95       	lpm
	}	
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    5e64:	12 98       	cbi	0x02, 2	; 2
    5e66:	00 e0       	ldi	r16, 0x00	; 0
    5e68:	10 e0       	ldi	r17, 0x00	; 0
    5e6a:	c0 e0       	ldi	r28, 0x00	; 0
    5e6c:	d0 e0       	ldi	r29, 0x00	; 0
    5e6e:	ff 24       	eor	r15, r15


	//read button states
	for(i=0;i<16;i++){
		
		p1ButtonsLo>>=1;
    5e70:	16 95       	lsr	r17
    5e72:	07 95       	ror	r16
		p2ButtonsLo>>=1;
    5e74:	d6 95       	lsr	r29
    5e76:	c7 95       	ror	r28
	
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5e78:	13 98       	cbi	0x02, 3	; 2
		if(snesMouseEnabled){
    5e7a:	80 91 20 08 	lds	r24, 0x0820
    5e7e:	88 23       	and	r24, r24
    5e80:	29 f0       	breq	.+10     	; 0x5e8c <ReadButtons+0x4a>
			WaitUs(5);
    5e82:	85 e0       	ldi	r24, 0x05	; 5
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <WaitUs>
    5e8a:	02 c0       	rjmp	.+4      	; 0x5e90 <ReadButtons+0x4e>
		}else{
			Wait200ns();
    5e8c:	c8 95       	lpm
    5e8e:	c8 95       	lpm
		}
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    5e90:	00 9b       	sbis	0x00, 0	; 0
    5e92:	10 68       	ori	r17, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    5e94:	01 9b       	sbis	0x00, 1	; 0
    5e96:	d0 68       	ori	r29, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5e98:	13 9a       	sbi	0x02, 3	; 2
		if(snesMouseEnabled){
    5e9a:	80 91 20 08 	lds	r24, 0x0820
    5e9e:	88 23       	and	r24, r24
    5ea0:	29 f0       	breq	.+10     	; 0x5eac <ReadButtons+0x6a>
			WaitUs(5);
    5ea2:	85 e0       	ldi	r24, 0x05	; 5
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <WaitUs>
    5eaa:	02 c0       	rjmp	.+4      	; 0x5eb0 <ReadButtons+0x6e>
		}else{
			Wait200ns();
    5eac:	c8 95       	lpm
    5eae:	c8 95       	lpm
	}	
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    5eb0:	f3 94       	inc	r15
    5eb2:	80 e1       	ldi	r24, 0x10	; 16
    5eb4:	f8 16       	cp	r15, r24
    5eb6:	e1 f6       	brne	.-72     	; 0x5e70 <ReadButtons+0x2e>
			Wait200ns();
		}

	}

	joypad1_status_lo=p1ButtonsLo;
    5eb8:	10 93 10 08 	sts	0x0810, r17
    5ebc:	00 93 0f 08 	sts	0x080F, r16
	joypad2_status_lo=p2ButtonsLo;
    5ec0:	d0 93 14 08 	sts	0x0814, r29
    5ec4:	c0 93 13 08 	sts	0x0813, r28

}
    5ec8:	df 91       	pop	r29
    5eca:	cf 91       	pop	r28
    5ecc:	1f 91       	pop	r17
    5ece:	0f 91       	pop	r16
    5ed0:	ff 90       	pop	r15
    5ed2:	08 95       	ret

00005ed4 <ReadControllers>:

void ReadControllers(){
    5ed4:	ff 92       	push	r15
    5ed6:	0f 93       	push	r16
    5ed8:	1f 93       	push	r17
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
	unsigned int p1ButtonsHi=0,p2ButtonsHi=0;
	unsigned char i;

	//read the standard buttons
	ReadButtons();
    5ede:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <ReadButtons>

	//read the extended bits. Applies only if the mouse is plugged.
	//if bit 15 of standard word is 1, a mouse is plugged.
	if(joypad1_status_lo&(1<<15) || joypad2_status_lo&(1<<15)){
    5ee2:	80 91 0f 08 	lds	r24, 0x080F
    5ee6:	90 91 10 08 	lds	r25, 0x0810
    5eea:	97 fd       	sbrc	r25, 7
    5eec:	06 c0       	rjmp	.+12     	; 0x5efa <ReadControllers+0x26>
    5eee:	80 91 13 08 	lds	r24, 0x0813
    5ef2:	90 91 14 08 	lds	r25, 0x0814
    5ef6:	97 ff       	sbrs	r25, 7
    5ef8:	27 c0       	rjmp	.+78     	; 0x5f48 <ReadControllers+0x74>

		WaitUs(1);
    5efa:	81 e0       	ldi	r24, 0x01	; 1
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <WaitUs>
    5f02:	00 e0       	ldi	r16, 0x00	; 0
    5f04:	10 e0       	ldi	r17, 0x00	; 0
    5f06:	c0 e0       	ldi	r28, 0x00	; 0
    5f08:	d0 e0       	ldi	r29, 0x00	; 0
    5f0a:	ff 24       	eor	r15, r15

		for(i=0;i<16;i++){
		
			p1ButtonsHi<<=1;
    5f0c:	00 0f       	add	r16, r16
    5f0e:	11 1f       	adc	r17, r17
			p2ButtonsHi<<=1;
    5f10:	cc 0f       	add	r28, r28
    5f12:	dd 1f       	adc	r29, r29
	
			//pulse clock pin		
			JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    5f14:	13 98       	cbi	0x02, 3	; 2
			Wait200ns();
    5f16:	c8 95       	lpm
    5f18:	c8 95       	lpm
			Wait200ns();
    5f1a:	c8 95       	lpm
    5f1c:	c8 95       	lpm
		
			if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsHi|=1;
    5f1e:	00 9b       	sbis	0x00, 0	; 0
    5f20:	01 60       	ori	r16, 0x01	; 1
			if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsHi|=1;
    5f22:	01 9b       	sbis	0x00, 1	; 0
    5f24:	c1 60       	ori	r28, 0x01	; 1

			JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    5f26:	13 9a       	sbi	0x02, 3	; 2
			WaitUs(8);
    5f28:	88 e0       	ldi	r24, 0x08	; 8
    5f2a:	90 e0       	ldi	r25, 0x00	; 0
    5f2c:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <WaitUs>
	//if bit 15 of standard word is 1, a mouse is plugged.
	if(joypad1_status_lo&(1<<15) || joypad2_status_lo&(1<<15)){

		WaitUs(1);

		for(i=0;i<16;i++){
    5f30:	f3 94       	inc	r15
    5f32:	80 e1       	ldi	r24, 0x10	; 16
    5f34:	f8 16       	cp	r15, r24
    5f36:	51 f7       	brne	.-44     	; 0x5f0c <ReadControllers+0x38>

			JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
			WaitUs(8);
		}
		
		joypad1_status_hi=p1ButtonsHi;
    5f38:	10 93 12 08 	sts	0x0812, r17
    5f3c:	00 93 11 08 	sts	0x0811, r16
		joypad2_status_hi=p2ButtonsHi;
    5f40:	d0 93 16 08 	sts	0x0816, r29
    5f44:	c0 93 15 08 	sts	0x0815, r28

	}

}
    5f48:	df 91       	pop	r29
    5f4a:	cf 91       	pop	r28
    5f4c:	1f 91       	pop	r17
    5f4e:	0f 91       	pop	r16
    5f50:	ff 90       	pop	r15
    5f52:	08 95       	ret

00005f54 <EnableSnesMouse>:
*/
unsigned char playDevice=0,playPort=0,mouseSpriteIndex,mouseWidth,mouseHeight;
unsigned int actionButton;
int mx=0,my=0;

char EnableSnesMouse(unsigned char spriteIndex,const char *spriteMap){
    5f54:	0f 93       	push	r16
    5f56:	1f 93       	push	r17
    5f58:	cf 93       	push	r28
    5f5a:	df 93       	push	r29
    5f5c:	18 2f       	mov	r17, r24
    5f5e:	eb 01       	movw	r28, r22
	snesMouseEnabled=true;
    5f60:	81 e0       	ldi	r24, 0x01	; 1
    5f62:	80 93 20 08 	sts	0x0820, r24
	if(DetectControllers()!=0){
    5f66:	0e 94 3e 2e 	call	0x5c7c	; 0x5c7c <DetectControllers>
    5f6a:	88 23       	and	r24, r24
    5f6c:	39 f1       	breq	.+78     	; 0x5fbc <EnableSnesMouse+0x68>
		mouseWidth=pgm_read_byte(&(spriteMap[0]));
    5f6e:	fe 01       	movw	r30, r28
    5f70:	84 91       	lpm	r24, Z+
    5f72:	80 93 89 0a 	sts	0x0A89, r24
		mouseHeight=pgm_read_byte(&(spriteMap[1]));
    5f76:	21 96       	adiw	r28, 0x01	; 1
    5f78:	fe 01       	movw	r30, r28
    5f7a:	84 91       	lpm	r24, Z+
    5f7c:	21 97       	sbiw	r28, 0x01	; 1
    5f7e:	80 93 8e 0a 	sts	0x0A8E, r24

		mx=120;
    5f82:	88 e7       	ldi	r24, 0x78	; 120
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	90 93 24 08 	sts	0x0824, r25
    5f8a:	80 93 23 08 	sts	0x0823, r24
		my=120;
    5f8e:	90 93 26 08 	sts	0x0826, r25
    5f92:	80 93 25 08 	sts	0x0825, r24
		mouseSpriteIndex=spriteIndex;
    5f96:	10 93 88 0a 	sts	0x0A88, r17
		MapSprite(spriteIndex,spriteMap);
    5f9a:	be 01       	movw	r22, r28
    5f9c:	81 2f       	mov	r24, r17
    5f9e:	0e 94 2c 30 	call	0x6058	; 0x6058 <MapSprite>
		MoveSprite(spriteIndex,mx,my,mouseWidth,mouseHeight);
    5fa2:	00 91 8e 0a 	lds	r16, 0x0A8E
    5fa6:	20 91 89 0a 	lds	r18, 0x0A89
    5faa:	40 91 25 08 	lds	r20, 0x0825
    5fae:	60 91 23 08 	lds	r22, 0x0823
    5fb2:	81 2f       	mov	r24, r17
    5fb4:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <MoveSprite>
    5fb8:	80 e0       	ldi	r24, 0x00	; 0
    5fba:	03 c0       	rjmp	.+6      	; 0x5fc2 <EnableSnesMouse+0x6e>
		return 0;
	}else{
		snesMouseEnabled=false;
    5fbc:	10 92 20 08 	sts	0x0820, r1
    5fc0:	8f ef       	ldi	r24, 0xFF	; 255
		return -1;
	}

}
    5fc2:	df 91       	pop	r29
    5fc4:	cf 91       	pop	r28
    5fc6:	1f 91       	pop	r17
    5fc8:	0f 91       	pop	r16
    5fca:	08 95       	ret

00005fcc <DisplayMixStats>:
	}

}
*/
//Called each frame 
void DisplayMixStats(char phase,char line){
    5fcc:	08 95       	ret

00005fce <RestoreBackground>:
	extern void BlitSprite(unsigned char spriteNo,unsigned char ramTileNo,unsigned int xy,unsigned int dxdy);

	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
    5fce:	30 91 a1 0a 	lds	r19, 0x0AA1
    5fd2:	20 e0       	ldi	r18, 0x00	; 0
    5fd4:	10 c0       	rjmp	.+32     	; 0x5ff6 <RestoreBackground+0x28>
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    5fd6:	82 2f       	mov	r24, r18
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	fc 01       	movw	r30, r24
    5fdc:	ee 0f       	add	r30, r30
    5fde:	ff 1f       	adc	r31, r31
    5fe0:	e8 0f       	add	r30, r24
    5fe2:	f9 1f       	adc	r31, r25
    5fe4:	e0 52       	subi	r30, 0x20	; 32
    5fe6:	f8 4f       	sbci	r31, 0xF8	; 248
    5fe8:	a0 81       	ld	r26, Z
    5fea:	b1 81       	ldd	r27, Z+1	; 0x01
    5fec:	a0 58       	subi	r26, 0x80	; 128
    5fee:	be 4f       	sbci	r27, 0xFE	; 254
    5ff0:	82 81       	ldd	r24, Z+2	; 0x02
    5ff2:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    5ff4:	2f 5f       	subi	r18, 0xFF	; 255
    5ff6:	23 17       	cp	r18, r19
    5ff8:	70 f3       	brcs	.-36     	; 0x5fd6 <RestoreBackground+0x8>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    5ffa:	08 95       	ret

00005ffc <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    5ffc:	1f 93       	push	r17
    5ffe:	cf 93       	push	r28
    6000:	df 93       	push	r29
    6002:	fa 01       	movw	r30, r20
	unsigned char i;
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
    6004:	54 91       	lpm	r21, Z+
	unsigned char mapHeight=pgm_read_byte(&(map[1]));
    6006:	31 96       	adiw	r30, 0x01	; 1
    6008:	14 91       	lpm	r17, Z+
    600a:	c5 2f       	mov	r28, r21
    600c:	d0 e0       	ldi	r29, 0x00	; 0
    600e:	9f 01       	movw	r18, r30
    6010:	2f 5f       	subi	r18, 0xFF	; 255
    6012:	3f 4f       	sbci	r19, 0xFF	; 255
    6014:	70 e0       	ldi	r23, 0x00	; 0
    6016:	e5 e0       	ldi	r30, 0x05	; 5
    6018:	66 0f       	add	r22, r22
    601a:	77 1f       	adc	r23, r23
    601c:	ea 95       	dec	r30
    601e:	e1 f7       	brne	.-8      	; 0x6018 <DrawMap2+0x1c>
    6020:	68 0f       	add	r22, r24
    6022:	71 1d       	adc	r23, r1
    6024:	40 e0       	ldi	r20, 0x00	; 0
    6026:	0c c0       	rjmp	.+24     	; 0x6040 <DrawMap2+0x44>

	for(unsigned char dy=0;dy<mapHeight;dy++){
		for(unsigned char dx=0;dx<mapWidth;dx++){
			
			i=pgm_read_byte(&(map[(dy*mapWidth)+dx+2]));
    6028:	84 91       	lpm	r24, Z+
			
			vram[((y+dy)*VRAM_TILES_H)+x+dx]=(i + RAM_TILES_COUNT) ;
    602a:	84 5f       	subi	r24, 0xF4	; 244
    602c:	8d 93       	st	X+, r24
	unsigned char i;
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
	unsigned char mapHeight=pgm_read_byte(&(map[1]));

	for(unsigned char dy=0;dy<mapHeight;dy++){
		for(unsigned char dx=0;dx<mapWidth;dx++){
    602e:	9f 5f       	subi	r25, 0xFF	; 255
    6030:	31 96       	adiw	r30, 0x01	; 1
    6032:	95 17       	cp	r25, r21
    6034:	c8 f3       	brcs	.-14     	; 0x6028 <DrawMap2+0x2c>
void DrawMap2(unsigned char x,unsigned char y,const char *map){
	unsigned char i;
	unsigned char mapWidth=pgm_read_byte(&(map[0]));
	unsigned char mapHeight=pgm_read_byte(&(map[1]));

	for(unsigned char dy=0;dy<mapHeight;dy++){
    6036:	4f 5f       	subi	r20, 0xFF	; 255
    6038:	2c 0f       	add	r18, r28
    603a:	3d 1f       	adc	r19, r29
    603c:	60 5e       	subi	r22, 0xE0	; 224
    603e:	7f 4f       	sbci	r23, 0xFF	; 255
    6040:	41 17       	cp	r20, r17
    6042:	30 f4       	brcc	.+12     	; 0x6050 <DrawMap2+0x54>
    6044:	db 01       	movw	r26, r22
    6046:	a0 58       	subi	r26, 0x80	; 128
    6048:	be 4f       	sbci	r27, 0xFE	; 254
    604a:	f9 01       	movw	r30, r18
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	f1 cf       	rjmp	.-30     	; 0x6032 <DrawMap2+0x36>
			
		
		}
	}

}
    6050:	df 91       	pop	r29
    6052:	cf 91       	pop	r28
    6054:	1f 91       	pop	r17
    6056:	08 95       	ret

00006058 <MapSprite>:
	}
}

#if SPRITES_ENABLED == 1

	void MapSprite(unsigned char startSprite,const char *map){
    6058:	1f 93       	push	r17
    605a:	cf 93       	push	r28
    605c:	df 93       	push	r29
    605e:	a8 2f       	mov	r26, r24
    6060:	fb 01       	movw	r30, r22
		unsigned char tile;
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    6062:	74 91       	lpm	r23, Z+
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    6064:	31 96       	adiw	r30, 0x01	; 1
    6066:	b4 91       	lpm	r27, Z+
    6068:	c7 2f       	mov	r28, r23
    606a:	d0 e0       	ldi	r29, 0x00	; 0
    606c:	af 01       	movw	r20, r30
    606e:	4f 5f       	subi	r20, 0xFF	; 255
    6070:	5f 4f       	sbci	r21, 0xFF	; 255
    6072:	60 e0       	ldi	r22, 0x00	; 0
    6074:	16 c0       	rjmp	.+44     	; 0x60a2 <MapSprite+0x4a>

		for(unsigned char dy=0;dy<mapHeight;dy++){
			for(unsigned char dx=0;dx<mapWidth;dx++){
			
			 	tile=pgm_read_byte(&(map[(dy*mapWidth)+dx+2]));		
    6076:	f9 01       	movw	r30, r18
    6078:	84 91       	lpm	r24, Z+
				sprites[startSprite++].tileIndex=tile ;
    607a:	e1 2f       	mov	r30, r17
    607c:	f0 e0       	ldi	r31, 0x00	; 0
    607e:	ee 0f       	add	r30, r30
    6080:	ff 1f       	adc	r31, r31
    6082:	ee 0f       	add	r30, r30
    6084:	ff 1f       	adc	r31, r31
    6086:	ef 56       	subi	r30, 0x6F	; 111
    6088:	f5 4f       	sbci	r31, 0xF5	; 245
    608a:	80 83       	st	Z, r24
		unsigned char tile;
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
		unsigned char mapHeight=pgm_read_byte(&(map[1]));

		for(unsigned char dy=0;dy<mapHeight;dy++){
			for(unsigned char dx=0;dx<mapWidth;dx++){
    608c:	9f 5f       	subi	r25, 0xFF	; 255
    608e:	2f 5f       	subi	r18, 0xFF	; 255
    6090:	3f 4f       	sbci	r19, 0xFF	; 255
    6092:	19 2f       	mov	r17, r25
    6094:	1a 0f       	add	r17, r26
    6096:	97 17       	cp	r25, r23
    6098:	70 f3       	brcs	.-36     	; 0x6076 <MapSprite+0x1e>
    609a:	a7 0f       	add	r26, r23
	void MapSprite(unsigned char startSprite,const char *map){
		unsigned char tile;
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
		unsigned char mapHeight=pgm_read_byte(&(map[1]));

		for(unsigned char dy=0;dy<mapHeight;dy++){
    609c:	6f 5f       	subi	r22, 0xFF	; 255
    609e:	4c 0f       	add	r20, r28
    60a0:	5d 1f       	adc	r21, r29
    60a2:	6b 17       	cp	r22, r27
    60a4:	18 f4       	brcc	.+6      	; 0x60ac <MapSprite+0x54>
    60a6:	9a 01       	movw	r18, r20
    60a8:	90 e0       	ldi	r25, 0x00	; 0
    60aa:	f3 cf       	rjmp	.-26     	; 0x6092 <MapSprite+0x3a>
			 	tile=pgm_read_byte(&(map[(dy*mapWidth)+dx+2]));		
				sprites[startSprite++].tileIndex=tile ;
			}
		}

	}
    60ac:	df 91       	pop	r29
    60ae:	cf 91       	pop	r28
    60b0:	1f 91       	pop	r17
    60b2:	08 95       	ret

000060b4 <MoveSprite>:

	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    60b4:	0f 93       	push	r16
    60b6:	50 e0       	ldi	r21, 0x00	; 0
    60b8:	12 c0       	rjmp	.+36     	; 0x60de <MoveSprite+0x2a>
	
		for(unsigned char dy=0;dy<height;dy++){
			for(unsigned char dx=0;dx<width;dx++){
				
				sprites[startSprite].x=x+(8*dx);
    60ba:	f0 e0       	ldi	r31, 0x00	; 0
    60bc:	ee 0f       	add	r30, r30
    60be:	ff 1f       	adc	r31, r31
    60c0:	ee 0f       	add	r30, r30
    60c2:	ff 1f       	adc	r31, r31
    60c4:	e1 57       	subi	r30, 0x71	; 113
    60c6:	f5 4f       	sbci	r31, 0xF5	; 245
    60c8:	30 83       	st	Z, r19
				sprites[startSprite].y=y+(8*dy);
    60ca:	41 83       	std	Z+1, r20	; 0x01
	}

	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
	
		for(unsigned char dy=0;dy<height;dy++){
			for(unsigned char dx=0;dx<width;dx++){
    60cc:	9f 5f       	subi	r25, 0xFF	; 255
    60ce:	38 5f       	subi	r19, 0xF8	; 248
    60d0:	e9 2f       	mov	r30, r25
    60d2:	e8 0f       	add	r30, r24
    60d4:	92 17       	cp	r25, r18
    60d6:	88 f3       	brcs	.-30     	; 0x60ba <MoveSprite+0x6>
    60d8:	82 0f       	add	r24, r18

	}

	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
	
		for(unsigned char dy=0;dy<height;dy++){
    60da:	5f 5f       	subi	r21, 0xFF	; 255
    60dc:	48 5f       	subi	r20, 0xF8	; 248
    60de:	50 17       	cp	r21, r16
    60e0:	18 f4       	brcc	.+6      	; 0x60e8 <MoveSprite+0x34>
    60e2:	36 2f       	mov	r19, r22
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	f4 cf       	rjmp	.-24     	; 0x60d0 <MoveSprite+0x1c>
				sprites[startSprite].y=y+(8*dy);
				startSprite++;
			}
		}	

	}
    60e8:	0f 91       	pop	r16
    60ea:	08 95       	ret

000060ec <ProcessFading>:
	doFade(speed,blocking);
}


//called by the kernel at each field end
void ProcessFading(){
    60ec:	80 91 a2 0a 	lds	r24, 0x0AA2
    60f0:	88 23       	and	r24, r24
    60f2:	f9 f0       	breq	.+62     	; 0x6132 <ProcessFading+0x46>
	if(fadeActive==true){
		if(currFadeFrame==0){
    60f4:	80 91 a3 0a 	lds	r24, 0x0AA3
    60f8:	88 23       	and	r24, r24
    60fa:	c1 f4       	brne	.+48     	; 0x612c <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    60fc:	80 91 9f 0a 	lds	r24, 0x0A9F
    6100:	80 93 a3 0a 	sts	0x0AA3, r24
			DDRC = fader[fadeStep-1];
    6104:	90 91 a4 0a 	lds	r25, 0x0AA4
    6108:	e9 2f       	mov	r30, r25
    610a:	f0 e0       	ldi	r31, 0x00	; 0
    610c:	e0 50       	subi	r30, 0x00	; 0
    610e:	ff 4f       	sbci	r31, 0xFF	; 255
    6110:	80 81       	ld	r24, Z
    6112:	87 b9       	out	0x07, r24	; 7
			fadeStep+=fadeDir;
    6114:	80 91 a0 0a 	lds	r24, 0x0AA0
    6118:	89 0f       	add	r24, r25
    611a:	80 93 a4 0a 	sts	0x0AA4, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    611e:	88 23       	and	r24, r24
    6120:	11 f0       	breq	.+4      	; 0x6126 <ProcessFading+0x3a>
    6122:	8d 30       	cpi	r24, 0x0D	; 13
    6124:	31 f4       	brne	.+12     	; 0x6132 <ProcessFading+0x46>
				fadeActive=false;
    6126:	10 92 a2 0a 	sts	0x0AA2, r1
    612a:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    612c:	81 50       	subi	r24, 0x01	; 1
    612e:	80 93 a3 0a 	sts	0x0AA3, r24
    6132:	08 95       	ret

00006134 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (30hz)
void WaitVsync(int count){
    6134:	0f 93       	push	r16
    6136:	1f 93       	push	r17
    6138:	cf 93       	push	r28
    613a:	df 93       	push	r29
    613c:	8c 01       	movw	r16, r24
    613e:	c0 e0       	ldi	r28, 0x00	; 0
    6140:	d0 e0       	ldi	r29, 0x00	; 0
    6142:	07 c0       	rjmp	.+14     	; 0x6152 <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    6144:	0e 94 14 25 	call	0x4a28	; 0x4a28 <GetVsyncFlag>
    6148:	88 23       	and	r24, r24
    614a:	e1 f3       	breq	.-8      	; 0x6144 <WaitVsync+0x10>
		ClearVsyncFlag();		
    614c:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <ClearVsyncFlag>

//Wait for the beginning of next frame (30hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6150:	21 96       	adiw	r28, 0x01	; 1
    6152:	c0 17       	cp	r28, r16
    6154:	d1 07       	cpc	r29, r17
    6156:	b4 f3       	brlt	.-20     	; 0x6144 <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    6158:	df 91       	pop	r29
    615a:	cf 91       	pop	r28
    615c:	1f 91       	pop	r17
    615e:	0f 91       	pop	r16
    6160:	08 95       	ret

00006162 <PrintChar>:
	}
	
}

//Print a single character
void PrintChar(int x,int y,char c){
    6162:	44 51       	subi	r20, 0x14	; 20
    6164:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <SetFont>

	SetFont(x,y,(c-32)+RAM_TILES_COUNT);
	
}
    6168:	08 95       	ret

0000616a <PrintRam>:
	}
	
}

//Print a string from RAM
void PrintRam(int x,int y,unsigned char *string){
    616a:	ff 92       	push	r15
    616c:	0f 93       	push	r16
    616e:	1f 93       	push	r17
    6170:	cf 93       	push	r28
    6172:	df 93       	push	r29
    6174:	ec 01       	movw	r28, r24
    6176:	f6 2e       	mov	r15, r22
    6178:	8a 01       	movw	r16, r20

	int i=0;
	char c;

	while(1){
		c=string[i++];		
    617a:	f8 01       	movw	r30, r16
    617c:	41 91       	ld	r20, Z+
    617e:	8f 01       	movw	r16, r30
		if(c!=0){
    6180:	44 23       	and	r20, r20
    6182:	41 f0       	breq	.+16     	; 0x6194 <PrintRam+0x2a>
			c=((c&127)-32) + RAM_TILES_COUNT;			
			SetFont(x++,y,c);
		}else{
			break;
    6184:	8c 2f       	mov	r24, r28

	while(1){
		c=string[i++];		
		if(c!=0){
			c=((c&127)-32) + RAM_TILES_COUNT;			
			SetFont(x++,y,c);
    6186:	21 96       	adiw	r28, 0x01	; 1
    6188:	4f 77       	andi	r20, 0x7F	; 127
    618a:	44 51       	subi	r20, 0x14	; 20
    618c:	6f 2d       	mov	r22, r15
    618e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <SetFont>
    6192:	f3 cf       	rjmp	.-26     	; 0x617a <PrintRam+0x10>
		}else{
			break;
		}
	}
	
}
    6194:	df 91       	pop	r29
    6196:	cf 91       	pop	r28
    6198:	1f 91       	pop	r17
    619a:	0f 91       	pop	r16
    619c:	ff 90       	pop	r15
    619e:	08 95       	ret

000061a0 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string
void Print(int x,int y,const char *string){
    61a0:	ff 92       	push	r15
    61a2:	0f 93       	push	r16
    61a4:	1f 93       	push	r17
    61a6:	cf 93       	push	r28
    61a8:	df 93       	push	r29
    61aa:	8c 01       	movw	r16, r24
    61ac:	f6 2e       	mov	r15, r22
    61ae:	ea 01       	movw	r28, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    61b0:	fe 01       	movw	r30, r28
    61b2:	44 91       	lpm	r20, Z+
    61b4:	21 96       	adiw	r28, 0x01	; 1
		if(c!=0){
    61b6:	44 23       	and	r20, r20
    61b8:	49 f0       	breq	.+18     	; 0x61cc <Print+0x2c>
			c=((c&127)-32) + RAM_TILES_COUNT;			
			SetFont(x++,y,c);
		}else{
			break;
    61ba:	80 2f       	mov	r24, r16

	while(1){
		c=pgm_read_byte(&(string[i++]));		
		if(c!=0){
			c=((c&127)-32) + RAM_TILES_COUNT;			
			SetFont(x++,y,c);
    61bc:	0f 5f       	subi	r16, 0xFF	; 255
    61be:	1f 4f       	sbci	r17, 0xFF	; 255
    61c0:	4f 77       	andi	r20, 0x7F	; 127
    61c2:	44 51       	subi	r20, 0x14	; 20
    61c4:	6f 2d       	mov	r22, r15
    61c6:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <SetFont>
    61ca:	f2 cf       	rjmp	.-28     	; 0x61b0 <Print+0x10>
		}else{
			break;
		}
	}
	
}
    61cc:	df 91       	pop	r29
    61ce:	cf 91       	pop	r28
    61d0:	1f 91       	pop	r17
    61d2:	0f 91       	pop	r16
    61d4:	ff 90       	pop	r15
    61d6:	08 95       	ret

000061d8 <PrintHexByte>:
		byte<<=1;
	}
}

//Print a byte in hexadecimal
void PrintHexByte(char x,char y,unsigned char byte){
    61d8:	ff 92       	push	r15
    61da:	0f 93       	push	r16
    61dc:	1f 93       	push	r17
    61de:	18 2f       	mov	r17, r24
    61e0:	06 2f       	mov	r16, r22
    61e2:	f4 2e       	mov	r15, r20
	unsigned char nibble;

	//hi nibble	
	nibble=(byte>>4);
    61e4:	42 95       	swap	r20
    61e6:	4f 70       	andi	r20, 0x0F	; 15
	if(nibble<=9){
    61e8:	4a 30       	cpi	r20, 0x0A	; 10
    61ea:	10 f4       	brcc	.+4      	; 0x61f0 <PrintHexByte+0x18>
		SetFont(x,y,nibble+CHAR_ZERO+ RAM_TILES_COUNT);
    61ec:	44 5e       	subi	r20, 0xE4	; 228
    61ee:	01 c0       	rjmp	.+2      	; 0x61f2 <PrintHexByte+0x1a>
	}else{
		SetFont(x,y,nibble+CHAR_ZERO+7+ RAM_TILES_COUNT);
    61f0:	4d 5d       	subi	r20, 0xDD	; 221
    61f2:	60 2f       	mov	r22, r16
    61f4:	81 2f       	mov	r24, r17
    61f6:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <SetFont>
	}

	//lo nibble	
	nibble=(byte&0xf);
    61fa:	4f 2d       	mov	r20, r15
    61fc:	4f 70       	andi	r20, 0x0F	; 15
    61fe:	81 2f       	mov	r24, r17
    6200:	8f 5f       	subi	r24, 0xFF	; 255
	if(nibble<=9){		
    6202:	4a 30       	cpi	r20, 0x0A	; 10
    6204:	10 f4       	brcc	.+4      	; 0x620a <PrintHexByte+0x32>
		SetFont(x+1,y,nibble+CHAR_ZERO+ RAM_TILES_COUNT);
    6206:	44 5e       	subi	r20, 0xE4	; 228
    6208:	01 c0       	rjmp	.+2      	; 0x620c <PrintHexByte+0x34>
	}else{
		SetFont(x+1,y,nibble+CHAR_ZERO+7+ RAM_TILES_COUNT);
    620a:	4d 5d       	subi	r20, 0xDD	; 221
    620c:	60 2f       	mov	r22, r16
    620e:	0e 94 f8 24 	call	0x49f0	; 0x49f0 <SetFont>
	}

}
    6212:	1f 91       	pop	r17
    6214:	0f 91       	pop	r16
    6216:	ff 90       	pop	r15
    6218:	08 95       	ret

0000621a <PrintHexLong>:
	PrintHexByte(x,y, (unsigned int)value>>8);
	PrintHexByte(x+2,y,value&0xff);
}

//Print a hexdecimal integer
void PrintHexLong(char x,char y,uint32_t value){
    621a:	cf 92       	push	r12
    621c:	df 92       	push	r13
    621e:	ef 92       	push	r14
    6220:	ff 92       	push	r15
    6222:	0f 93       	push	r16
    6224:	1f 93       	push	r17
    6226:	c8 2e       	mov	r12, r24
    6228:	d6 2e       	mov	r13, r22
    622a:	79 01       	movw	r14, r18
    622c:	8a 01       	movw	r16, r20
	PrintHexByte(x,y, value>>24);	
    622e:	45 2f       	mov	r20, r21
    6230:	55 27       	eor	r21, r21
    6232:	66 27       	eor	r22, r22
    6234:	77 27       	eor	r23, r23
    6236:	6d 2d       	mov	r22, r13
    6238:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <PrintHexByte>
	PrintHexByte(x+2,y, value>>16);
    623c:	a8 01       	movw	r20, r16
    623e:	66 27       	eor	r22, r22
    6240:	77 27       	eor	r23, r23
    6242:	6d 2d       	mov	r22, r13
    6244:	8c 2d       	mov	r24, r12
    6246:	8e 5f       	subi	r24, 0xFE	; 254
    6248:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <PrintHexByte>
	PrintHexByte(x+4,y, value>>8);
    624c:	77 27       	eor	r23, r23
    624e:	61 2f       	mov	r22, r17
    6250:	50 2f       	mov	r21, r16
    6252:	4f 2d       	mov	r20, r15
    6254:	6d 2d       	mov	r22, r13
    6256:	8c 2d       	mov	r24, r12
    6258:	8c 5f       	subi	r24, 0xFC	; 252
    625a:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <PrintHexByte>
	PrintHexByte(x+6,y,value&0xff);
    625e:	4e 2d       	mov	r20, r14
    6260:	6d 2d       	mov	r22, r13
    6262:	8c 2d       	mov	r24, r12
    6264:	8a 5f       	subi	r24, 0xFA	; 250
    6266:	0e 94 ec 30 	call	0x61d8	; 0x61d8 <PrintHexByte>
}
    626a:	1f 91       	pop	r17
    626c:	0f 91       	pop	r16
    626e:	ff 90       	pop	r15
    6270:	ef 90       	pop	r14
    6272:	df 90       	pop	r13
    6274:	cf 90       	pop	r12
    6276:	08 95       	ret

00006278 <ProcessSprites>:
	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
	}


	void ProcessSprites(){
    6278:	2f 92       	push	r2
    627a:	3f 92       	push	r3
    627c:	4f 92       	push	r4
    627e:	5f 92       	push	r5
    6280:	6f 92       	push	r6
    6282:	7f 92       	push	r7
    6284:	8f 92       	push	r8
    6286:	9f 92       	push	r9
    6288:	af 92       	push	r10
    628a:	bf 92       	push	r11
    628c:	cf 92       	push	r12
    628e:	df 92       	push	r13
    6290:	ef 92       	push	r14
    6292:	ff 92       	push	r15
    6294:	0f 93       	push	r16
    6296:	1f 93       	push	r17
    6298:	df 93       	push	r29
    629a:	cf 93       	push	r28
    629c:	00 d0       	rcall	.+0      	; 0x629e <ProcessSprites+0x26>
    629e:	0f 92       	push	r0
    62a0:	cd b7       	in	r28, 0x3d	; 61
    62a2:	de b7       	in	r29, 0x3e	; 62

		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1;
		unsigned int ramPtr;


		free_tile_index=0;
    62a4:	10 92 a1 0a 	sts	0x0AA1, r1


		if(!spritesOn) return;
    62a8:	80 91 00 01 	lds	r24, 0x0100
    62ac:	88 23       	and	r24, r24
    62ae:	09 f4       	brne	.+2      	; 0x62b2 <ProcessSprites+0x3a>
    62b0:	a1 c0       	rjmp	.+322    	; 0x63f4 <ProcessSprites+0x17c>
    62b2:	0f e8       	ldi	r16, 0x8F	; 143
    62b4:	80 2e       	mov	r8, r16
    62b6:	0a e0       	ldi	r16, 0x0A	; 10
    62b8:	90 2e       	mov	r9, r16
    62ba:	77 24       	eor	r7, r7
		
		for(i=0;i<MAX_SPRITES;i++){
			by=sprites[i].y;
    62bc:	f4 01       	movw	r30, r8
    62be:	91 81       	ldd	r25, Z+1	; 0x01
			if(by<(SCREEN_TILES_V*TILE_HEIGHT)){
    62c0:	98 3d       	cpi	r25, 0xD8	; 216
    62c2:	08 f0       	brcs	.+2      	; 0x62c6 <ProcessSprites+0x4e>
    62c4:	78 c0       	rjmp	.+240    	; 0x63b6 <ProcessSprites+0x13e>
				tx=1;
				ty=1;
				//get the BG tiles that are overlapped by the sprite
				bx=sprites[i].x>>3;
    62c6:	80 81       	ld	r24, Z
    62c8:	38 2f       	mov	r19, r24
    62ca:	36 95       	lsr	r19
    62cc:	36 95       	lsr	r19
    62ce:	36 95       	lsr	r19
				dx=sprites[i].x&0x7;
    62d0:	28 2f       	mov	r18, r24
    62d2:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    62d4:	19 f0       	breq	.+6      	; 0x62dc <ProcessSprites+0x64>
    62d6:	f2 e0       	ldi	r31, 0x02	; 2
    62d8:	f9 83       	std	Y+1, r31	; 0x01
    62da:	02 c0       	rjmp	.+4      	; 0x62e0 <ProcessSprites+0x68>
    62dc:	41 e0       	ldi	r20, 0x01	; 1
    62de:	49 83       	std	Y+1, r20	; 0x01

				by=sprites[i].y>>3;			
    62e0:	89 2f       	mov	r24, r25
    62e2:	86 95       	lsr	r24
    62e4:	86 95       	lsr	r24
    62e6:	86 95       	lsr	r24
				dy=sprites[i].y&0x7;		
    62e8:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    62ea:	19 f0       	breq	.+6      	; 0x62f2 <ProcessSprites+0x7a>
    62ec:	12 e0       	ldi	r17, 0x02	; 2
    62ee:	61 2e       	mov	r6, r17
    62f0:	02 c0       	rjmp	.+4      	; 0x62f6 <ProcessSprites+0x7e>
    62f2:	66 24       	eor	r6, r6
    62f4:	63 94       	inc	r6
							free_tile_index++;										
						}
					
						if(bt<RAM_TILES_COUNT){

							BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);
    62f6:	b9 2e       	mov	r11, r25
    62f8:	aa 24       	eor	r10, r10
    62fa:	15 01       	movw	r2, r10
    62fc:	22 0e       	add	r2, r18
    62fe:	31 1c       	adc	r3, r1
    6300:	e8 2f       	mov	r30, r24
    6302:	f0 e0       	ldi	r31, 0x00	; 0
    6304:	b5 e0       	ldi	r27, 0x05	; 5
    6306:	ee 0f       	add	r30, r30
    6308:	ff 1f       	adc	r31, r31
    630a:	ba 95       	dec	r27
    630c:	e1 f7       	brne	.-8      	; 0x6306 <ProcessSprites+0x8e>
    630e:	e3 0f       	add	r30, r19
    6310:	f1 1d       	adc	r31, r1
    6312:	fb 83       	std	Y+3, r31	; 0x03
    6314:	ea 83       	std	Y+2, r30	; 0x02
    6316:	cc 24       	eor	r12, r12
    6318:	dd 24       	eor	r13, r13
    631a:	40 c0       	rjmp	.+128    	; 0x639c <ProcessSprites+0x124>
    631c:	2a 81       	ldd	r18, Y+2	; 0x02
    631e:	3b 81       	ldd	r19, Y+3	; 0x03
    6320:	20 0f       	add	r18, r16
    6322:	31 1f       	adc	r19, r17
				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){

						ramPtr=((by+y)*VRAM_TILES_H)+bx+x;
						bt=vram[ramPtr];
    6324:	f7 01       	movw	r30, r14
    6326:	70 81       	ld	r23, Z

						if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    6328:	7c 30       	cpi	r23, 0x0C	; 12
    632a:	e8 f0       	brcs	.+58     	; 0x6366 <ProcessSprites+0xee>
    632c:	60 91 a1 0a 	lds	r22, 0x0AA1
    6330:	6c 30       	cpi	r22, 0x0C	; 12
    6332:	08 f5       	brcc	.+66     	; 0x6376 <ProcessSprites+0xfe>

							//tile is mapped to flash. Copy it to next free RAM tile.
							//if no ram free ignore tile
							ram_tiles_restore[free_tile_index].addr=ramPtr;
    6334:	86 2f       	mov	r24, r22
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	fc 01       	movw	r30, r24
    633a:	ee 0f       	add	r30, r30
    633c:	ff 1f       	adc	r31, r31
    633e:	e8 0f       	add	r30, r24
    6340:	f9 1f       	adc	r31, r25
    6342:	e0 52       	subi	r30, 0x20	; 32
    6344:	f8 4f       	sbci	r31, 0xF8	; 248
    6346:	31 83       	std	Z+1, r19	; 0x01
    6348:	20 83       	st	Z, r18
							ram_tiles_restore[free_tile_index].tileIndex=bt;
    634a:	72 83       	std	Z+2, r23	; 0x02
														
							CopyTileToRam(bt,free_tile_index);
    634c:	87 2f       	mov	r24, r23
    634e:	0e 94 29 25 	call	0x4a52	; 0x4a52 <CopyTileToRam>

							vram[ramPtr]=free_tile_index;
    6352:	70 91 a1 0a 	lds	r23, 0x0AA1
    6356:	f7 01       	movw	r30, r14
    6358:	70 83       	st	Z, r23
							bt=free_tile_index;
							free_tile_index++;										
    635a:	7f 5f       	subi	r23, 0xFF	; 255
    635c:	70 93 a1 0a 	sts	0x0AA1, r23
    6360:	71 50       	subi	r23, 0x01	; 1
						}
					
						if(bt<RAM_TILES_COUNT){
    6362:	7c 30       	cpi	r23, 0x0C	; 12
    6364:	40 f4       	brcc	.+16     	; 0x6376 <ProcessSprites+0xfe>

							BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);
    6366:	a8 01       	movw	r20, r16
    6368:	44 0d       	add	r20, r4
    636a:	55 1d       	adc	r21, r5
    636c:	91 01       	movw	r18, r2
    636e:	67 2f       	mov	r22, r23
    6370:	87 2d       	mov	r24, r7
    6372:	0e 94 ba 25 	call	0x4b74	; 0x4b74 <BlitSprite>
    6376:	0f 5f       	subi	r16, 0xFF	; 255
    6378:	1f 4f       	sbci	r17, 0xFF	; 255
    637a:	08 94       	sec
    637c:	e1 1c       	adc	r14, r1
    637e:	f1 1c       	adc	r15, r1
				dy=sprites[i].y&0x7;		
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    6380:	f9 81       	ldd	r31, Y+1	; 0x01
    6382:	0f 17       	cp	r16, r31
    6384:	58 f2       	brcs	.-106    	; 0x631c <ProcessSprites+0xa4>
    6386:	08 94       	sec
    6388:	c1 1c       	adc	r12, r1
    638a:	d1 1c       	adc	r13, r1
    638c:	4a 81       	ldd	r20, Y+2	; 0x02
    638e:	5b 81       	ldd	r21, Y+3	; 0x03
    6390:	40 5e       	subi	r20, 0xE0	; 224
    6392:	5f 4f       	sbci	r21, 0xFF	; 255
    6394:	5b 83       	std	Y+3, r21	; 0x03
    6396:	4a 83       	std	Y+2, r20	; 0x02

				by=sprites[i].y>>3;			
				dy=sprites[i].y&0x7;		
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    6398:	c6 14       	cp	r12, r6
    639a:	68 f4       	brcc	.+26     	; 0x63b6 <ProcessSprites+0x13e>
							free_tile_index++;										
						}
					
						if(bt<RAM_TILES_COUNT){

							BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);
    639c:	5c 2c       	mov	r5, r12
    639e:	44 24       	eor	r4, r4
    63a0:	50 e8       	ldi	r21, 0x80	; 128
    63a2:	e5 2e       	mov	r14, r21
    63a4:	51 e0       	ldi	r21, 0x01	; 1
    63a6:	f5 2e       	mov	r15, r21
    63a8:	8a 81       	ldd	r24, Y+2	; 0x02
    63aa:	9b 81       	ldd	r25, Y+3	; 0x03
    63ac:	e8 0e       	add	r14, r24
    63ae:	f9 1e       	adc	r15, r25
    63b0:	00 e0       	ldi	r16, 0x00	; 0
    63b2:	10 e0       	ldi	r17, 0x00	; 0
    63b4:	b3 cf       	rjmp	.-154    	; 0x631c <ProcessSprites+0xa4>
		free_tile_index=0;


		if(!spritesOn) return;
		
		for(i=0;i<MAX_SPRITES;i++){
    63b6:	73 94       	inc	r7
    63b8:	e4 e0       	ldi	r30, 0x04	; 4
    63ba:	f0 e0       	ldi	r31, 0x00	; 0
    63bc:	8e 0e       	add	r8, r30
    63be:	9f 1e       	adc	r9, r31
    63c0:	f4 e0       	ldi	r31, 0x04	; 4
    63c2:	7f 16       	cp	r7, r31
    63c4:	09 f0       	breq	.+2      	; 0x63c8 <ProcessSprites+0x150>
    63c6:	7a cf       	rjmp	.-268    	; 0x62bc <ProcessSprites+0x44>
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    63c8:	30 91 a1 0a 	lds	r19, 0x0AA1
    63cc:	20 e0       	ldi	r18, 0x00	; 0
    63ce:	10 c0       	rjmp	.+32     	; 0x63f0 <ProcessSprites+0x178>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    63d0:	82 2f       	mov	r24, r18
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	fc 01       	movw	r30, r24
    63d6:	ee 0f       	add	r30, r30
    63d8:	ff 1f       	adc	r31, r31
    63da:	e8 0f       	add	r30, r24
    63dc:	f9 1f       	adc	r31, r25
    63de:	e0 52       	subi	r30, 0x20	; 32
    63e0:	f8 4f       	sbci	r31, 0xF8	; 248
    63e2:	a0 81       	ld	r26, Z
    63e4:	b1 81       	ldd	r27, Z+1	; 0x01
    63e6:	a0 58       	subi	r26, 0x80	; 128
    63e8:	be 4f       	sbci	r27, 0xFE	; 254
    63ea:	82 81       	ldd	r24, Z+2	; 0x02
    63ec:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    63ee:	2f 5f       	subi	r18, 0xFF	; 255
    63f0:	23 17       	cp	r18, r19
    63f2:	70 f3       	brcs	.-36     	; 0x63d0 <ProcessSprites+0x158>


		//restore BG tiles
		RestoreBackground();

	}
    63f4:	0f 90       	pop	r0
    63f6:	0f 90       	pop	r0
    63f8:	0f 90       	pop	r0
    63fa:	cf 91       	pop	r28
    63fc:	df 91       	pop	r29
    63fe:	1f 91       	pop	r17
    6400:	0f 91       	pop	r16
    6402:	ff 90       	pop	r15
    6404:	ef 90       	pop	r14
    6406:	df 90       	pop	r13
    6408:	cf 90       	pop	r12
    640a:	bf 90       	pop	r11
    640c:	af 90       	pop	r10
    640e:	9f 90       	pop	r9
    6410:	8f 90       	pop	r8
    6412:	7f 90       	pop	r7
    6414:	6f 90       	pop	r6
    6416:	5f 90       	pop	r5
    6418:	4f 90       	pop	r4
    641a:	3f 90       	pop	r3
    641c:	2f 90       	pop	r2
    641e:	08 95       	ret

00006420 <mmc_mixerGetCurrentSector>:
		}		
	}	
	mmc_mixer_active=false;
}

uint32_t mmc_mixerGetCurrentSector(){
    6420:	20 91 a5 0a 	lds	r18, 0x0AA5
    6424:	30 91 a6 0a 	lds	r19, 0x0AA6
    6428:	40 91 a7 0a 	lds	r20, 0x0AA7
    642c:	50 91 a8 0a 	lds	r21, 0x0AA8
	return mmc_mixer_sector;
}
    6430:	b9 01       	movw	r22, r18
    6432:	ca 01       	movw	r24, r20
    6434:	08 95       	ret

00006436 <spi_byte>:
static uint8_t spi_byte(uint8_t byte) __attribute__((noinline));

extern unsigned char internal_spi_byte(unsigned char c);

static uint8_t spi_byte(uint8_t byte)
{
    6436:	0e 94 30 26 	call	0x4c60	; 0x4c60 <internal_spi_byte>
	//while(!(SPSR & (1<<SPIF)))
	//{}
	//return SPDR;
	
	return internal_spi_byte(byte);
}
    643a:	08 95       	ret

0000643c <mmc_clock_and_release>:
/** Finish Clocking and Release card.
	Send 10 clocks to the MMC/SD card
 	and release the CS line 
*/
void mmc_clock_and_release(void)
{
    643c:	1f 93       	push	r17
    643e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	// SD cards require at least 8 final clocks
	for(i=0;i<10;i++)
		spi_byte(0xff);	
    6440:	8f ef       	ldi	r24, 0xFF	; 255
    6442:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
void mmc_clock_and_release(void)
{
	uint8_t i;

	// SD cards require at least 8 final clocks
	for(i=0;i<10;i++)
    6446:	1f 5f       	subi	r17, 0xFF	; 255
    6448:	1a 30       	cpi	r17, 0x0A	; 10
    644a:	d1 f7       	brne	.-12     	; 0x6440 <mmc_clock_and_release+0x4>
		spi_byte(0xff);	

    MMC_CS_PORT |= (1 << MMC_CS);	// release CS
    644c:	5e 9a       	sbi	0x0b, 6	; 11
}
    644e:	1f 91       	pop	r17
    6450:	08 95       	ret

00006452 <mmc_datatoken>:
	Wait for and return a data token from the MMC/SD card
	\return The received token or 0xFF if timeout
*/
unsigned int data_delay;
uint8_t mmc_datatoken(void)
{
    6452:	cf 93       	push	r28
    6454:	df 93       	push	r29
    6456:	cf ef       	ldi	r28, 0xFF	; 255
    6458:	df ef       	ldi	r29, 0xFF	; 255
    645a:	8f ef       	ldi	r24, 0xFF	; 255
    645c:	05 c0       	rjmp	.+10     	; 0x6468 <mmc_datatoken+0x16>
	uint16_t i = 0xffff;
	uint8_t b = 0xff;

	while ((b != 0xfe) && (--i)) 
	{
		b = spi_byte(0xff);
    645e:	8f ef       	ldi	r24, 0xFF	; 255
    6460:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
uint8_t mmc_datatoken(void)
{
	uint16_t i = 0xffff;
	uint8_t b = 0xff;

	while ((b != 0xfe) && (--i)) 
    6464:	8e 3f       	cpi	r24, 0xFE	; 254
    6466:	11 f0       	breq	.+4      	; 0x646c <mmc_datatoken+0x1a>
    6468:	21 97       	sbiw	r28, 0x01	; 1
    646a:	c9 f7       	brne	.-14     	; 0x645e <mmc_datatoken+0xc>
	{
		b = spi_byte(0xff);
	}
	data_delay=0xffff-i;
    646c:	c0 95       	com	r28
    646e:	d0 95       	com	r29
    6470:	d0 93 aa 0a 	sts	0x0AAA, r29
    6474:	c0 93 a9 0a 	sts	0x0AA9, r28
	return b;
}
    6478:	df 91       	pop	r29
    647a:	cf 91       	pop	r28
    647c:	08 95       	ret

0000647e <mmc_processMixer>:



//call once on each vsync
void mmc_processMixer()
{
    647e:	cf 93       	push	r28
    6480:	df 93       	push	r29
	static int mixerRead=0,sectorRead=0;
	int retVal=0;
	uint8_t *buf=mix_buf;	


	if(mmc_mixer_active){
    6482:	80 91 65 0a 	lds	r24, 0x0A65
    6486:	88 23       	and	r24, r24
    6488:	09 f4       	brne	.+2      	; 0x648c <mmc_processMixer+0xe>
    648a:	68 c0       	rjmp	.+208    	; 0x655c <mmc_processMixer+0xde>

		if(mix_bank==1){
    648c:	80 91 3a 0a 	lds	r24, 0x0A3A
    6490:	81 30       	cpi	r24, 0x01	; 1
    6492:	19 f4       	brne	.+6      	; 0x649a <mmc_processMixer+0x1c>
    6494:	c2 e3       	ldi	r28, 0x32	; 50
    6496:	d9 e0       	ldi	r29, 0x09	; 9
    6498:	02 c0       	rjmp	.+4      	; 0x649e <mmc_processMixer+0x20>
    649a:	cc e2       	ldi	r28, 0x2C	; 44
    649c:	d8 e0       	ldi	r29, 0x08	; 8
		}


		do{
		
			if(sectorRead==0){				
    649e:	80 91 66 0a 	lds	r24, 0x0A66
    64a2:	90 91 67 0a 	lds	r25, 0x0A67
    64a6:	89 2b       	or	r24, r25
    64a8:	79 f4       	brne	.+30     	; 0x64c8 <mmc_processMixer+0x4a>
				if (mmc_datatoken() != 0xfe)	// if no valid token
    64aa:	0e 94 29 32 	call	0x6452	; 0x6452 <mmc_datatoken>
    64ae:	8e 3f       	cpi	r24, 0xFE	; 254
    64b0:	59 f0       	breq	.+22     	; 0x64c8 <mmc_processMixer+0x4a>
				{
				    mmc_clock_and_release();	// cleanup and	
    64b2:	0e 94 1e 32 	call	0x643c	; 0x643c <mmc_clock_and_release>
					Print(10,10,PSTR("TOKEN!"));
    64b6:	40 e7       	ldi	r20, 0x70	; 112
    64b8:	50 e0       	ldi	r21, 0x00	; 0
    64ba:	6a e0       	ldi	r22, 0x0A	; 10
    64bc:	70 e0       	ldi	r23, 0x00	; 0
    64be:	8a e0       	ldi	r24, 0x0A	; 10
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <Print>
    64c6:	4a c0       	rjmp	.+148    	; 0x655c <mmc_processMixer+0xde>
				}
			}

			do{			// read sector data

		    	*buf++=spi_byte(0xff);
    64c8:	8f ef       	ldi	r24, 0xFF	; 255
    64ca:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
    64ce:	89 93       	st	Y+, r24
			 
				mixerRead++;
    64d0:	80 91 68 0a 	lds	r24, 0x0A68
    64d4:	90 91 69 0a 	lds	r25, 0x0A69
    64d8:	01 96       	adiw	r24, 0x01	; 1
    64da:	90 93 69 0a 	sts	0x0A69, r25
    64de:	80 93 68 0a 	sts	0x0A68, r24
				sectorRead++;
    64e2:	20 91 66 0a 	lds	r18, 0x0A66
    64e6:	30 91 67 0a 	lds	r19, 0x0A67
    64ea:	2f 5f       	subi	r18, 0xFF	; 255
    64ec:	3f 4f       	sbci	r19, 0xFF	; 255
    64ee:	30 93 67 0a 	sts	0x0A67, r19
    64f2:	20 93 66 0a 	sts	0x0A66, r18

			}while(mixerRead<MIX_BANK_SIZE && sectorRead<512);
    64f6:	86 50       	subi	r24, 0x06	; 6
    64f8:	91 40       	sbci	r25, 0x01	; 1
    64fa:	24 f4       	brge	.+8      	; 0x6504 <mmc_processMixer+0x86>
    64fc:	82 e0       	ldi	r24, 0x02	; 2
    64fe:	20 30       	cpi	r18, 0x00	; 0
    6500:	38 07       	cpc	r19, r24
    6502:	14 f3       	brlt	.-60     	; 0x64c8 <mmc_processMixer+0x4a>
	

			if(sectorRead==512){
    6504:	20 50       	subi	r18, 0x00	; 0
    6506:	32 40       	sbci	r19, 0x02	; 2
    6508:	e9 f4       	brne	.+58     	; 0x6544 <mmc_processMixer+0xc6>
				spi_byte(0xff);					// ignore dummy checksum
    650a:	8f ef       	ldi	r24, 0xFF	; 255
    650c:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
				spi_byte(0xff);					// ignore dummy checksum
    6510:	8f ef       	ldi	r24, 0xFF	; 255
    6512:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
			    
			
				mmc_mixer_sector++;
    6516:	80 91 a5 0a 	lds	r24, 0x0AA5
    651a:	90 91 a6 0a 	lds	r25, 0x0AA6
    651e:	a0 91 a7 0a 	lds	r26, 0x0AA7
    6522:	b0 91 a8 0a 	lds	r27, 0x0AA8
    6526:	01 96       	adiw	r24, 0x01	; 1
    6528:	a1 1d       	adc	r26, r1
    652a:	b1 1d       	adc	r27, r1
    652c:	80 93 a5 0a 	sts	0x0AA5, r24
    6530:	90 93 a6 0a 	sts	0x0AA6, r25
    6534:	a0 93 a7 0a 	sts	0x0AA7, r26
    6538:	b0 93 a8 0a 	sts	0x0AA8, r27
				sectorRead=0;
    653c:	10 92 67 0a 	sts	0x0A67, r1
    6540:	10 92 66 0a 	sts	0x0A66, r1
			}

			if(mixerRead==MIX_BANK_SIZE){
    6544:	80 91 68 0a 	lds	r24, 0x0A68
    6548:	90 91 69 0a 	lds	r25, 0x0A69
    654c:	86 50       	subi	r24, 0x06	; 6
    654e:	91 40       	sbci	r25, 0x01	; 1
    6550:	09 f0       	breq	.+2      	; 0x6554 <mmc_processMixer+0xd6>
    6552:	a5 cf       	rjmp	.-182    	; 0x649e <mmc_processMixer+0x20>
				mixerRead=0;
    6554:	10 92 69 0a 	sts	0x0A69, r1
    6558:	10 92 68 0a 	sts	0x0A68, r1

		}while(retVal==0);
	}
	

}
    655c:	df 91       	pop	r29
    655e:	cf 91       	pop	r28
    6560:	08 95       	ret

00006562 <mmc_get>:
/** Get Token.
	Wait for and return a non-ff token from the MMC/SD card
	\return The received token or 0xFF if timeout
*/
uint8_t mmc_get(void)
{
    6562:	cf 93       	push	r28
    6564:	df 93       	push	r29
    6566:	cf ef       	ldi	r28, 0xFF	; 255
    6568:	df ef       	ldi	r29, 0xFF	; 255
    656a:	05 c0       	rjmp	.+10     	; 0x6576 <mmc_get+0x14>
	uint16_t i = 0xffff;
	uint8_t b = 0xff;

	while ((b == 0xff) && (--i)) 
	{
		b = spi_byte(0xff);
    656c:	8f ef       	ldi	r24, 0xFF	; 255
    656e:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
uint8_t mmc_get(void)
{
	uint16_t i = 0xffff;
	uint8_t b = 0xff;

	while ((b == 0xff) && (--i)) 
    6572:	8f 3f       	cpi	r24, 0xFF	; 255
    6574:	19 f4       	brne	.+6      	; 0x657c <mmc_get+0x1a>
    6576:	21 97       	sbiw	r28, 0x01	; 1
    6578:	c9 f7       	brne	.-14     	; 0x656c <mmc_get+0xa>
    657a:	8f ef       	ldi	r24, 0xFF	; 255
	{
		b = spi_byte(0xff);
	}
	return b;

}
    657c:	df 91       	pop	r29
    657e:	cf 91       	pop	r28
    6580:	08 95       	ret

00006582 <mmc_send_command>:
	\param command	Command to send
	\param px	Command parameter 1
	\param py	Command parameter 2
*/
void mmc_send_command(uint8_t command, uint16_t px, uint16_t py)
{
    6582:	df 92       	push	r13
    6584:	ef 92       	push	r14
    6586:	ff 92       	push	r15
    6588:	0f 93       	push	r16
    658a:	1f 93       	push	r17
    658c:	18 2f       	mov	r17, r24
    658e:	e6 2e       	mov	r14, r22
    6590:	07 2f       	mov	r16, r23
    6592:	d4 2e       	mov	r13, r20
    6594:	f5 2e       	mov	r15, r21
	register union u16convert r;

	MMC_CS_PORT &= ~(1 << MMC_CS);	// enable CS
    6596:	5e 98       	cbi	0x0b, 6	; 11

	spi_byte(0xff);			// dummy byte
    6598:	8f ef       	ldi	r24, 0xFF	; 255
    659a:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>

	spi_byte(command | 0x40);
    659e:	81 2f       	mov	r24, r17
    65a0:	80 64       	ori	r24, 0x40	; 64
    65a2:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>

	r.value = px;
	spi_byte(r.bytes.high);	// high byte of param x
    65a6:	80 2f       	mov	r24, r16
    65a8:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
	spi_byte(r.bytes.low);	// low byte of param x
    65ac:	8e 2d       	mov	r24, r14
    65ae:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>

	r.value = py;
	spi_byte(r.bytes.high);	// high byte of param y
    65b2:	8f 2d       	mov	r24, r15
    65b4:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
	spi_byte(r.bytes.low);	// low byte of param y
    65b8:	8d 2d       	mov	r24, r13
    65ba:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>

	spi_byte(0x95);			// correct CRC for first command in SPI          
    65be:	85 e9       	ldi	r24, 0x95	; 149
    65c0:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
							// after that CRC is ignored, so no problem with 
							// always sending 0x95                           
	spi_byte(0xff);			// ignore return byte
    65c4:	8f ef       	ldi	r24, 0xFF	; 255
    65c6:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
}
    65ca:	1f 91       	pop	r17
    65cc:	0f 91       	pop	r16
    65ce:	ff 90       	pop	r15
    65d0:	ef 90       	pop	r14
    65d2:	df 90       	pop	r13
    65d4:	08 95       	ret

000065d6 <mmc_mixerStop>:
	mmc_mixer_sector=lba;
	mmc_send_command(18,(mmc_mixer_sector>>7) & 0xffff, (mmc_mixer_sector<<9) & 0xffff);		
	mmc_mixer_active=true;
}

void mmc_mixerStop(){
    65d6:	80 91 65 0a 	lds	r24, 0x0A65
    65da:	88 23       	and	r24, r24
    65dc:	89 f0       	breq	.+34     	; 0x6600 <mmc_mixerStop+0x2a>
	if(mmc_mixer_active==true){
		mmc_send_command(12,0,0); //stop transfers
    65de:	40 e0       	ldi	r20, 0x00	; 0
    65e0:	50 e0       	ldi	r21, 0x00	; 0
    65e2:	60 e0       	ldi	r22, 0x00	; 0
    65e4:	70 e0       	ldi	r23, 0x00	; 0
    65e6:	8c e0       	ldi	r24, 0x0C	; 12
    65e8:	0e 94 c1 32 	call	0x6582	; 0x6582 <mmc_send_command>
		mmc_clock_and_release();
    65ec:	0e 94 1e 32 	call	0x643c	; 0x643c <mmc_clock_and_release>
    65f0:	ec e2       	ldi	r30, 0x2C	; 44
    65f2:	f8 e0       	ldi	r31, 0x08	; 8

		//Initialize the mixer buffer
		for(int i=0;i<MIX_BANK_SIZE*2;i++){
			mix_buf[i]=0x80;
    65f4:	80 e8       	ldi	r24, 0x80	; 128
    65f6:	81 93       	st	Z+, r24
	if(mmc_mixer_active==true){
		mmc_send_command(12,0,0); //stop transfers
		mmc_clock_and_release();

		//Initialize the mixer buffer
		for(int i=0;i<MIX_BANK_SIZE*2;i++){
    65f8:	9a e0       	ldi	r25, 0x0A	; 10
    65fa:	e8 33       	cpi	r30, 0x38	; 56
    65fc:	f9 07       	cpc	r31, r25
    65fe:	d9 f7       	brne	.-10     	; 0x65f6 <mmc_mixerStop+0x20>
			mix_buf[i]=0x80;
		}		
	}	
	mmc_mixer_active=false;
    6600:	10 92 65 0a 	sts	0x0A65, r1
}
    6604:	08 95       	ret

00006606 <mmc_mixerStart>:
}




void mmc_mixerStart(uint32_t lba){
    6606:	ef 92       	push	r14
    6608:	ff 92       	push	r15
    660a:	0f 93       	push	r16
    660c:	1f 93       	push	r17
    660e:	7b 01       	movw	r14, r22
    6610:	8c 01       	movw	r16, r24
	if(mmc_mixer_active==true){
    6612:	80 91 65 0a 	lds	r24, 0x0A65
    6616:	88 23       	and	r24, r24
    6618:	49 f0       	breq	.+18     	; 0x662c <mmc_mixerStart+0x26>
		mmc_send_command(12,0,0); //stop current transfer
    661a:	40 e0       	ldi	r20, 0x00	; 0
    661c:	50 e0       	ldi	r21, 0x00	; 0
    661e:	60 e0       	ldi	r22, 0x00	; 0
    6620:	70 e0       	ldi	r23, 0x00	; 0
    6622:	8c e0       	ldi	r24, 0x0C	; 12
    6624:	0e 94 c1 32 	call	0x6582	; 0x6582 <mmc_send_command>
		mmc_clock_and_release();
    6628:	0e 94 1e 32 	call	0x643c	; 0x643c <mmc_clock_and_release>
	}
		
	// send the multiple block read command and logical sector address
	mmc_mixer_sector=lba;
    662c:	e0 92 a5 0a 	sts	0x0AA5, r14
    6630:	f0 92 a6 0a 	sts	0x0AA6, r15
    6634:	00 93 a7 0a 	sts	0x0AA7, r16
    6638:	10 93 a8 0a 	sts	0x0AA8, r17
	mmc_send_command(18,(mmc_mixer_sector>>7) & 0xffff, (mmc_mixer_sector<<9) & 0xffff);		
    663c:	40 91 a5 0a 	lds	r20, 0x0AA5
    6640:	50 91 a6 0a 	lds	r21, 0x0AA6
    6644:	60 91 a7 0a 	lds	r22, 0x0AA7
    6648:	70 91 a8 0a 	lds	r23, 0x0AA8
    664c:	80 91 a5 0a 	lds	r24, 0x0AA5
    6650:	90 91 a6 0a 	lds	r25, 0x0AA6
    6654:	a0 91 a7 0a 	lds	r26, 0x0AA7
    6658:	b0 91 a8 0a 	lds	r27, 0x0AA8
    665c:	54 2f       	mov	r21, r20
    665e:	44 27       	eor	r20, r20
    6660:	55 0f       	add	r21, r21
    6662:	27 e0       	ldi	r18, 0x07	; 7
    6664:	b6 95       	lsr	r27
    6666:	a7 95       	ror	r26
    6668:	97 95       	ror	r25
    666a:	87 95       	ror	r24
    666c:	2a 95       	dec	r18
    666e:	d1 f7       	brne	.-12     	; 0x6664 <mmc_mixerStart+0x5e>
    6670:	bc 01       	movw	r22, r24
    6672:	82 e1       	ldi	r24, 0x12	; 18
    6674:	0e 94 c1 32 	call	0x6582	; 0x6582 <mmc_send_command>
	mmc_mixer_active=true;
    6678:	81 e0       	ldi	r24, 0x01	; 1
    667a:	80 93 65 0a 	sts	0x0A65, r24
}
    667e:	1f 91       	pop	r17
    6680:	0f 91       	pop	r16
    6682:	ff 90       	pop	r15
    6684:	ef 90       	pop	r14
    6686:	08 95       	ret

00006688 <mmc_init>:
	Initialize I/O ports for the MMC/SD interface and 
	send init commands to the MMC/SD card
	\return 0 on success, other values on error 
*/
uint8_t mmc_init(void)
{
    6688:	cf 93       	push	r28
    668a:	df 93       	push	r29
	int i;


	// setup I/O ports 

	SPI_PORT &= ~((1 << MMC_SCK) | (1 << MMC_MOSI));	// low bits
    668c:	85 b1       	in	r24, 0x05	; 5
    668e:	8f 75       	andi	r24, 0x5F	; 95
    6690:	85 b9       	out	0x05, r24	; 5
	SPI_PORT |= (1 << MMC_MISO);						// high bits
    6692:	2e 9a       	sbi	0x05, 6	; 5
	SPI_DDR  |= (1<<MMC_SCK) | (1<<MMC_MOSI);			// direction
    6694:	84 b1       	in	r24, 0x04	; 4
    6696:	80 6a       	ori	r24, 0xA0	; 160
    6698:	84 b9       	out	0x04, r24	; 4


	MMC_CS_PORT |= (1 << MMC_CS);	// Initial level is high	
    669a:	5e 9a       	sbi	0x0b, 6	; 11
	MMC_CS_DIR  |= (1 << MMC_CS);	// Direction is output
    669c:	56 9a       	sbi	0x0a, 6	; 10
	// also need to set SS as output
#if defined(__AVR_ATmega8__)
	// is already set as CS, but we set it again to accomodate for other boards 
	SPI_DDR |= (1<<2);
#else
	SPI_DDR |= (1<<0);			// assume it's bit0 (mega128, portB and others)
    669e:	20 9a       	sbi	0x04, 0	; 4
#endif

	SPCR = (1<<MSTR)|(1<<SPE);	// enable SPI interface
    66a0:	80 e5       	ldi	r24, 0x50	; 80
    66a2:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1;					// set double speed	
    66a4:	81 e0       	ldi	r24, 0x01	; 1
    66a6:	8d bd       	out	0x2d, r24	; 45
    66a8:	c0 e0       	ldi	r28, 0x00	; 0
    66aa:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<10;i++)			// send 80 clocks while card power stabilizes
		spi_byte(0xff);
    66ac:	8f ef       	ldi	r24, 0xFF	; 255
    66ae:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
#endif

	SPCR = (1<<MSTR)|(1<<SPE);	// enable SPI interface
	SPSR = 1;					// set double speed	

	for(i=0;i<10;i++)			// send 80 clocks while card power stabilizes
    66b2:	21 96       	adiw	r28, 0x01	; 1
    66b4:	ca 30       	cpi	r28, 0x0A	; 10
    66b6:	d1 05       	cpc	r29, r1
    66b8:	c9 f7       	brne	.-14     	; 0x66ac <mmc_init+0x24>
		spi_byte(0xff);

	mmc_send_command(0,0,0);	// send CMD0 - reset card
    66ba:	40 e0       	ldi	r20, 0x00	; 0
    66bc:	50 e0       	ldi	r21, 0x00	; 0
    66be:	60 e0       	ldi	r22, 0x00	; 0
    66c0:	70 e0       	ldi	r23, 0x00	; 0
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	0e 94 c1 32 	call	0x6582	; 0x6582 <mmc_send_command>

	if (mmc_get() != 1)			// if no valid response code
    66c8:	0e 94 b1 32 	call	0x6562	; 0x6562 <mmc_get>
    66cc:	81 30       	cpi	r24, 0x01	; 1
    66ce:	21 f0       	breq	.+8      	; 0x66d8 <mmc_init+0x50>
	{
	   mmc_clock_and_release();
    66d0:	0e 94 1e 32 	call	0x643c	; 0x643c <mmc_clock_and_release>
    66d4:	81 e0       	ldi	r24, 0x01	; 1
    66d6:	10 c0       	rjmp	.+32     	; 0x66f8 <mmc_init+0x70>

	//
	// send CMD1 until we get a 0 back, indicating card is done initializing 
	//
	i = 0xffff;						// max timeout
	while ((spi_byte(0xff) != 0) && (--i))	// wait for it
    66d8:	8f ef       	ldi	r24, 0xFF	; 255
    66da:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
    66de:	88 23       	and	r24, r24
    66e0:	41 f0       	breq	.+16     	; 0x66f2 <mmc_init+0x6a>
	{
	     mmc_send_command(1,0,0);	// send CMD1 - activate card init
    66e2:	40 e0       	ldi	r20, 0x00	; 0
    66e4:	50 e0       	ldi	r21, 0x00	; 0
    66e6:	60 e0       	ldi	r22, 0x00	; 0
    66e8:	70 e0       	ldi	r23, 0x00	; 0
    66ea:	81 e0       	ldi	r24, 0x01	; 1
    66ec:	0e 94 c1 32 	call	0x6582	; 0x6582 <mmc_send_command>
    66f0:	f3 cf       	rjmp	.-26     	; 0x66d8 <mmc_init+0x50>
	}

    mmc_clock_and_release();		// clean up
    66f2:	0e 94 1e 32 	call	0x643c	; 0x643c <mmc_clock_and_release>
    66f6:	80 e0       	ldi	r24, 0x00	; 0

	if (i == 0)						// if we timed out above
	   return 2;					// return failure code

	return 0;
}
    66f8:	df 91       	pop	r29
    66fa:	cf 91       	pop	r28
    66fc:	08 95       	ret

000066fe <mmc_readsector>:
	\param lba	Logical sectornumber to read
	\param buffer	Pointer to buffer for received data
	\return 0 on success, -1 on error
*/
int mmc_readsector(uint32_t lba, uint8_t *buffer)
{
    66fe:	ef 92       	push	r14
    6700:	ff 92       	push	r15
    6702:	0f 93       	push	r16
    6704:	1f 93       	push	r17
    6706:	cf 93       	push	r28
    6708:	df 93       	push	r29
    670a:	7b 01       	movw	r14, r22
    670c:	8c 01       	movw	r16, r24
    670e:	ea 01       	movw	r28, r20
	uint16_t i;

	if(mmc_mixer_active==true){
    6710:	80 91 65 0a 	lds	r24, 0x0A65
    6714:	88 23       	and	r24, r24
    6716:	41 f0       	breq	.+16     	; 0x6728 <mmc_readsector+0x2a>
		Print(2,1,PSTR("ERROR:1"));
    6718:	47 e7       	ldi	r20, 0x77	; 119
    671a:	50 e0       	ldi	r21, 0x00	; 0
    671c:	61 e0       	ldi	r22, 0x01	; 1
    671e:	70 e0       	ldi	r23, 0x00	; 0
    6720:	82 e0       	ldi	r24, 0x02	; 2
    6722:	90 e0       	ldi	r25, 0x00	; 0
    6724:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <Print>
	}

	// send read command and logical sector address
	mmc_send_command(17,(lba>>7) & 0xffff, (lba<<9) & 0xffff);
    6728:	a7 01       	movw	r20, r14
    672a:	54 2f       	mov	r21, r20
    672c:	44 27       	eor	r20, r20
    672e:	55 0f       	add	r21, r21
    6730:	67 e0       	ldi	r22, 0x07	; 7
    6732:	16 95       	lsr	r17
    6734:	07 95       	ror	r16
    6736:	f7 94       	ror	r15
    6738:	e7 94       	ror	r14
    673a:	6a 95       	dec	r22
    673c:	d1 f7       	brne	.-12     	; 0x6732 <mmc_readsector+0x34>
    673e:	b7 01       	movw	r22, r14
    6740:	81 e1       	ldi	r24, 0x11	; 17
    6742:	0e 94 c1 32 	call	0x6582	; 0x6582 <mmc_send_command>

	if (mmc_datatoken() != 0xfe)	// if no valid token
    6746:	0e 94 29 32 	call	0x6452	; 0x6452 <mmc_datatoken>
    674a:	8e 3f       	cpi	r24, 0xFE	; 254
    674c:	29 f0       	breq	.+10     	; 0x6758 <mmc_readsector+0x5a>
	{
	    mmc_clock_and_release();	// cleanup and	
    674e:	0e 94 1e 32 	call	0x643c	; 0x643c <mmc_clock_and_release>
    6752:	2f ef       	ldi	r18, 0xFF	; 255
    6754:	3f ef       	ldi	r19, 0xFF	; 255
    6756:	16 c0       	rjmp	.+44     	; 0x6784 <mmc_readsector+0x86>
   		return -1;					// return error code
    6758:	00 e0       	ldi	r16, 0x00	; 0
    675a:	10 e0       	ldi	r17, 0x00	; 0
	}

	for (i=0;i<512;i++)				// read sector data
    	*buffer++ = spi_byte(0xff);
    675c:	8f ef       	ldi	r24, 0xFF	; 255
    675e:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
    6762:	89 93       	st	Y+, r24
	{
	    mmc_clock_and_release();	// cleanup and	
   		return -1;					// return error code
	}

	for (i=0;i<512;i++)				// read sector data
    6764:	0f 5f       	subi	r16, 0xFF	; 255
    6766:	1f 4f       	sbci	r17, 0xFF	; 255
    6768:	82 e0       	ldi	r24, 0x02	; 2
    676a:	00 30       	cpi	r16, 0x00	; 0
    676c:	18 07       	cpc	r17, r24
    676e:	b1 f7       	brne	.-20     	; 0x675c <mmc_readsector+0x5e>
    	*buffer++ = spi_byte(0xff);

	spi_byte(0xff);					// ignore dummy checksum
    6770:	8f ef       	ldi	r24, 0xFF	; 255
    6772:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>
	spi_byte(0xff);					// ignore dummy checksum
    6776:	8f ef       	ldi	r24, 0xFF	; 255
    6778:	0e 94 1b 32 	call	0x6436	; 0x6436 <spi_byte>

    mmc_clock_and_release();		// cleanup
    677c:	0e 94 1e 32 	call	0x643c	; 0x643c <mmc_clock_and_release>
    6780:	20 e0       	ldi	r18, 0x00	; 0
    6782:	30 e0       	ldi	r19, 0x00	; 0

	return 0;						// return success		
}
    6784:	c9 01       	movw	r24, r18
    6786:	df 91       	pop	r29
    6788:	cf 91       	pop	r28
    678a:	1f 91       	pop	r17
    678c:	0f 91       	pop	r16
    678e:	ff 90       	pop	r15
    6790:	ef 90       	pop	r14
    6792:	08 95       	ret

00006794 <GetFileSector>:
	dirTableSector=bootRecordSector + reservedSectors + (sectorsPerFat * 2); //+ ((maxRootDirectoryEntries * 32) / bytesPerSector);
	mmc_readsector(dirTableSector, buffer);

}

long GetFileSector(DirectoryTableEntry *file){
    6794:	cf 92       	push	r12
    6796:	df 92       	push	r13
    6798:	ef 92       	push	r14
    679a:	ff 92       	push	r15
    679c:	0f 93       	push	r16
    679e:	1f 93       	push	r17
    67a0:	6c 01       	movw	r12, r24
    67a2:	60 91 e5 0a 	lds	r22, 0x0AE5
    67a6:	70 91 e6 0a 	lds	r23, 0x0AE6
    67aa:	80 91 e7 0a 	lds	r24, 0x0AE7
    67ae:	90 91 e8 0a 	lds	r25, 0x0AE8
    67b2:	25 e0       	ldi	r18, 0x05	; 5
    67b4:	66 0f       	add	r22, r22
    67b6:	77 1f       	adc	r23, r23
    67b8:	88 1f       	adc	r24, r24
    67ba:	99 1f       	adc	r25, r25
    67bc:	2a 95       	dec	r18
    67be:	d1 f7       	brne	.-12     	; 0x67b4 <GetFileSector+0x20>
    67c0:	20 91 ad 0a 	lds	r18, 0x0AAD
    67c4:	30 91 ae 0a 	lds	r19, 0x0AAE
    67c8:	40 91 af 0a 	lds	r20, 0x0AAF
    67cc:	50 91 b0 0a 	lds	r21, 0x0AB0
    67d0:	0e 94 96 3f 	call	0x7f2c	; 0x7f2c <__divmodsi4>
    67d4:	79 01       	movw	r14, r18
    67d6:	8a 01       	movw	r16, r20
    67d8:	80 91 b1 0a 	lds	r24, 0x0AB1
    67dc:	90 91 b2 0a 	lds	r25, 0x0AB2
    67e0:	a0 91 b3 0a 	lds	r26, 0x0AB3
    67e4:	b0 91 b4 0a 	lds	r27, 0x0AB4
    67e8:	e8 0e       	add	r14, r24
    67ea:	f9 1e       	adc	r15, r25
    67ec:	0a 1f       	adc	r16, r26
    67ee:	1b 1f       	adc	r17, r27
    67f0:	f6 01       	movw	r30, r12
    67f2:	62 8d       	ldd	r22, Z+26	; 0x1a
    67f4:	73 8d       	ldd	r23, Z+27	; 0x1b
    67f6:	62 50       	subi	r22, 0x02	; 2
    67f8:	70 40       	sbci	r23, 0x00	; 0
    67fa:	80 e0       	ldi	r24, 0x00	; 0
    67fc:	90 e0       	ldi	r25, 0x00	; 0
    67fe:	20 91 7f 0e 	lds	r18, 0x0E7F
    6802:	30 91 80 0e 	lds	r19, 0x0E80
    6806:	40 91 81 0e 	lds	r20, 0x0E81
    680a:	50 91 82 0e 	lds	r21, 0x0E82
    680e:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__mulsi3>
    6812:	e6 0e       	add	r14, r22
    6814:	f7 1e       	adc	r15, r23
    6816:	08 1f       	adc	r16, r24
    6818:	19 1f       	adc	r17, r25
	return dirTableSector+((maxRootDirectoryEntries * 32)/bytesPerSector)+((file->firstCluster-2)*sectorsPerCluster);
}
    681a:	b7 01       	movw	r22, r14
    681c:	c8 01       	movw	r24, r16
    681e:	1f 91       	pop	r17
    6820:	0f 91       	pop	r16
    6822:	ff 90       	pop	r15
    6824:	ef 90       	pop	r14
    6826:	df 90       	pop	r13
    6828:	cf 90       	pop	r12
    682a:	08 95       	ret

0000682c <noCard>:

	PrintHexByte(2+(no*3),2,debugNo);

}

void noCard(){
    682c:	87 e7       	ldi	r24, 0x77	; 119
    682e:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SetFontTilesIndex>
	SetFontTilesIndex(MAIN_TILESET_SIZE);
	Print(5,19,PSTR("NO SD CARD DETECTED!"));
    6832:	48 e6       	ldi	r20, 0x68	; 104
    6834:	54 e4       	ldi	r21, 0x44	; 68
    6836:	63 e1       	ldi	r22, 0x13	; 19
    6838:	70 e0       	ldi	r23, 0x00	; 0
    683a:	85 e0       	ldi	r24, 0x05	; 5
    683c:	90 e0       	ldi	r25, 0x00	; 0
    683e:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <Print>
    6842:	ff cf       	rjmp	.-2      	; 0x6842 <noCard+0x16>

00006844 <init>:

long GetFileSector(DirectoryTableEntry *file){
	return dirTableSector+((maxRootDirectoryEntries * 32)/bytesPerSector)+((file->firstCluster-2)*sectorsPerCluster);
}

char init(){	
    6844:	1f 93       	push	r17
    6846:	cf 93       	push	r28
    6848:	df 93       	push	r29
	unsigned char temp;
	int timeout=0;

	SetFontTilesIndex(MAIN_TILESET_SIZE);
    684a:	87 e7       	ldi	r24, 0x77	; 119
    684c:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SetFontTilesIndex>
	ClearVram();
    6850:	0e 94 ad 24 	call	0x495a	; 0x495a <ClearVram>
    6854:	c0 e0       	ldi	r28, 0x00	; 0
    6856:	d0 e0       	ldi	r29, 0x00	; 0
//	cli();

	do { temp = mmc_init();
    6858:	0e 94 44 33 	call	0x6688	; 0x6688 <mmc_init>
    685c:	18 2f       	mov	r17, r24
   		Print(3,4,temp? PSTR("INIT FAILED") : PSTR("INIT GOOD   ")); 
    685e:	88 23       	and	r24, r24
    6860:	19 f4       	brne	.+6      	; 0x6868 <init+0x24>
    6862:	48 e4       	ldi	r20, 0x48	; 72
    6864:	54 e4       	ldi	r21, 0x44	; 68
    6866:	02 c0       	rjmp	.+4      	; 0x686c <init+0x28>
    6868:	45 e5       	ldi	r20, 0x55	; 85
    686a:	54 e4       	ldi	r21, 0x44	; 68
    686c:	64 e0       	ldi	r22, 0x04	; 4
    686e:	70 e0       	ldi	r23, 0x00	; 0
    6870:	83 e0       	ldi	r24, 0x03	; 3
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <Print>
		timeout++;
    6878:	21 96       	adiw	r28, 0x01	; 1
		if(timeout>10){
    687a:	cb 30       	cpi	r28, 0x0B	; 11
    687c:	d1 05       	cpc	r29, r1
    687e:	19 f4       	brne	.+6      	; 0x6886 <init+0x42>
			sei();
    6880:	78 94       	sei
    6882:	8f ef       	ldi	r24, 0xFF	; 255
    6884:	24 c0       	rjmp	.+72     	; 0x68ce <init+0x8a>
			return -1;
		}
   	}while (temp);
    6886:	11 23       	and	r17, r17
    6888:	39 f7       	brne	.-50     	; 0x6858 <init+0x14>
    688a:	c0 e0       	ldi	r28, 0x00	; 0
    688c:	d0 e0       	ldi	r29, 0x00	; 0
	
	timeout=0;

	do {
		temp = mmc_readsector(0, sector.buffer);
    688e:	49 ee       	ldi	r20, 0xE9	; 233
    6890:	5a e0       	ldi	r21, 0x0A	; 10
    6892:	60 e0       	ldi	r22, 0x00	; 0
    6894:	70 e0       	ldi	r23, 0x00	; 0
    6896:	80 e0       	ldi	r24, 0x00	; 0
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	0e 94 7f 33 	call	0x66fe	; 0x66fe <mmc_readsector>
    689e:	18 2f       	mov	r17, r24
   		Print(3,5,temp? PSTR("FIRST READ FAILED") : PSTR("FIRST READ GOOD   ")); 
    68a0:	88 23       	and	r24, r24
    68a2:	19 f4       	brne	.+6      	; 0x68aa <init+0x66>
    68a4:	43 e2       	ldi	r20, 0x23	; 35
    68a6:	54 e4       	ldi	r21, 0x44	; 68
    68a8:	02 c0       	rjmp	.+4      	; 0x68ae <init+0x6a>
    68aa:	46 e3       	ldi	r20, 0x36	; 54
    68ac:	54 e4       	ldi	r21, 0x44	; 68
    68ae:	65 e0       	ldi	r22, 0x05	; 5
    68b0:	70 e0       	ldi	r23, 0x00	; 0
    68b2:	83 e0       	ldi	r24, 0x03	; 3
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <Print>
		timeout++;
    68ba:	21 96       	adiw	r28, 0x01	; 1
		if(timeout>6000){
    68bc:	87 e1       	ldi	r24, 0x17	; 23
    68be:	c1 37       	cpi	r28, 0x71	; 113
    68c0:	d8 07       	cpc	r29, r24
    68c2:	11 f4       	brne	.+4      	; 0x68c8 <init+0x84>
			sei();
    68c4:	78 94       	sei
    68c6:	ff cf       	rjmp	.-2      	; 0x68c6 <init+0x82>
			while(1);
		}
	}while (temp);
    68c8:	11 23       	and	r17, r17
    68ca:	09 f7       	brne	.-62     	; 0x688e <init+0x4a>
    68cc:	80 e0       	ldi	r24, 0x00	; 0

//	sei();
	return 0;
}
    68ce:	df 91       	pop	r29
    68d0:	cf 91       	pop	r28
    68d2:	1f 91       	pop	r17
    68d4:	08 95       	ret

000068d6 <LoadRootDirectory>:

long dirTableSector;
long sectorsPerCluster;
long maxRootDirectoryEntries;
long bytesPerSector;
void LoadRootDirectory(unsigned char *buffer){
    68d6:	8f 92       	push	r8
    68d8:	9f 92       	push	r9
    68da:	af 92       	push	r10
    68dc:	bf 92       	push	r11
    68de:	cf 92       	push	r12
    68e0:	df 92       	push	r13
    68e2:	ef 92       	push	r14
    68e4:	ff 92       	push	r15
    68e6:	0f 93       	push	r16
    68e8:	1f 93       	push	r17
    68ea:	4c 01       	movw	r8, r24

	//read MBR
	mmc_readsector(0, buffer);
    68ec:	ac 01       	movw	r20, r24
    68ee:	60 e0       	ldi	r22, 0x00	; 0
    68f0:	70 e0       	ldi	r23, 0x00	; 0
    68f2:	80 e0       	ldi	r24, 0x00	; 0
    68f4:	90 e0       	ldi	r25, 0x00	; 0
    68f6:	0e 94 7f 33 	call	0x66fe	; 0x66fe <mmc_readsector>
	
	//read boot record
	long bootRecordSector=sector.mbr.partition1.startSector;
    68fa:	a0 90 af 0c 	lds	r10, 0x0CAF
    68fe:	b0 90 b0 0c 	lds	r11, 0x0CB0
    6902:	c0 90 b1 0c 	lds	r12, 0x0CB1
    6906:	d0 90 b2 0c 	lds	r13, 0x0CB2
	mmc_readsector(bootRecordSector, buffer);
    690a:	a4 01       	movw	r20, r8
    690c:	c6 01       	movw	r24, r12
    690e:	b5 01       	movw	r22, r10
    6910:	0e 94 7f 33 	call	0x66fe	; 0x66fe <mmc_readsector>

	int reservedSectors=sector.bootRecord.reservedSectors;
    6914:	60 91 f7 0a 	lds	r22, 0x0AF7
    6918:	70 91 f8 0a 	lds	r23, 0x0AF8
	int sectorsPerFat=sector.bootRecord.sectorsPerFat;
    691c:	e0 90 ff 0a 	lds	r14, 0x0AFF
    6920:	f0 90 00 0b 	lds	r15, 0x0B00
	maxRootDirectoryEntries=sector.bootRecord.maxRootDirectoryEntries;
    6924:	20 91 fa 0a 	lds	r18, 0x0AFA
    6928:	30 91 fb 0a 	lds	r19, 0x0AFB
    692c:	40 e0       	ldi	r20, 0x00	; 0
    692e:	50 e0       	ldi	r21, 0x00	; 0
    6930:	20 93 e5 0a 	sts	0x0AE5, r18
    6934:	30 93 e6 0a 	sts	0x0AE6, r19
    6938:	40 93 e7 0a 	sts	0x0AE7, r20
    693c:	50 93 e8 0a 	sts	0x0AE8, r21
	bytesPerSector=sector.bootRecord.bytesPerSector;
    6940:	20 91 f4 0a 	lds	r18, 0x0AF4
    6944:	30 91 f5 0a 	lds	r19, 0x0AF5
    6948:	40 e0       	ldi	r20, 0x00	; 0
    694a:	50 e0       	ldi	r21, 0x00	; 0
    694c:	20 93 ad 0a 	sts	0x0AAD, r18
    6950:	30 93 ae 0a 	sts	0x0AAE, r19
    6954:	40 93 af 0a 	sts	0x0AAF, r20
    6958:	50 93 b0 0a 	sts	0x0AB0, r21
	sectorsPerCluster=sector.bootRecord.sectorsPerCluster;
    695c:	20 91 f6 0a 	lds	r18, 0x0AF6
    6960:	30 e0       	ldi	r19, 0x00	; 0
    6962:	40 e0       	ldi	r20, 0x00	; 0
    6964:	50 e0       	ldi	r21, 0x00	; 0
    6966:	20 93 7f 0e 	sts	0x0E7F, r18
    696a:	30 93 80 0e 	sts	0x0E80, r19
    696e:	40 93 81 0e 	sts	0x0E81, r20
    6972:	50 93 82 0e 	sts	0x0E82, r21

	//get directory table
	dirTableSector=bootRecordSector + reservedSectors + (sectorsPerFat * 2); //+ ((maxRootDirectoryEntries * 32) / bytesPerSector);
    6976:	88 27       	eor	r24, r24
    6978:	77 fd       	sbrc	r23, 7
    697a:	80 95       	com	r24
    697c:	98 2f       	mov	r25, r24
    697e:	6a 0d       	add	r22, r10
    6980:	7b 1d       	adc	r23, r11
    6982:	8c 1d       	adc	r24, r12
    6984:	9d 1d       	adc	r25, r13
    6986:	ee 0c       	add	r14, r14
    6988:	ff 1c       	adc	r15, r15
    698a:	00 27       	eor	r16, r16
    698c:	f7 fc       	sbrc	r15, 7
    698e:	00 95       	com	r16
    6990:	10 2f       	mov	r17, r16
    6992:	6e 0d       	add	r22, r14
    6994:	7f 1d       	adc	r23, r15
    6996:	80 1f       	adc	r24, r16
    6998:	91 1f       	adc	r25, r17
    699a:	60 93 b1 0a 	sts	0x0AB1, r22
    699e:	70 93 b2 0a 	sts	0x0AB2, r23
    69a2:	80 93 b3 0a 	sts	0x0AB3, r24
    69a6:	90 93 b4 0a 	sts	0x0AB4, r25
	mmc_readsector(dirTableSector, buffer);
    69aa:	a4 01       	movw	r20, r8
    69ac:	0e 94 7f 33 	call	0x66fe	; 0x66fe <mmc_readsector>

}
    69b0:	1f 91       	pop	r17
    69b2:	0f 91       	pop	r16
    69b4:	ff 90       	pop	r15
    69b6:	ef 90       	pop	r14
    69b8:	df 90       	pop	r13
    69ba:	cf 90       	pop	r12
    69bc:	bf 90       	pop	r11
    69be:	af 90       	pop	r10
    69c0:	9f 90       	pop	r9
    69c2:	8f 90       	pop	r8
    69c4:	08 95       	ret

000069c6 <getChar>:

	}
	
}

unsigned char getChar(unsigned long absAdress){
    69c6:	af 92       	push	r10
    69c8:	bf 92       	push	r11
    69ca:	cf 92       	push	r12
    69cc:	df 92       	push	r13
    69ce:	ef 92       	push	r14
    69d0:	ff 92       	push	r15
    69d2:	0f 93       	push	r16
    69d4:	1f 93       	push	r17
    69d6:	5b 01       	movw	r10, r22
    69d8:	6c 01       	movw	r12, r24
	static unsigned long lastSector=0;
	unsigned char c;
	
	unsigned long sectorNo=(absAdress/512);
    69da:	7b 01       	movw	r14, r22
    69dc:	8c 01       	movw	r16, r24
    69de:	59 e0       	ldi	r21, 0x09	; 9
    69e0:	16 95       	lsr	r17
    69e2:	07 95       	ror	r16
    69e4:	f7 94       	ror	r15
    69e6:	e7 94       	ror	r14
    69e8:	5a 95       	dec	r21
    69ea:	d1 f7       	brne	.-12     	; 0x69e0 <getChar+0x1a>
	
	if(sectorNo!=lastSector){
    69ec:	80 91 80 0a 	lds	r24, 0x0A80
    69f0:	90 91 81 0a 	lds	r25, 0x0A81
    69f4:	a0 91 82 0a 	lds	r26, 0x0A82
    69f8:	b0 91 83 0a 	lds	r27, 0x0A83
    69fc:	e8 16       	cp	r14, r24
    69fe:	f9 06       	cpc	r15, r25
    6a00:	0a 07       	cpc	r16, r26
    6a02:	1b 07       	cpc	r17, r27
    6a04:	71 f0       	breq	.+28     	; 0x6a22 <getChar+0x5c>
		mmc_readsector(sectorNo, sector.buffer);	
    6a06:	49 ee       	ldi	r20, 0xE9	; 233
    6a08:	5a e0       	ldi	r21, 0x0A	; 10
    6a0a:	c8 01       	movw	r24, r16
    6a0c:	b7 01       	movw	r22, r14
    6a0e:	0e 94 7f 33 	call	0x66fe	; 0x66fe <mmc_readsector>
		lastSector=sectorNo;
    6a12:	e0 92 80 0a 	sts	0x0A80, r14
    6a16:	f0 92 81 0a 	sts	0x0A81, r15
    6a1a:	00 93 82 0a 	sts	0x0A82, r16
    6a1e:	10 93 83 0a 	sts	0x0A83, r17
	}
	
	c=sector.buffer[absAdress-(sectorNo*512)];
    6a22:	49 e0       	ldi	r20, 0x09	; 9
    6a24:	ee 0c       	add	r14, r14
    6a26:	ff 1c       	adc	r15, r15
    6a28:	00 1f       	adc	r16, r16
    6a2a:	11 1f       	adc	r17, r17
    6a2c:	4a 95       	dec	r20
    6a2e:	d1 f7       	brne	.-12     	; 0x6a24 <getChar+0x5e>
    6a30:	ae 18       	sub	r10, r14
    6a32:	bf 08       	sbc	r11, r15
    6a34:	c0 0a       	sbc	r12, r16
    6a36:	d1 0a       	sbc	r13, r17
    6a38:	f5 01       	movw	r30, r10
    6a3a:	e7 51       	subi	r30, 0x17	; 23
    6a3c:	f5 4f       	sbci	r31, 0xF5	; 245
    6a3e:	80 81       	ld	r24, Z
	if(c>=97) c-=32;
    6a40:	81 36       	cpi	r24, 0x61	; 97
    6a42:	08 f0       	brcs	.+2      	; 0x6a46 <getChar+0x80>
    6a44:	80 52       	subi	r24, 0x20	; 32
	return c;
}
    6a46:	1f 91       	pop	r17
    6a48:	0f 91       	pop	r16
    6a4a:	ff 90       	pop	r15
    6a4c:	ef 90       	pop	r14
    6a4e:	df 90       	pop	r13
    6a50:	cf 90       	pop	r12
    6a52:	bf 90       	pop	r11
    6a54:	af 90       	pop	r10
    6a56:	08 95       	ret

00006a58 <findTag>:

//search max 2 sectors
int findTag(unsigned long absAdress,unsigned char *tag,unsigned char *dest,unsigned int destLenght,unsigned char dataOffset){
    6a58:	2f 92       	push	r2
    6a5a:	3f 92       	push	r3
    6a5c:	4f 92       	push	r4
    6a5e:	5f 92       	push	r5
    6a60:	6f 92       	push	r6
    6a62:	7f 92       	push	r7
    6a64:	8f 92       	push	r8
    6a66:	9f 92       	push	r9
    6a68:	af 92       	push	r10
    6a6a:	bf 92       	push	r11
    6a6c:	cf 92       	push	r12
    6a6e:	df 92       	push	r13
    6a70:	ef 92       	push	r14
    6a72:	ff 92       	push	r15
    6a74:	0f 93       	push	r16
    6a76:	1f 93       	push	r17
    6a78:	df 93       	push	r29
    6a7a:	cf 93       	push	r28
    6a7c:	00 d0       	rcall	.+0      	; 0x6a7e <findTag+0x26>
    6a7e:	0f 92       	push	r0
    6a80:	cd b7       	in	r28, 0x3d	; 61
    6a82:	de b7       	in	r29, 0x3e	; 62
    6a84:	5b 83       	std	Y+3, r21	; 0x03
    6a86:	4a 83       	std	Y+2, r20	; 0x02
    6a88:	29 01       	movw	r4, r18
    6a8a:	18 01       	movw	r2, r16
    6a8c:	e9 82       	std	Y+1, r14	; 0x01
    6a8e:	9b 01       	movw	r18, r22
    6a90:	ac 01       	movw	r20, r24
    6a92:	59 01       	movw	r10, r18
    6a94:	6a 01       	movw	r12, r20
			}
			return 0; //found!
		}
		
		i++;
		if(i>(absAdress+1024)){
    6a96:	61 2c       	mov	r6, r1
    6a98:	74 e0       	ldi	r23, 0x04	; 4
    6a9a:	77 2e       	mov	r7, r23
    6a9c:	81 2c       	mov	r8, r1
    6a9e:	91 2c       	mov	r9, r1
    6aa0:	6a 0c       	add	r6, r10
    6aa2:	7b 1c       	adc	r7, r11
    6aa4:	8c 1c       	adc	r8, r12
    6aa6:	9d 1c       	adc	r9, r13
	unsigned long i=absAdress,size;
	int j;

	
	while(1){
		if( getChar(i)==tag[0] && getChar(i+1)==tag[1] && getChar(i+2)==tag[2] && getChar(i+3)==tag[3]){
    6aa8:	c6 01       	movw	r24, r12
    6aaa:	b5 01       	movw	r22, r10
    6aac:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6ab0:	aa 81       	ldd	r26, Y+2	; 0x02
    6ab2:	bb 81       	ldd	r27, Y+3	; 0x03
    6ab4:	9c 91       	ld	r25, X
    6ab6:	89 17       	cp	r24, r25
    6ab8:	09 f0       	breq	.+2      	; 0x6abc <findTag+0x64>
    6aba:	a1 c0       	rjmp	.+322    	; 0x6bfe <findTag+0x1a6>
    6abc:	c6 01       	movw	r24, r12
    6abe:	b5 01       	movw	r22, r10
    6ac0:	6f 5f       	subi	r22, 0xFF	; 255
    6ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ac8:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6acc:	ea 81       	ldd	r30, Y+2	; 0x02
    6ace:	fb 81       	ldd	r31, Y+3	; 0x03
    6ad0:	91 81       	ldd	r25, Z+1	; 0x01
    6ad2:	89 17       	cp	r24, r25
    6ad4:	09 f0       	breq	.+2      	; 0x6ad8 <findTag+0x80>
    6ad6:	93 c0       	rjmp	.+294    	; 0x6bfe <findTag+0x1a6>
    6ad8:	c6 01       	movw	r24, r12
    6ada:	b5 01       	movw	r22, r10
    6adc:	6e 5f       	subi	r22, 0xFE	; 254
    6ade:	7f 4f       	sbci	r23, 0xFF	; 255
    6ae0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ae2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ae4:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6ae8:	aa 81       	ldd	r26, Y+2	; 0x02
    6aea:	bb 81       	ldd	r27, Y+3	; 0x03
    6aec:	12 96       	adiw	r26, 0x02	; 2
    6aee:	9c 91       	ld	r25, X
    6af0:	89 17       	cp	r24, r25
    6af2:	09 f0       	breq	.+2      	; 0x6af6 <findTag+0x9e>
    6af4:	84 c0       	rjmp	.+264    	; 0x6bfe <findTag+0x1a6>
    6af6:	c6 01       	movw	r24, r12
    6af8:	b5 01       	movw	r22, r10
    6afa:	6d 5f       	subi	r22, 0xFD	; 253
    6afc:	7f 4f       	sbci	r23, 0xFF	; 255
    6afe:	8f 4f       	sbci	r24, 0xFF	; 255
    6b00:	9f 4f       	sbci	r25, 0xFF	; 255
    6b02:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6b06:	ea 81       	ldd	r30, Y+2	; 0x02
    6b08:	fb 81       	ldd	r31, Y+3	; 0x03
    6b0a:	93 81       	ldd	r25, Z+3	; 0x03
    6b0c:	89 17       	cp	r24, r25
    6b0e:	09 f0       	breq	.+2      	; 0x6b12 <findTag+0xba>
    6b10:	76 c0       	rjmp	.+236    	; 0x6bfe <findTag+0x1a6>
			if(dest!=NULL){
    6b12:	41 14       	cp	r4, r1
    6b14:	51 04       	cpc	r5, r1
    6b16:	09 f4       	brne	.+2      	; 0x6b1a <findTag+0xc2>
    6b18:	6f c0       	rjmp	.+222    	; 0x6bf8 <findTag+0x1a0>
				i+=4;
    6b1a:	64 e0       	ldi	r22, 0x04	; 4
    6b1c:	66 2e       	mov	r6, r22
    6b1e:	71 2c       	mov	r7, r1
    6b20:	81 2c       	mov	r8, r1
    6b22:	91 2c       	mov	r9, r1
    6b24:	6a 0c       	add	r6, r10
    6b26:	7b 1c       	adc	r7, r11
    6b28:	8c 1c       	adc	r8, r12
    6b2a:	9d 1c       	adc	r9, r13
				//get info size
				size=getChar(i)+(getChar(i+1)<<8)+(getChar(i+2)<<8)+(getChar(i+3)<<8);
    6b2c:	c4 01       	movw	r24, r8
    6b2e:	b3 01       	movw	r22, r6
    6b30:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6b34:	f8 2e       	mov	r15, r24
    6b36:	85 e0       	ldi	r24, 0x05	; 5
    6b38:	90 e0       	ldi	r25, 0x00	; 0
    6b3a:	a0 e0       	ldi	r26, 0x00	; 0
    6b3c:	b0 e0       	ldi	r27, 0x00	; 0
    6b3e:	a8 0e       	add	r10, r24
    6b40:	b9 1e       	adc	r11, r25
    6b42:	ca 1e       	adc	r12, r26
    6b44:	db 1e       	adc	r13, r27
    6b46:	c6 01       	movw	r24, r12
    6b48:	b5 01       	movw	r22, r10
    6b4a:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6b4e:	08 2f       	mov	r16, r24
    6b50:	08 94       	sec
    6b52:	a1 1c       	adc	r10, r1
    6b54:	b1 1c       	adc	r11, r1
    6b56:	c1 1c       	adc	r12, r1
    6b58:	d1 1c       	adc	r13, r1
    6b5a:	c6 01       	movw	r24, r12
    6b5c:	b5 01       	movw	r22, r10
    6b5e:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6b62:	18 2f       	mov	r17, r24
    6b64:	08 94       	sec
    6b66:	a1 1c       	adc	r10, r1
    6b68:	b1 1c       	adc	r11, r1
    6b6a:	c1 1c       	adc	r12, r1
    6b6c:	d1 1c       	adc	r13, r1
    6b6e:	c6 01       	movw	r24, r12
    6b70:	b5 01       	movw	r22, r10
    6b72:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6b76:	50 2f       	mov	r21, r16
    6b78:	40 e0       	ldi	r20, 0x00	; 0
    6b7a:	31 2f       	mov	r19, r17
    6b7c:	20 e0       	ldi	r18, 0x00	; 0
    6b7e:	42 0f       	add	r20, r18
    6b80:	53 1f       	adc	r21, r19
    6b82:	4f 0d       	add	r20, r15
    6b84:	51 1d       	adc	r21, r1
    6b86:	38 2f       	mov	r19, r24
    6b88:	20 e0       	ldi	r18, 0x00	; 0
    6b8a:	42 0f       	add	r20, r18
    6b8c:	53 1f       	adc	r21, r19
    6b8e:	08 94       	sec
    6b90:	21 08       	sbc	r2, r1
    6b92:	31 08       	sbc	r3, r1
    6b94:	c1 01       	movw	r24, r2
    6b96:	a0 e0       	ldi	r26, 0x00	; 0
    6b98:	b0 e0       	ldi	r27, 0x00	; 0
    6b9a:	7a 01       	movw	r14, r20
    6b9c:	00 27       	eor	r16, r16
    6b9e:	f7 fc       	sbrc	r15, 7
    6ba0:	00 95       	com	r16
    6ba2:	10 2f       	mov	r17, r16
    6ba4:	8e 15       	cp	r24, r14
    6ba6:	9f 05       	cpc	r25, r15
    6ba8:	a0 07       	cpc	r26, r16
    6baa:	b1 07       	cpc	r27, r17
    6bac:	10 f4       	brcc	.+4      	; 0x6bb2 <findTag+0x15a>
    6bae:	7c 01       	movw	r14, r24
    6bb0:	8d 01       	movw	r16, r26
				if(size>=(destLenght-1))size=(destLenght-1);
				i+=dataOffset;
    6bb2:	99 81       	ldd	r25, Y+1	; 0x01
    6bb4:	69 0e       	add	r6, r25
    6bb6:	71 1c       	adc	r7, r1
    6bb8:	81 1c       	adc	r8, r1
    6bba:	91 1c       	adc	r9, r1
    6bbc:	aa 24       	eor	r10, r10
    6bbe:	bb 24       	eor	r11, r11
    6bc0:	65 01       	movw	r12, r10
    6bc2:	11 c0       	rjmp	.+34     	; 0x6be6 <findTag+0x18e>

				for(j=0;j<size;j++){
					dest[j]=getChar(i+j);
    6bc4:	c6 01       	movw	r24, r12
    6bc6:	b5 01       	movw	r22, r10
    6bc8:	66 0d       	add	r22, r6
    6bca:	77 1d       	adc	r23, r7
    6bcc:	88 1d       	adc	r24, r8
    6bce:	99 1d       	adc	r25, r9
    6bd0:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <getChar>
    6bd4:	f2 01       	movw	r30, r4
    6bd6:	ea 0d       	add	r30, r10
    6bd8:	fb 1d       	adc	r31, r11
    6bda:	80 83       	st	Z, r24
    6bdc:	08 94       	sec
    6bde:	a1 1c       	adc	r10, r1
    6be0:	b1 1c       	adc	r11, r1
    6be2:	c1 1c       	adc	r12, r1
    6be4:	d1 1c       	adc	r13, r1
				//get info size
				size=getChar(i)+(getChar(i+1)<<8)+(getChar(i+2)<<8)+(getChar(i+3)<<8);
				if(size>=(destLenght-1))size=(destLenght-1);
				i+=dataOffset;

				for(j=0;j<size;j++){
    6be6:	ae 14       	cp	r10, r14
    6be8:	bf 04       	cpc	r11, r15
    6bea:	c0 06       	cpc	r12, r16
    6bec:	d1 06       	cpc	r13, r17
    6bee:	50 f3       	brcs	.-44     	; 0x6bc4 <findTag+0x16c>
					dest[j]=getChar(i+j);
				}
				dest[j]=0;
    6bf0:	4e 0c       	add	r4, r14
    6bf2:	5f 1c       	adc	r5, r15
    6bf4:	d2 01       	movw	r26, r4
    6bf6:	1c 92       	st	X, r1
    6bf8:	20 e0       	ldi	r18, 0x00	; 0
    6bfa:	30 e0       	ldi	r19, 0x00	; 0
    6bfc:	0f c0       	rjmp	.+30     	; 0x6c1c <findTag+0x1c4>
			}
			return 0; //found!
		}
		
		i++;
    6bfe:	08 94       	sec
    6c00:	a1 1c       	adc	r10, r1
    6c02:	b1 1c       	adc	r11, r1
    6c04:	c1 1c       	adc	r12, r1
    6c06:	d1 1c       	adc	r13, r1
		if(i>(absAdress+1024)){
    6c08:	6a 14       	cp	r6, r10
    6c0a:	7b 04       	cpc	r7, r11
    6c0c:	8c 04       	cpc	r8, r12
    6c0e:	9d 04       	cpc	r9, r13
    6c10:	08 f0       	brcs	.+2      	; 0x6c14 <findTag+0x1bc>
    6c12:	4a cf       	rjmp	.-364    	; 0x6aa8 <findTag+0x50>
			dest[0]=0;
    6c14:	f2 01       	movw	r30, r4
    6c16:	10 82       	st	Z, r1
    6c18:	2f ef       	ldi	r18, 0xFF	; 255
    6c1a:	3f ef       	ldi	r19, 0xFF	; 255
		}
	}

	

}
    6c1c:	c9 01       	movw	r24, r18
    6c1e:	0f 90       	pop	r0
    6c20:	0f 90       	pop	r0
    6c22:	0f 90       	pop	r0
    6c24:	cf 91       	pop	r28
    6c26:	df 91       	pop	r29
    6c28:	1f 91       	pop	r17
    6c2a:	0f 91       	pop	r16
    6c2c:	ff 90       	pop	r15
    6c2e:	ef 90       	pop	r14
    6c30:	df 90       	pop	r13
    6c32:	cf 90       	pop	r12
    6c34:	bf 90       	pop	r11
    6c36:	af 90       	pop	r10
    6c38:	9f 90       	pop	r9
    6c3a:	8f 90       	pop	r8
    6c3c:	7f 90       	pop	r7
    6c3e:	6f 90       	pop	r6
    6c40:	5f 90       	pop	r5
    6c42:	4f 90       	pop	r4
    6c44:	3f 90       	pop	r3
    6c46:	2f 90       	pop	r2
    6c48:	08 95       	ret

00006c4a <loadWaveInfoBlock>:
Returns:
0=success. Wave file detected and tags loaded
1=Wave file detected, but no tags were present.
-1=not a wave file.
*/
int loadWaveInfoBlock(File *file){
    6c4a:	5f 92       	push	r5
    6c4c:	6f 92       	push	r6
    6c4e:	7f 92       	push	r7
    6c50:	8f 92       	push	r8
    6c52:	9f 92       	push	r9
    6c54:	af 92       	push	r10
    6c56:	bf 92       	push	r11
    6c58:	cf 92       	push	r12
    6c5a:	df 92       	push	r13
    6c5c:	ef 92       	push	r14
    6c5e:	ff 92       	push	r15
    6c60:	0f 93       	push	r16
    6c62:	1f 93       	push	r17
    6c64:	df 93       	push	r29
    6c66:	cf 93       	push	r28
    6c68:	00 d0       	rcall	.+0      	; 0x6c6a <loadWaveInfoBlock+0x20>
    6c6a:	00 d0       	rcall	.+0      	; 0x6c6c <loadWaveInfoBlock+0x22>
    6c6c:	cd b7       	in	r28, 0x3d	; 61
    6c6e:	de b7       	in	r29, 0x3e	; 62
    6c70:	4c 01       	movw	r8, r24
	unsigned long infoBlockStartAddr;
	unsigned char tag[4],i,pos,c;
	
	mmc_readsector(file->firstSector, sector.buffer);
    6c72:	dc 01       	movw	r26, r24
    6c74:	1d 96       	adiw	r26, 0x0d	; 13
    6c76:	6d 91       	ld	r22, X+
    6c78:	7d 91       	ld	r23, X+
    6c7a:	8d 91       	ld	r24, X+
    6c7c:	9c 91       	ld	r25, X
    6c7e:	50 97       	sbiw	r26, 0x10	; 16
    6c80:	49 ee       	ldi	r20, 0xE9	; 233
    6c82:	5a e0       	ldi	r21, 0x0A	; 10
    6c84:	0e 94 7f 33 	call	0x66fe	; 0x66fe <mmc_readsector>
	
	//check if its a valid WAV file
	if(sector.riffHeader.format[0]=='W' && sector.riffHeader.format[1]=='A' && sector.riffHeader.format[2]=='V' && sector.riffHeader.format[3]=='E'){
    6c88:	80 91 f1 0a 	lds	r24, 0x0AF1
    6c8c:	87 35       	cpi	r24, 0x57	; 87
    6c8e:	09 f0       	breq	.+2      	; 0x6c92 <loadWaveInfoBlock+0x48>
    6c90:	eb c0       	rjmp	.+470    	; 0x6e68 <loadWaveInfoBlock+0x21e>
    6c92:	f0 90 f2 0a 	lds	r15, 0x0AF2
    6c96:	b1 e4       	ldi	r27, 0x41	; 65
    6c98:	fb 16       	cp	r15, r27
    6c9a:	09 f0       	breq	.+2      	; 0x6c9e <loadWaveInfoBlock+0x54>
    6c9c:	e5 c0       	rjmp	.+458    	; 0x6e68 <loadWaveInfoBlock+0x21e>
    6c9e:	80 91 f3 0a 	lds	r24, 0x0AF3
    6ca2:	86 35       	cpi	r24, 0x56	; 86
    6ca4:	09 f0       	breq	.+2      	; 0x6ca8 <loadWaveInfoBlock+0x5e>
    6ca6:	e0 c0       	rjmp	.+448    	; 0x6e68 <loadWaveInfoBlock+0x21e>
    6ca8:	80 91 f4 0a 	lds	r24, 0x0AF4
    6cac:	85 34       	cpi	r24, 0x45	; 69
    6cae:	09 f0       	breq	.+2      	; 0x6cb2 <loadWaveInfoBlock+0x68>
    6cb0:	db c0       	rjmp	.+438    	; 0x6e68 <loadWaveInfoBlock+0x21e>
		infoBlockStartAddr=sector.riffHeader.subchunk2Size+45;
    6cb2:	a0 90 11 0b 	lds	r10, 0x0B11
    6cb6:	b0 90 12 0b 	lds	r11, 0x0B12
    6cba:	c0 90 13 0b 	lds	r12, 0x0B13
    6cbe:	d0 90 14 0b 	lds	r13, 0x0B14
    6cc2:	8d e2       	ldi	r24, 0x2D	; 45
    6cc4:	90 e0       	ldi	r25, 0x00	; 0
    6cc6:	a0 e0       	ldi	r26, 0x00	; 0
    6cc8:	b0 e0       	ldi	r27, 0x00	; 0
    6cca:	a8 0e       	add	r10, r24
    6ccc:	b9 1e       	adc	r11, r25
    6cce:	ca 1e       	adc	r12, r26
    6cd0:	db 1e       	adc	r13, r27
	
		soundDataStart=44;
    6cd2:	8c e2       	ldi	r24, 0x2C	; 44
    6cd4:	90 e0       	ldi	r25, 0x00	; 0
    6cd6:	90 93 ec 0e 	sts	0x0EEC, r25
    6cda:	80 93 eb 0e 	sts	0x0EEB, r24

		tag[0]='I';
    6cde:	09 e4       	ldi	r16, 0x49	; 73
    6ce0:	50 2e       	mov	r5, r16
    6ce2:	59 82       	std	Y+1, r5	; 0x01
		tag[1]='N';
    6ce4:	8e e4       	ldi	r24, 0x4E	; 78
    6ce6:	8a 83       	std	Y+2, r24	; 0x02
		tag[2]='F';
    6ce8:	86 e4       	ldi	r24, 0x46	; 70
    6cea:	8b 83       	std	Y+3, r24	; 0x03
		tag[3]='O';
    6cec:	8f e4       	ldi	r24, 0x4F	; 79
    6cee:	8c 83       	std	Y+4, r24	; 0x04
		if(findTag((file->firstSector*512)+infoBlockStartAddr,tag,NULL,0,0)==0){
    6cf0:	d4 01       	movw	r26, r8
    6cf2:	1d 96       	adiw	r26, 0x0d	; 13
    6cf4:	6d 91       	ld	r22, X+
    6cf6:	7d 91       	ld	r23, X+
    6cf8:	8d 91       	ld	r24, X+
    6cfa:	9c 91       	ld	r25, X
    6cfc:	50 97       	sbiw	r26, 0x10	; 16
    6cfe:	19 e0       	ldi	r17, 0x09	; 9
    6d00:	66 0f       	add	r22, r22
    6d02:	77 1f       	adc	r23, r23
    6d04:	88 1f       	adc	r24, r24
    6d06:	99 1f       	adc	r25, r25
    6d08:	1a 95       	dec	r17
    6d0a:	d1 f7       	brne	.-12     	; 0x6d00 <loadWaveInfoBlock+0xb6>
    6d0c:	6a 0d       	add	r22, r10
    6d0e:	7b 1d       	adc	r23, r11
    6d10:	8c 1d       	adc	r24, r12
    6d12:	9d 1d       	adc	r25, r13
    6d14:	ee 24       	eor	r14, r14
    6d16:	00 e0       	ldi	r16, 0x00	; 0
    6d18:	10 e0       	ldi	r17, 0x00	; 0
    6d1a:	20 e0       	ldi	r18, 0x00	; 0
    6d1c:	30 e0       	ldi	r19, 0x00	; 0
    6d1e:	3e 01       	movw	r6, r28
    6d20:	08 94       	sec
    6d22:	61 1c       	adc	r6, r1
    6d24:	71 1c       	adc	r7, r1
    6d26:	a3 01       	movw	r20, r6
    6d28:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <findTag>
    6d2c:	89 2b       	or	r24, r25
    6d2e:	09 f0       	breq	.+2      	; 0x6d32 <loadWaveInfoBlock+0xe8>
    6d30:	90 c0       	rjmp	.+288    	; 0x6e52 <loadWaveInfoBlock+0x208>
			tag[0]='I';
    6d32:	59 82       	std	Y+1, r5	; 0x01
			tag[1]='A';
    6d34:	fa 82       	std	Y+2, r15	; 0x02
			tag[2]='R';
    6d36:	82 e5       	ldi	r24, 0x52	; 82
    6d38:	8b 83       	std	Y+3, r24	; 0x03
			tag[3]='T';
    6d3a:	84 e5       	ldi	r24, 0x54	; 84
    6d3c:	8c 83       	std	Y+4, r24	; 0x04
			findTag((file->firstSector*512)+infoBlockStartAddr,tag,infoTemp,sizeof(infoTemp),4);
    6d3e:	f4 01       	movw	r30, r8
    6d40:	65 85       	ldd	r22, Z+13	; 0x0d
    6d42:	76 85       	ldd	r23, Z+14	; 0x0e
    6d44:	87 85       	ldd	r24, Z+15	; 0x0f
    6d46:	90 89       	ldd	r25, Z+16	; 0x10
    6d48:	b9 e0       	ldi	r27, 0x09	; 9
    6d4a:	66 0f       	add	r22, r22
    6d4c:	77 1f       	adc	r23, r23
    6d4e:	88 1f       	adc	r24, r24
    6d50:	99 1f       	adc	r25, r25
    6d52:	ba 95       	dec	r27
    6d54:	d1 f7       	brne	.-12     	; 0x6d4a <loadWaveInfoBlock+0x100>
    6d56:	6a 0d       	add	r22, r10
    6d58:	7b 1d       	adc	r23, r11
    6d5a:	8c 1d       	adc	r24, r12
    6d5c:	9d 1d       	adc	r25, r13
    6d5e:	a4 e0       	ldi	r26, 0x04	; 4
    6d60:	ea 2e       	mov	r14, r26
    6d62:	00 e3       	ldi	r16, 0x30	; 48
    6d64:	10 e0       	ldi	r17, 0x00	; 0
    6d66:	25 eb       	ldi	r18, 0xB5	; 181
    6d68:	3a e0       	ldi	r19, 0x0A	; 10
    6d6a:	a3 01       	movw	r20, r6
    6d6c:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <findTag>
			//append to the concatenated song name
			pos=0;
			if(infoTemp[0]!=0){
    6d70:	80 91 b5 0a 	lds	r24, 0x0AB5
    6d74:	88 23       	and	r24, r24
    6d76:	11 f4       	brne	.+4      	; 0x6d7c <loadWaveInfoBlock+0x132>
    6d78:	ff 24       	eor	r15, r15
    6d7a:	28 c0       	rjmp	.+80     	; 0x6dcc <loadWaveInfoBlock+0x182>
    6d7c:	20 e0       	ldi	r18, 0x00	; 0
    6d7e:	30 e0       	ldi	r19, 0x00	; 0
    6d80:	92 2f       	mov	r25, r18
				i=0;
				while(i<sizeof(infoTemp)){
					c=infoTemp[i++];
    6d82:	f9 01       	movw	r30, r18
    6d84:	eb 54       	subi	r30, 0x4B	; 75
    6d86:	f5 4f       	sbci	r31, 0xF5	; 245
    6d88:	80 81       	ld	r24, Z
					if(c==0) break;
    6d8a:	88 23       	and	r24, r24
    6d8c:	51 f0       	breq	.+20     	; 0x6da2 <loadWaveInfoBlock+0x158>
					infoSong[pos++]=c;
    6d8e:	f9 01       	movw	r30, r18
    6d90:	ed 57       	subi	r30, 0x7D	; 125
    6d92:	f1 4f       	sbci	r31, 0xF1	; 241
    6d94:	80 83       	st	Z, r24
    6d96:	9f 5f       	subi	r25, 0xFF	; 255
    6d98:	2f 5f       	subi	r18, 0xFF	; 255
    6d9a:	3f 4f       	sbci	r19, 0xFF	; 255
			findTag((file->firstSector*512)+infoBlockStartAddr,tag,infoTemp,sizeof(infoTemp),4);
			//append to the concatenated song name
			pos=0;
			if(infoTemp[0]!=0){
				i=0;
				while(i<sizeof(infoTemp)){
    6d9c:	20 33       	cpi	r18, 0x30	; 48
    6d9e:	31 05       	cpc	r19, r1
    6da0:	79 f7       	brne	.-34     	; 0x6d80 <loadWaveInfoBlock+0x136>
					c=infoTemp[i++];
					if(c==0) break;
					infoSong[pos++]=c;
				}
				infoSong[pos++]=' ';
    6da2:	e9 2f       	mov	r30, r25
    6da4:	f0 e0       	ldi	r31, 0x00	; 0
    6da6:	ed 57       	subi	r30, 0x7D	; 125
    6da8:	f1 4f       	sbci	r31, 0xF1	; 241
    6daa:	20 e2       	ldi	r18, 0x20	; 32
    6dac:	20 83       	st	Z, r18
    6dae:	9f 5f       	subi	r25, 0xFF	; 255
				infoSong[pos++]='-';
    6db0:	e9 2f       	mov	r30, r25
    6db2:	f0 e0       	ldi	r31, 0x00	; 0
    6db4:	ed 57       	subi	r30, 0x7D	; 125
    6db6:	f1 4f       	sbci	r31, 0xF1	; 241
    6db8:	8d e2       	ldi	r24, 0x2D	; 45
    6dba:	80 83       	st	Z, r24
    6dbc:	9f 5f       	subi	r25, 0xFF	; 255
				infoSong[pos++]=' ';
    6dbe:	e9 2f       	mov	r30, r25
    6dc0:	f0 e0       	ldi	r31, 0x00	; 0
    6dc2:	ed 57       	subi	r30, 0x7D	; 125
    6dc4:	f1 4f       	sbci	r31, 0xF1	; 241
    6dc6:	20 83       	st	Z, r18
    6dc8:	f9 2e       	mov	r15, r25
    6dca:	f3 94       	inc	r15
			}

			//PrintRam(5,1,infoTemp);

			tag[0]='D';
    6dcc:	84 e4       	ldi	r24, 0x44	; 68
    6dce:	89 83       	std	Y+1, r24	; 0x01
			tag[1]='I';
    6dd0:	89 e4       	ldi	r24, 0x49	; 73
    6dd2:	8a 83       	std	Y+2, r24	; 0x02
			tag[2]='S';
    6dd4:	83 e5       	ldi	r24, 0x53	; 83
    6dd6:	8b 83       	std	Y+3, r24	; 0x03
			tag[3]='P';
    6dd8:	80 e5       	ldi	r24, 0x50	; 80
    6dda:	8c 83       	std	Y+4, r24	; 0x04
			findTag((file->firstSector*512)+infoBlockStartAddr,tag,infoTemp,sizeof(infoTemp),8);
    6ddc:	d4 01       	movw	r26, r8
    6dde:	1d 96       	adiw	r26, 0x0d	; 13
    6de0:	6d 91       	ld	r22, X+
    6de2:	7d 91       	ld	r23, X+
    6de4:	8d 91       	ld	r24, X+
    6de6:	9c 91       	ld	r25, X
    6de8:	50 97       	sbiw	r26, 0x10	; 16
    6dea:	f9 e0       	ldi	r31, 0x09	; 9
    6dec:	66 0f       	add	r22, r22
    6dee:	77 1f       	adc	r23, r23
    6df0:	88 1f       	adc	r24, r24
    6df2:	99 1f       	adc	r25, r25
    6df4:	fa 95       	dec	r31
    6df6:	d1 f7       	brne	.-12     	; 0x6dec <loadWaveInfoBlock+0x1a2>
    6df8:	6a 0d       	add	r22, r10
    6dfa:	7b 1d       	adc	r23, r11
    6dfc:	8c 1d       	adc	r24, r12
    6dfe:	9d 1d       	adc	r25, r13
    6e00:	e8 e0       	ldi	r30, 0x08	; 8
    6e02:	ee 2e       	mov	r14, r30
    6e04:	00 e3       	ldi	r16, 0x30	; 48
    6e06:	10 e0       	ldi	r17, 0x00	; 0
    6e08:	25 eb       	ldi	r18, 0xB5	; 181
    6e0a:	3a e0       	ldi	r19, 0x0A	; 10
    6e0c:	ae 01       	movw	r20, r28
    6e0e:	4f 5f       	subi	r20, 0xFF	; 255
    6e10:	5f 4f       	sbci	r21, 0xFF	; 255
    6e12:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <findTag>

			if(infoTemp[0]!=0){
    6e16:	80 91 b5 0a 	lds	r24, 0x0AB5
    6e1a:	88 23       	and	r24, r24
    6e1c:	81 f0       	breq	.+32     	; 0x6e3e <loadWaveInfoBlock+0x1f4>
    6e1e:	a5 eb       	ldi	r26, 0xB5	; 181
    6e20:	ba e0       	ldi	r27, 0x0A	; 10
				i=0;
				while(i<sizeof(infoTemp)){
					c=infoTemp[i++];
    6e22:	8c 91       	ld	r24, X
					if(c==0) break;
    6e24:	88 23       	and	r24, r24
    6e26:	59 f0       	breq	.+22     	; 0x6e3e <loadWaveInfoBlock+0x1f4>
					infoSong[pos++]=c;
    6e28:	ef 2d       	mov	r30, r15
    6e2a:	f0 e0       	ldi	r31, 0x00	; 0
    6e2c:	ed 57       	subi	r30, 0x7D	; 125
    6e2e:	f1 4f       	sbci	r31, 0xF1	; 241
    6e30:	80 83       	st	Z, r24
    6e32:	f3 94       	inc	r15
    6e34:	11 96       	adiw	r26, 0x01	; 1
			tag[3]='P';
			findTag((file->firstSector*512)+infoBlockStartAddr,tag,infoTemp,sizeof(infoTemp),8);

			if(infoTemp[0]!=0){
				i=0;
				while(i<sizeof(infoTemp)){
    6e36:	ea e0       	ldi	r30, 0x0A	; 10
    6e38:	a5 3e       	cpi	r26, 0xE5	; 229
    6e3a:	be 07       	cpc	r27, r30
    6e3c:	91 f7       	brne	.-28     	; 0x6e22 <loadWaveInfoBlock+0x1d8>
					c=infoTemp[i++];
					if(c==0) break;
					infoSong[pos++]=c;
				}
			}
			infoSong[pos]=0;
    6e3e:	ef 2d       	mov	r30, r15
    6e40:	f0 e0       	ldi	r31, 0x00	; 0
    6e42:	ed 57       	subi	r30, 0x7D	; 125
    6e44:	f1 4f       	sbci	r31, 0xF1	; 241
    6e46:	10 82       	st	Z, r1
			infoSongLen=pos;
    6e48:	f0 92 6a 0a 	sts	0x0A6A, r15
    6e4c:	20 e0       	ldi	r18, 0x00	; 0
    6e4e:	30 e0       	ldi	r19, 0x00	; 0
    6e50:	0d c0       	rjmp	.+26     	; 0x6e6c <loadWaveInfoBlock+0x222>
			
			//PrintRam(2,1,infoSong);

			return 0;
		}else{
			infoSongLen=0;
    6e52:	10 92 6a 0a 	sts	0x0A6A, r1
			infoSong[0]=0;
    6e56:	10 92 83 0e 	sts	0x0E83, r1
			soundDataStart=0;
    6e5a:	10 92 ec 0e 	sts	0x0EEC, r1
    6e5e:	10 92 eb 0e 	sts	0x0EEB, r1
    6e62:	21 e0       	ldi	r18, 0x01	; 1
    6e64:	30 e0       	ldi	r19, 0x00	; 0
    6e66:	02 c0       	rjmp	.+4      	; 0x6e6c <loadWaveInfoBlock+0x222>
			return 1;
    6e68:	2f ef       	ldi	r18, 0xFF	; 255
    6e6a:	3f ef       	ldi	r19, 0xFF	; 255
		}	
	}

	return -1;
}
    6e6c:	c9 01       	movw	r24, r18
    6e6e:	0f 90       	pop	r0
    6e70:	0f 90       	pop	r0
    6e72:	0f 90       	pop	r0
    6e74:	0f 90       	pop	r0
    6e76:	cf 91       	pop	r28
    6e78:	df 91       	pop	r29
    6e7a:	1f 91       	pop	r17
    6e7c:	0f 91       	pop	r16
    6e7e:	ff 90       	pop	r15
    6e80:	ef 90       	pop	r14
    6e82:	df 90       	pop	r13
    6e84:	cf 90       	pop	r12
    6e86:	bf 90       	pop	r11
    6e88:	af 90       	pop	r10
    6e8a:	9f 90       	pop	r9
    6e8c:	8f 90       	pop	r8
    6e8e:	7f 90       	pop	r7
    6e90:	6f 90       	pop	r6
    6e92:	5f 90       	pop	r5
    6e94:	08 95       	ret

00006e96 <printFileTime>:
	DrawMap2(x+12,4,map_digit0+(digit2*8));

}


void printFileTime(unsigned char x,unsigned char y,unsigned long songSize){
    6e96:	2f 92       	push	r2
    6e98:	3f 92       	push	r3
    6e9a:	4f 92       	push	r4
    6e9c:	5f 92       	push	r5
    6e9e:	6f 92       	push	r6
    6ea0:	7f 92       	push	r7
    6ea2:	8f 92       	push	r8
    6ea4:	9f 92       	push	r9
    6ea6:	af 92       	push	r10
    6ea8:	bf 92       	push	r11
    6eaa:	cf 92       	push	r12
    6eac:	df 92       	push	r13
    6eae:	ef 92       	push	r14
    6eb0:	ff 92       	push	r15
    6eb2:	0f 93       	push	r16
    6eb4:	1f 93       	push	r17
    6eb6:	48 2e       	mov	r4, r24
    6eb8:	56 2e       	mov	r5, r22
    6eba:	79 01       	movw	r14, r18
    6ebc:	8a 01       	movw	r16, r20
	//15734 bytes/sec @ 512bytes/sector
	//31 sectors/sec
	//1844 sectors/min
	//110630 sectors/hour

	hours=songSize/110630;
    6ebe:	ca 01       	movw	r24, r20
    6ec0:	b9 01       	movw	r22, r18
    6ec2:	26 e2       	ldi	r18, 0x26	; 38
    6ec4:	30 eb       	ldi	r19, 0xB0	; 176
    6ec6:	41 e0       	ldi	r20, 0x01	; 1
    6ec8:	50 e0       	ldi	r21, 0x00	; 0
    6eca:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6ece:	39 01       	movw	r6, r18
    6ed0:	4a 01       	movw	r8, r20
	temp=(songSize-(hours*110630));
    6ed2:	c4 01       	movw	r24, r8
    6ed4:	b3 01       	movw	r22, r6
    6ed6:	26 e2       	ldi	r18, 0x26	; 38
    6ed8:	30 eb       	ldi	r19, 0xB0	; 176
    6eda:	41 e0       	ldi	r20, 0x01	; 1
    6edc:	50 e0       	ldi	r21, 0x00	; 0
    6ede:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__mulsi3>
    6ee2:	e6 1a       	sub	r14, r22
    6ee4:	f7 0a       	sbc	r15, r23
    6ee6:	08 0b       	sbc	r16, r24
    6ee8:	19 0b       	sbc	r17, r25
	minutes=temp/1844;
    6eea:	c8 01       	movw	r24, r16
    6eec:	b7 01       	movw	r22, r14
    6eee:	24 e3       	ldi	r18, 0x34	; 52
    6ef0:	37 e0       	ldi	r19, 0x07	; 7
    6ef2:	40 e0       	ldi	r20, 0x00	; 0
    6ef4:	50 e0       	ldi	r21, 0x00	; 0
    6ef6:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6efa:	59 01       	movw	r10, r18
    6efc:	6a 01       	movw	r12, r20
	seconds=(temp-(minutes*1844))/31;
    6efe:	c6 01       	movw	r24, r12
    6f00:	b5 01       	movw	r22, r10
    6f02:	24 e3       	ldi	r18, 0x34	; 52
    6f04:	37 e0       	ldi	r19, 0x07	; 7
    6f06:	40 e0       	ldi	r20, 0x00	; 0
    6f08:	50 e0       	ldi	r21, 0x00	; 0
    6f0a:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__mulsi3>
    6f0e:	e6 1a       	sub	r14, r22
    6f10:	f7 0a       	sbc	r15, r23
    6f12:	08 0b       	sbc	r16, r24
    6f14:	19 0b       	sbc	r17, r25
    6f16:	c8 01       	movw	r24, r16
    6f18:	b7 01       	movw	r22, r14
    6f1a:	2f e1       	ldi	r18, 0x1F	; 31
    6f1c:	30 e0       	ldi	r19, 0x00	; 0
    6f1e:	40 e0       	ldi	r20, 0x00	; 0
    6f20:	50 e0       	ldi	r21, 0x00	; 0
    6f22:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6f26:	79 01       	movw	r14, r18
    6f28:	34 2e       	mov	r3, r20
    6f2a:	25 2e       	mov	r2, r21
	
	//print hours
	digit1=(hours/10)%10;
	digit2=hours%10;
	if(hours>0 && digit1>0) PrintChar(x,y,digit1+'0');
    6f2c:	61 14       	cp	r6, r1
    6f2e:	71 04       	cpc	r7, r1
    6f30:	81 04       	cpc	r8, r1
    6f32:	91 04       	cpc	r9, r1
    6f34:	99 f1       	breq	.+102    	; 0x6f9c <printFileTime+0x106>
	temp=(songSize-(hours*110630));
	minutes=temp/1844;
	seconds=(temp-(minutes*1844))/31;
	
	//print hours
	digit1=(hours/10)%10;
    6f36:	c4 01       	movw	r24, r8
    6f38:	b3 01       	movw	r22, r6
    6f3a:	2a e0       	ldi	r18, 0x0A	; 10
    6f3c:	30 e0       	ldi	r19, 0x00	; 0
    6f3e:	40 e0       	ldi	r20, 0x00	; 0
    6f40:	50 e0       	ldi	r21, 0x00	; 0
    6f42:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6f46:	ca 01       	movw	r24, r20
    6f48:	b9 01       	movw	r22, r18
    6f4a:	2a e0       	ldi	r18, 0x0A	; 10
    6f4c:	30 e0       	ldi	r19, 0x00	; 0
    6f4e:	40 e0       	ldi	r20, 0x00	; 0
    6f50:	50 e0       	ldi	r21, 0x00	; 0
    6f52:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6f56:	46 2f       	mov	r20, r22
	digit2=hours%10;
	if(hours>0 && digit1>0) PrintChar(x,y,digit1+'0');
    6f58:	66 23       	and	r22, r22
    6f5a:	39 f0       	breq	.+14     	; 0x6f6a <printFileTime+0xd4>
    6f5c:	40 5d       	subi	r20, 0xD0	; 208
    6f5e:	65 2d       	mov	r22, r5
    6f60:	70 e0       	ldi	r23, 0x00	; 0
    6f62:	84 2d       	mov	r24, r4
    6f64:	90 e0       	ldi	r25, 0x00	; 0
    6f66:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
	if(hours>0) PrintChar(x+1,y,digit2+'0');
    6f6a:	04 2d       	mov	r16, r4
    6f6c:	10 e0       	ldi	r17, 0x00	; 0
    6f6e:	c4 01       	movw	r24, r8
    6f70:	b3 01       	movw	r22, r6
    6f72:	2a e0       	ldi	r18, 0x0A	; 10
    6f74:	30 e0       	ldi	r19, 0x00	; 0
    6f76:	40 e0       	ldi	r20, 0x00	; 0
    6f78:	50 e0       	ldi	r21, 0x00	; 0
    6f7a:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6f7e:	46 2f       	mov	r20, r22
    6f80:	40 5d       	subi	r20, 0xD0	; 208
    6f82:	65 2d       	mov	r22, r5
    6f84:	70 e0       	ldi	r23, 0x00	; 0
    6f86:	c8 01       	movw	r24, r16
    6f88:	01 96       	adiw	r24, 0x01	; 1
    6f8a:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
	if(hours>0) PrintChar(x+2,y,':');
    6f8e:	4a e3       	ldi	r20, 0x3A	; 58
    6f90:	65 2d       	mov	r22, r5
    6f92:	70 e0       	ldi	r23, 0x00	; 0
    6f94:	c8 01       	movw	r24, r16
    6f96:	02 96       	adiw	r24, 0x02	; 2
    6f98:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>

	digit1=(minutes/10)%10;
    6f9c:	c6 01       	movw	r24, r12
    6f9e:	b5 01       	movw	r22, r10
    6fa0:	2a e0       	ldi	r18, 0x0A	; 10
    6fa2:	30 e0       	ldi	r19, 0x00	; 0
    6fa4:	40 e0       	ldi	r20, 0x00	; 0
    6fa6:	50 e0       	ldi	r21, 0x00	; 0
    6fa8:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6fac:	ca 01       	movw	r24, r20
    6fae:	b9 01       	movw	r22, r18
    6fb0:	2a e0       	ldi	r18, 0x0A	; 10
    6fb2:	30 e0       	ldi	r19, 0x00	; 0
    6fb4:	40 e0       	ldi	r20, 0x00	; 0
    6fb6:	50 e0       	ldi	r21, 0x00	; 0
    6fb8:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    6fbc:	46 2f       	mov	r20, r22
	digit2=minutes%10;
	if(hours>0 || digit1>0)PrintChar(x+3,y,digit1+'0');
    6fbe:	61 14       	cp	r6, r1
    6fc0:	71 04       	cpc	r7, r1
    6fc2:	81 04       	cpc	r8, r1
    6fc4:	91 04       	cpc	r9, r1
    6fc6:	11 f4       	brne	.+4      	; 0x6fcc <printFileTime+0x136>
    6fc8:	66 23       	and	r22, r22
    6fca:	69 f0       	breq	.+26     	; 0x6fe6 <printFileTime+0x150>
    6fcc:	40 5d       	subi	r20, 0xD0	; 208
    6fce:	84 2d       	mov	r24, r4
    6fd0:	90 e0       	ldi	r25, 0x00	; 0
    6fd2:	65 2d       	mov	r22, r5
    6fd4:	70 e0       	ldi	r23, 0x00	; 0
    6fd6:	03 96       	adiw	r24, 0x03	; 3
    6fd8:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
	if(hours>0 || minutes>0)PrintChar(x+4,y,digit2+'0');
    6fdc:	61 14       	cp	r6, r1
    6fde:	71 04       	cpc	r7, r1
    6fe0:	81 04       	cpc	r8, r1
    6fe2:	91 04       	cpc	r9, r1
    6fe4:	29 f4       	brne	.+10     	; 0x6ff0 <printFileTime+0x15a>
    6fe6:	a1 14       	cp	r10, r1
    6fe8:	b1 04       	cpc	r11, r1
    6fea:	c1 04       	cpc	r12, r1
    6fec:	d1 04       	cpc	r13, r1
    6fee:	89 f0       	breq	.+34     	; 0x7012 <printFileTime+0x17c>
    6ff0:	c6 01       	movw	r24, r12
    6ff2:	b5 01       	movw	r22, r10
    6ff4:	2a e0       	ldi	r18, 0x0A	; 10
    6ff6:	30 e0       	ldi	r19, 0x00	; 0
    6ff8:	40 e0       	ldi	r20, 0x00	; 0
    6ffa:	50 e0       	ldi	r21, 0x00	; 0
    6ffc:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7000:	46 2f       	mov	r20, r22
    7002:	40 5d       	subi	r20, 0xD0	; 208
    7004:	84 2d       	mov	r24, r4
    7006:	90 e0       	ldi	r25, 0x00	; 0
    7008:	65 2d       	mov	r22, r5
    700a:	70 e0       	ldi	r23, 0x00	; 0
    700c:	04 96       	adiw	r24, 0x04	; 4
    700e:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
	PrintChar(x+5,y,':');
    7012:	04 2d       	mov	r16, r4
    7014:	10 e0       	ldi	r17, 0x00	; 0
    7016:	4a e3       	ldi	r20, 0x3A	; 58
    7018:	65 2d       	mov	r22, r5
    701a:	70 e0       	ldi	r23, 0x00	; 0
    701c:	c8 01       	movw	r24, r16
    701e:	05 96       	adiw	r24, 0x05	; 5
    7020:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>

	digit1=(seconds/10)%10;
	digit2=seconds%10;
	PrintChar(x+6,y,digit1+'0');
    7024:	b7 01       	movw	r22, r14
    7026:	83 2d       	mov	r24, r3
    7028:	92 2d       	mov	r25, r2
    702a:	2a e0       	ldi	r18, 0x0A	; 10
    702c:	30 e0       	ldi	r19, 0x00	; 0
    702e:	40 e0       	ldi	r20, 0x00	; 0
    7030:	50 e0       	ldi	r21, 0x00	; 0
    7032:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7036:	ca 01       	movw	r24, r20
    7038:	b9 01       	movw	r22, r18
    703a:	2a e0       	ldi	r18, 0x0A	; 10
    703c:	30 e0       	ldi	r19, 0x00	; 0
    703e:	40 e0       	ldi	r20, 0x00	; 0
    7040:	50 e0       	ldi	r21, 0x00	; 0
    7042:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7046:	46 2f       	mov	r20, r22
    7048:	40 5d       	subi	r20, 0xD0	; 208
    704a:	65 2d       	mov	r22, r5
    704c:	70 e0       	ldi	r23, 0x00	; 0
    704e:	c8 01       	movw	r24, r16
    7050:	06 96       	adiw	r24, 0x06	; 6
    7052:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
	PrintChar(x+7,y,digit2+'0');
    7056:	b7 01       	movw	r22, r14
    7058:	83 2d       	mov	r24, r3
    705a:	92 2d       	mov	r25, r2
    705c:	2a e0       	ldi	r18, 0x0A	; 10
    705e:	30 e0       	ldi	r19, 0x00	; 0
    7060:	40 e0       	ldi	r20, 0x00	; 0
    7062:	50 e0       	ldi	r21, 0x00	; 0
    7064:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7068:	46 2f       	mov	r20, r22
    706a:	40 5d       	subi	r20, 0xD0	; 208
    706c:	65 2d       	mov	r22, r5
    706e:	70 e0       	ldi	r23, 0x00	; 0
    7070:	c8 01       	movw	r24, r16
    7072:	07 96       	adiw	r24, 0x07	; 7
    7074:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>


}
    7078:	1f 91       	pop	r17
    707a:	0f 91       	pop	r16
    707c:	ff 90       	pop	r15
    707e:	ef 90       	pop	r14
    7080:	df 90       	pop	r13
    7082:	cf 90       	pop	r12
    7084:	bf 90       	pop	r11
    7086:	af 90       	pop	r10
    7088:	9f 90       	pop	r9
    708a:	8f 90       	pop	r8
    708c:	7f 90       	pop	r7
    708e:	6f 90       	pop	r6
    7090:	5f 90       	pop	r5
    7092:	4f 90       	pop	r4
    7094:	3f 90       	pop	r3
    7096:	2f 90       	pop	r2
    7098:	08 95       	ret

0000709a <printDigits>:
	
	wait++;

}

void printDigits(unsigned long currentSectorNo,unsigned long songSize ){
    709a:	2f 92       	push	r2
    709c:	3f 92       	push	r3
    709e:	4f 92       	push	r4
    70a0:	5f 92       	push	r5
    70a2:	6f 92       	push	r6
    70a4:	7f 92       	push	r7
    70a6:	8f 92       	push	r8
    70a8:	9f 92       	push	r9
    70aa:	af 92       	push	r10
    70ac:	bf 92       	push	r11
    70ae:	cf 92       	push	r12
    70b0:	df 92       	push	r13
    70b2:	ef 92       	push	r14
    70b4:	ff 92       	push	r15
    70b6:	0f 93       	push	r16
    70b8:	1f 93       	push	r17
    70ba:	7b 01       	movw	r14, r22
    70bc:	8c 01       	movw	r16, r24
	//15734 bytes/sec @ 512bytes/sector
	//31 sectors/sec
	//1844 sectors/min
	//110630 sectors/hour

	hours=currentSectorNo/110630;
    70be:	26 e2       	ldi	r18, 0x26	; 38
    70c0:	30 eb       	ldi	r19, 0xB0	; 176
    70c2:	41 e0       	ldi	r20, 0x01	; 1
    70c4:	50 e0       	ldi	r21, 0x00	; 0
    70c6:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    70ca:	d2 2e       	mov	r13, r18
    70cc:	c3 2e       	mov	r12, r19
    70ce:	b4 2e       	mov	r11, r20
    70d0:	a5 2e       	mov	r10, r21
	temp=(currentSectorNo-(hours*110630));
    70d2:	62 2f       	mov	r22, r18
    70d4:	73 2f       	mov	r23, r19
    70d6:	84 2f       	mov	r24, r20
    70d8:	95 2f       	mov	r25, r21
    70da:	26 e2       	ldi	r18, 0x26	; 38
    70dc:	30 eb       	ldi	r19, 0xB0	; 176
    70de:	41 e0       	ldi	r20, 0x01	; 1
    70e0:	50 e0       	ldi	r21, 0x00	; 0
    70e2:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__mulsi3>
    70e6:	e6 1a       	sub	r14, r22
    70e8:	f7 0a       	sbc	r15, r23
    70ea:	08 0b       	sbc	r16, r24
    70ec:	19 0b       	sbc	r17, r25
	minutes=temp/1844;
    70ee:	c8 01       	movw	r24, r16
    70f0:	b7 01       	movw	r22, r14
    70f2:	24 e3       	ldi	r18, 0x34	; 52
    70f4:	37 e0       	ldi	r19, 0x07	; 7
    70f6:	40 e0       	ldi	r20, 0x00	; 0
    70f8:	50 e0       	ldi	r21, 0x00	; 0
    70fa:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    70fe:	92 2e       	mov	r9, r18
    7100:	83 2e       	mov	r8, r19
    7102:	74 2e       	mov	r7, r20
    7104:	65 2e       	mov	r6, r21
	seconds=(temp-(minutes*1844))/31;
    7106:	62 2f       	mov	r22, r18
    7108:	73 2f       	mov	r23, r19
    710a:	84 2f       	mov	r24, r20
    710c:	95 2f       	mov	r25, r21
    710e:	24 e3       	ldi	r18, 0x34	; 52
    7110:	37 e0       	ldi	r19, 0x07	; 7
    7112:	40 e0       	ldi	r20, 0x00	; 0
    7114:	50 e0       	ldi	r21, 0x00	; 0
    7116:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__mulsi3>
    711a:	e6 1a       	sub	r14, r22
    711c:	f7 0a       	sbc	r15, r23
    711e:	08 0b       	sbc	r16, r24
    7120:	19 0b       	sbc	r17, r25
    7122:	c8 01       	movw	r24, r16
    7124:	b7 01       	movw	r22, r14
    7126:	2f e1       	ldi	r18, 0x1F	; 31
    7128:	30 e0       	ldi	r19, 0x00	; 0
    712a:	40 e0       	ldi	r20, 0x00	; 0
    712c:	50 e0       	ldi	r21, 0x00	; 0
    712e:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7132:	52 2e       	mov	r5, r18
    7134:	43 2e       	mov	r4, r19
    7136:	34 2e       	mov	r3, r20
    7138:	25 2e       	mov	r2, r21
	
	//print hours
	digit1=(hours/10)%10;
	digit2=hours%10;
	DrawMap2(x+0,4,map_digit0+(digit1*8));
    713a:	6d 2d       	mov	r22, r13
    713c:	7c 2d       	mov	r23, r12
    713e:	8b 2d       	mov	r24, r11
    7140:	9a 2d       	mov	r25, r10
    7142:	2a e0       	ldi	r18, 0x0A	; 10
    7144:	30 e0       	ldi	r19, 0x00	; 0
    7146:	40 e0       	ldi	r20, 0x00	; 0
    7148:	50 e0       	ldi	r21, 0x00	; 0
    714a:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    714e:	ca 01       	movw	r24, r20
    7150:	b9 01       	movw	r22, r18
    7152:	2a e0       	ldi	r18, 0x0A	; 10
    7154:	30 e0       	ldi	r19, 0x00	; 0
    7156:	40 e0       	ldi	r20, 0x00	; 0
    7158:	50 e0       	ldi	r21, 0x00	; 0
    715a:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    715e:	46 2f       	mov	r20, r22
    7160:	50 e0       	ldi	r21, 0x00	; 0
    7162:	73 e0       	ldi	r23, 0x03	; 3
    7164:	44 0f       	add	r20, r20
    7166:	55 1f       	adc	r21, r21
    7168:	7a 95       	dec	r23
    716a:	e1 f7       	brne	.-8      	; 0x7164 <printDigits+0xca>
    716c:	00 e7       	ldi	r16, 0x70	; 112
    716e:	13 e4       	ldi	r17, 0x43	; 67
    7170:	40 0f       	add	r20, r16
    7172:	51 1f       	adc	r21, r17
    7174:	64 e0       	ldi	r22, 0x04	; 4
    7176:	83 e0       	ldi	r24, 0x03	; 3
    7178:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	DrawMap2(x+2,4,map_digit0+(digit2*8));
    717c:	6d 2d       	mov	r22, r13
    717e:	7c 2d       	mov	r23, r12
    7180:	8b 2d       	mov	r24, r11
    7182:	9a 2d       	mov	r25, r10
    7184:	2a e0       	ldi	r18, 0x0A	; 10
    7186:	30 e0       	ldi	r19, 0x00	; 0
    7188:	40 e0       	ldi	r20, 0x00	; 0
    718a:	50 e0       	ldi	r21, 0x00	; 0
    718c:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7190:	46 2f       	mov	r20, r22
    7192:	50 e0       	ldi	r21, 0x00	; 0
    7194:	63 e0       	ldi	r22, 0x03	; 3
    7196:	44 0f       	add	r20, r20
    7198:	55 1f       	adc	r21, r21
    719a:	6a 95       	dec	r22
    719c:	e1 f7       	brne	.-8      	; 0x7196 <printDigits+0xfc>
    719e:	40 0f       	add	r20, r16
    71a0:	51 1f       	adc	r21, r17
    71a2:	64 e0       	ldi	r22, 0x04	; 4
    71a4:	85 e0       	ldi	r24, 0x05	; 5
    71a6:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	DrawMap2(x+4,4,map_digitSep);
    71aa:	4b e6       	ldi	r20, 0x6B	; 107
    71ac:	e4 2e       	mov	r14, r20
    71ae:	43 e4       	ldi	r20, 0x43	; 67
    71b0:	f4 2e       	mov	r15, r20
    71b2:	a7 01       	movw	r20, r14
    71b4:	64 e0       	ldi	r22, 0x04	; 4
    71b6:	87 e0       	ldi	r24, 0x07	; 7
    71b8:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	digit1=(minutes/10)%10;
	digit2=minutes%10;
	DrawMap2(x+5,4,map_digit0+(digit1*8));
    71bc:	69 2d       	mov	r22, r9
    71be:	78 2d       	mov	r23, r8
    71c0:	87 2d       	mov	r24, r7
    71c2:	96 2d       	mov	r25, r6
    71c4:	2a e0       	ldi	r18, 0x0A	; 10
    71c6:	30 e0       	ldi	r19, 0x00	; 0
    71c8:	40 e0       	ldi	r20, 0x00	; 0
    71ca:	50 e0       	ldi	r21, 0x00	; 0
    71cc:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    71d0:	ca 01       	movw	r24, r20
    71d2:	b9 01       	movw	r22, r18
    71d4:	2a e0       	ldi	r18, 0x0A	; 10
    71d6:	30 e0       	ldi	r19, 0x00	; 0
    71d8:	40 e0       	ldi	r20, 0x00	; 0
    71da:	50 e0       	ldi	r21, 0x00	; 0
    71dc:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    71e0:	46 2f       	mov	r20, r22
    71e2:	50 e0       	ldi	r21, 0x00	; 0
    71e4:	33 e0       	ldi	r19, 0x03	; 3
    71e6:	44 0f       	add	r20, r20
    71e8:	55 1f       	adc	r21, r21
    71ea:	3a 95       	dec	r19
    71ec:	e1 f7       	brne	.-8      	; 0x71e6 <printDigits+0x14c>
    71ee:	40 0f       	add	r20, r16
    71f0:	51 1f       	adc	r21, r17
    71f2:	64 e0       	ldi	r22, 0x04	; 4
    71f4:	88 e0       	ldi	r24, 0x08	; 8
    71f6:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	DrawMap2(x+7,4,map_digit0+(digit2*8));
    71fa:	69 2d       	mov	r22, r9
    71fc:	78 2d       	mov	r23, r8
    71fe:	87 2d       	mov	r24, r7
    7200:	96 2d       	mov	r25, r6
    7202:	2a e0       	ldi	r18, 0x0A	; 10
    7204:	30 e0       	ldi	r19, 0x00	; 0
    7206:	40 e0       	ldi	r20, 0x00	; 0
    7208:	50 e0       	ldi	r21, 0x00	; 0
    720a:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    720e:	46 2f       	mov	r20, r22
    7210:	50 e0       	ldi	r21, 0x00	; 0
    7212:	23 e0       	ldi	r18, 0x03	; 3
    7214:	44 0f       	add	r20, r20
    7216:	55 1f       	adc	r21, r21
    7218:	2a 95       	dec	r18
    721a:	e1 f7       	brne	.-8      	; 0x7214 <printDigits+0x17a>
    721c:	40 0f       	add	r20, r16
    721e:	51 1f       	adc	r21, r17
    7220:	64 e0       	ldi	r22, 0x04	; 4
    7222:	8a e0       	ldi	r24, 0x0A	; 10
    7224:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	DrawMap2(x+9,4,map_digitSep);
    7228:	a7 01       	movw	r20, r14
    722a:	64 e0       	ldi	r22, 0x04	; 4
    722c:	8c e0       	ldi	r24, 0x0C	; 12
    722e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	digit1=(seconds/10)%10;
	digit2=seconds%10;
	DrawMap2(x+10,4,map_digit0+(digit1*8));
    7232:	65 2d       	mov	r22, r5
    7234:	74 2d       	mov	r23, r4
    7236:	83 2d       	mov	r24, r3
    7238:	92 2d       	mov	r25, r2
    723a:	2a e0       	ldi	r18, 0x0A	; 10
    723c:	30 e0       	ldi	r19, 0x00	; 0
    723e:	40 e0       	ldi	r20, 0x00	; 0
    7240:	50 e0       	ldi	r21, 0x00	; 0
    7242:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7246:	ca 01       	movw	r24, r20
    7248:	b9 01       	movw	r22, r18
    724a:	2a e0       	ldi	r18, 0x0A	; 10
    724c:	30 e0       	ldi	r19, 0x00	; 0
    724e:	40 e0       	ldi	r20, 0x00	; 0
    7250:	50 e0       	ldi	r21, 0x00	; 0
    7252:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7256:	46 2f       	mov	r20, r22
    7258:	50 e0       	ldi	r21, 0x00	; 0
    725a:	93 e0       	ldi	r25, 0x03	; 3
    725c:	44 0f       	add	r20, r20
    725e:	55 1f       	adc	r21, r21
    7260:	9a 95       	dec	r25
    7262:	e1 f7       	brne	.-8      	; 0x725c <printDigits+0x1c2>
    7264:	40 0f       	add	r20, r16
    7266:	51 1f       	adc	r21, r17
    7268:	64 e0       	ldi	r22, 0x04	; 4
    726a:	8d e0       	ldi	r24, 0x0D	; 13
    726c:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	DrawMap2(x+12,4,map_digit0+(digit2*8));
    7270:	65 2d       	mov	r22, r5
    7272:	74 2d       	mov	r23, r4
    7274:	83 2d       	mov	r24, r3
    7276:	92 2d       	mov	r25, r2
    7278:	2a e0       	ldi	r18, 0x0A	; 10
    727a:	30 e0       	ldi	r19, 0x00	; 0
    727c:	40 e0       	ldi	r20, 0x00	; 0
    727e:	50 e0       	ldi	r21, 0x00	; 0
    7280:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7284:	70 e0       	ldi	r23, 0x00	; 0
    7286:	83 e0       	ldi	r24, 0x03	; 3
    7288:	66 0f       	add	r22, r22
    728a:	77 1f       	adc	r23, r23
    728c:	8a 95       	dec	r24
    728e:	e1 f7       	brne	.-8      	; 0x7288 <printDigits+0x1ee>
    7290:	06 0f       	add	r16, r22
    7292:	17 1f       	adc	r17, r23
    7294:	a8 01       	movw	r20, r16
    7296:	64 e0       	ldi	r22, 0x04	; 4
    7298:	8f e0       	ldi	r24, 0x0F	; 15
    729a:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>

}
    729e:	1f 91       	pop	r17
    72a0:	0f 91       	pop	r16
    72a2:	ff 90       	pop	r15
    72a4:	ef 90       	pop	r14
    72a6:	df 90       	pop	r13
    72a8:	cf 90       	pop	r12
    72aa:	bf 90       	pop	r11
    72ac:	af 90       	pop	r10
    72ae:	9f 90       	pop	r9
    72b0:	8f 90       	pop	r8
    72b2:	7f 90       	pop	r7
    72b4:	6f 90       	pop	r6
    72b6:	5f 90       	pop	r5
    72b8:	4f 90       	pop	r4
    72ba:	3f 90       	pop	r3
    72bc:	2f 90       	pop	r2
    72be:	08 95       	ret

000072c0 <animateTextLine>:

	return -1;
}


void animateTextLine(bool reset){
    72c0:	0f 93       	push	r16
    72c2:	1f 93       	push	r17
    72c4:	cf 93       	push	r28
    72c6:	df 93       	push	r29
    72c8:	18 2f       	mov	r17, r24

	static unsigned char pos=0,wait=0;
	unsigned char curPos=pos,c;
    72ca:	00 91 7f 0a 	lds	r16, 0x0A7F
	SetFontTilesIndex(MAIN_TILESET_SIZE+FONT_TILESET_SIZE);
    72ce:	87 eb       	ldi	r24, 0xB7	; 183
    72d0:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SetFontTilesIndex>
	
	if(reset){
    72d4:	11 23       	and	r17, r17
    72d6:	f1 f0       	breq	.+60     	; 0x7314 <animateTextLine+0x54>
		pos=0;
    72d8:	10 92 7f 0a 	sts	0x0A7F, r1
		curPos=0;
		if(infoSongLen<=24){
    72dc:	80 91 6a 0a 	lds	r24, 0x0A6A
    72e0:	89 31       	cpi	r24, 0x19	; 25
    72e2:	a0 f4       	brcc	.+40     	; 0x730c <animateTextLine+0x4c>
    72e4:	c3 e0       	ldi	r28, 0x03	; 3
    72e6:	d0 e0       	ldi	r29, 0x00	; 0
			for(char i=0;i<24;i++)PrintChar(3+i,7,' ');
    72e8:	40 e2       	ldi	r20, 0x20	; 32
    72ea:	67 e0       	ldi	r22, 0x07	; 7
    72ec:	70 e0       	ldi	r23, 0x00	; 0
    72ee:	ce 01       	movw	r24, r28
    72f0:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
    72f4:	21 96       	adiw	r28, 0x01	; 1
    72f6:	cb 31       	cpi	r28, 0x1B	; 27
    72f8:	d1 05       	cpc	r29, r1
    72fa:	b1 f7       	brne	.-20     	; 0x72e8 <animateTextLine+0x28>
			PrintRam(3,7,infoSong);
    72fc:	43 e8       	ldi	r20, 0x83	; 131
    72fe:	5e e0       	ldi	r21, 0x0E	; 14
    7300:	67 e0       	ldi	r22, 0x07	; 7
    7302:	70 e0       	ldi	r23, 0x00	; 0
    7304:	83 e0       	ldi	r24, 0x03	; 3
    7306:	90 e0       	ldi	r25, 0x00	; 0
    7308:	0e 94 b5 30 	call	0x616a	; 0x616a <PrintRam>
		}
		wait=20;
    730c:	84 e1       	ldi	r24, 0x14	; 20
    730e:	80 93 7e 0a 	sts	0x0A7E, r24
    7312:	00 e0       	ldi	r16, 0x00	; 0
	}
	
	if(wait>=20){
    7314:	80 91 7e 0a 	lds	r24, 0x0A7E
    7318:	84 31       	cpi	r24, 0x14	; 20
    731a:	b0 f1       	brcs	.+108    	; 0x7388 <animateTextLine+0xc8>

		if(infoSongLen>24){
    731c:	80 91 6a 0a 	lds	r24, 0x0A6A
    7320:	89 31       	cpi	r24, 0x19	; 25
    7322:	90 f1       	brcs	.+100    	; 0x7388 <animateTextLine+0xc8>
    7324:	c3 e0       	ldi	r28, 0x03	; 3
    7326:	d0 e0       	ldi	r29, 0x00	; 0
			for(int i=0;i<24;i++){
				if(curPos>=infoSongLen){
    7328:	80 91 6a 0a 	lds	r24, 0x0A6A
    732c:	08 17       	cp	r16, r24
    732e:	10 f0       	brcs	.+4      	; 0x7334 <animateTextLine+0x74>
    7330:	40 e2       	ldi	r20, 0x20	; 32
    7332:	05 c0       	rjmp	.+10     	; 0x733e <animateTextLine+0x7e>
					c=32;
				}else{
					c=infoSong[curPos];
    7334:	e0 2f       	mov	r30, r16
    7336:	f0 e0       	ldi	r31, 0x00	; 0
    7338:	ed 57       	subi	r30, 0x7D	; 125
    733a:	f1 4f       	sbci	r31, 0xF1	; 241
    733c:	40 81       	ld	r20, Z
				}
				PrintChar(i+3,7,c);
    733e:	67 e0       	ldi	r22, 0x07	; 7
    7340:	70 e0       	ldi	r23, 0x00	; 0
    7342:	ce 01       	movw	r24, r28
    7344:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
				curPos++;
    7348:	0f 5f       	subi	r16, 0xFF	; 255
				if(curPos>=(infoSongLen+4)) curPos=0;
    734a:	40 91 6a 0a 	lds	r20, 0x0A6A
    734e:	84 2f       	mov	r24, r20
    7350:	90 e0       	ldi	r25, 0x00	; 0
    7352:	03 96       	adiw	r24, 0x03	; 3
    7354:	20 2f       	mov	r18, r16
    7356:	30 e0       	ldi	r19, 0x00	; 0
    7358:	82 17       	cp	r24, r18
    735a:	93 07       	cpc	r25, r19
    735c:	0c f4       	brge	.+2      	; 0x7360 <animateTextLine+0xa0>
    735e:	00 e0       	ldi	r16, 0x00	; 0
    7360:	21 96       	adiw	r28, 0x01	; 1
	}
	
	if(wait>=20){

		if(infoSongLen>24){
			for(int i=0;i<24;i++){
    7362:	cb 31       	cpi	r28, 0x1B	; 27
    7364:	d1 05       	cpc	r29, r1
    7366:	01 f7       	brne	.-64     	; 0x7328 <animateTextLine+0x68>
				PrintChar(i+3,7,c);
				curPos++;
				if(curPos>=(infoSongLen+4)) curPos=0;
			}

			wait=0;
    7368:	10 92 7e 0a 	sts	0x0A7E, r1
			pos++;
    736c:	20 91 7f 0a 	lds	r18, 0x0A7F
    7370:	2f 5f       	subi	r18, 0xFF	; 255
    7372:	20 93 7f 0a 	sts	0x0A7F, r18
			if(pos>=(infoSongLen+4)) pos=0;
    7376:	84 2f       	mov	r24, r20
    7378:	90 e0       	ldi	r25, 0x00	; 0
    737a:	03 96       	adiw	r24, 0x03	; 3
    737c:	30 e0       	ldi	r19, 0x00	; 0
    737e:	82 17       	cp	r24, r18
    7380:	93 07       	cpc	r25, r19
    7382:	14 f4       	brge	.+4      	; 0x7388 <animateTextLine+0xc8>
    7384:	10 92 7f 0a 	sts	0x0A7F, r1
		}
	}
	
	wait++;
    7388:	80 91 7e 0a 	lds	r24, 0x0A7E
    738c:	8f 5f       	subi	r24, 0xFF	; 255
    738e:	80 93 7e 0a 	sts	0x0A7E, r24

}
    7392:	df 91       	pop	r29
    7394:	cf 91       	pop	r28
    7396:	1f 91       	pop	r17
    7398:	0f 91       	pop	r16
    739a:	08 95       	ret

0000739c <stopSong>:
		playing=true;
		mmc_mixerStart(sectorNo);
		
}

void stopSong(){
    739c:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <mmc_mixerStop>
	mmc_mixerStop();
	playing=false;
    73a0:	10 92 6b 0a 	sts	0x0A6B, r1
}
    73a4:	08 95       	ret

000073a6 <pauseSong>:
void pauseSong(){
    73a6:	80 91 6b 0a 	lds	r24, 0x0A6B
    73aa:	88 23       	and	r24, r24
    73ac:	29 f0       	breq	.+10     	; 0x73b8 <pauseSong+0x12>
	if(playing){
		mmc_mixerStop();
    73ae:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <mmc_mixerStop>
		playing=false;
    73b2:	10 92 6b 0a 	sts	0x0A6B, r1
    73b6:	08 95       	ret
	}else{
		mmc_mixerStart(sectorNo);
    73b8:	60 91 6e 0a 	lds	r22, 0x0A6E
    73bc:	70 91 6f 0a 	lds	r23, 0x0A6F
    73c0:	80 91 70 0a 	lds	r24, 0x0A70
    73c4:	90 91 71 0a 	lds	r25, 0x0A71
    73c8:	0e 94 03 33 	call	0x6606	; 0x6606 <mmc_mixerStart>
		playing=true;		
    73cc:	81 e0       	ldi	r24, 0x01	; 1
    73ce:	80 93 6b 0a 	sts	0x0A6B, r24
    73d2:	08 95       	ret

000073d4 <startSong>:

   }

} 

void startSong(){
    73d4:	80 91 6b 0a 	lds	r24, 0x0A6B
    73d8:	88 23       	and	r24, r24
    73da:	11 f0       	breq	.+4      	; 0x73e0 <startSong+0xc>
    73dc:	0e 94 ce 39 	call	0x739c	; 0x739c <stopSong>
		if(playing) stopSong();

		playingFile=cur;
    73e0:	20 91 7b 0e 	lds	r18, 0x0E7B
    73e4:	30 91 7c 0e 	lds	r19, 0x0E7C
    73e8:	30 93 73 0a 	sts	0x0A73, r19
    73ec:	20 93 72 0a 	sts	0x0A72, r18
		sectorNo=files[playingFile].firstSector+1; //skip WAV header
    73f0:	85 e1       	ldi	r24, 0x15	; 21
    73f2:	90 e0       	ldi	r25, 0x00	; 0
    73f4:	28 9f       	mul	r18, r24
    73f6:	f0 01       	movw	r30, r0
    73f8:	29 9f       	mul	r18, r25
    73fa:	f0 0d       	add	r31, r0
    73fc:	38 9f       	mul	r19, r24
    73fe:	f0 0d       	add	r31, r0
    7400:	11 24       	eor	r1, r1
    7402:	e7 51       	subi	r30, 0x17	; 23
    7404:	f3 4f       	sbci	r31, 0xF3	; 243
    7406:	85 85       	ldd	r24, Z+13	; 0x0d
    7408:	96 85       	ldd	r25, Z+14	; 0x0e
    740a:	a7 85       	ldd	r26, Z+15	; 0x0f
    740c:	b0 89       	ldd	r27, Z+16	; 0x10
    740e:	01 96       	adiw	r24, 0x01	; 1
    7410:	a1 1d       	adc	r26, r1
    7412:	b1 1d       	adc	r27, r1
    7414:	80 93 6e 0a 	sts	0x0A6E, r24
    7418:	90 93 6f 0a 	sts	0x0A6F, r25
    741c:	a0 93 70 0a 	sts	0x0A70, r26
    7420:	b0 93 71 0a 	sts	0x0A71, r27
		songSize=files[playingFile].fileSize/512;
    7424:	81 89       	ldd	r24, Z+17	; 0x11
    7426:	92 89       	ldd	r25, Z+18	; 0x12
    7428:	a3 89       	ldd	r26, Z+19	; 0x13
    742a:	b4 89       	ldd	r27, Z+20	; 0x14
    742c:	29 e0       	ldi	r18, 0x09	; 9
    742e:	b6 95       	lsr	r27
    7430:	a7 95       	ror	r26
    7432:	97 95       	ror	r25
    7434:	87 95       	ror	r24
    7436:	2a 95       	dec	r18
    7438:	d1 f7       	brne	.-12     	; 0x742e <startSong+0x5a>
    743a:	80 93 76 0a 	sts	0x0A76, r24
    743e:	90 93 77 0a 	sts	0x0A77, r25
    7442:	a0 93 78 0a 	sts	0x0A78, r26
    7446:	b0 93 79 0a 	sts	0x0A79, r27

		loadWaveInfoBlock(&files[playingFile]);
    744a:	cf 01       	movw	r24, r30
    744c:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <loadWaveInfoBlock>
		animateTextLine(true);
    7450:	81 e0       	ldi	r24, 0x01	; 1
    7452:	0e 94 60 39 	call	0x72c0	; 0x72c0 <animateTextLine>
		
		playing=true;
    7456:	81 e0       	ldi	r24, 0x01	; 1
    7458:	80 93 6b 0a 	sts	0x0A6B, r24
		mmc_mixerStart(sectorNo);
    745c:	60 91 6e 0a 	lds	r22, 0x0A6E
    7460:	70 91 6f 0a 	lds	r23, 0x0A6F
    7464:	80 91 70 0a 	lds	r24, 0x0A70
    7468:	90 91 71 0a 	lds	r25, 0x0A71
    746c:	0e 94 03 33 	call	0x6606	; 0x6606 <mmc_mixerStart>
		
}
    7470:	08 95       	ret

00007472 <buttonHandler>:
		cueing=true;
	}
}


void buttonHandler(unsigned char btn,unsigned char event){
    7472:	62 30       	cpi	r22, 0x02	; 2
    7474:	51 f0       	breq	.+20     	; 0x748a <buttonHandler+0x18>
    7476:	63 30       	cpi	r22, 0x03	; 3
    7478:	21 f0       	breq	.+8      	; 0x7482 <buttonHandler+0x10>
    747a:	61 30       	cpi	r22, 0x01	; 1
    747c:	09 f0       	breq	.+2      	; 0x7480 <buttonHandler+0xe>
    747e:	60 c0       	rjmp	.+192    	; 0x7540 <buttonHandler+0xce>
    7480:	14 c0       	rjmp	.+40     	; 0x74aa <buttonHandler+0x38>
	//PrintHexByte(20,10,btn);
	//PrintHexByte(25,10,event);
	
	switch(event){
		case BUTTON_DBLCLICK:			
			if(btn==BTN_FILES)startSong();
    7482:	85 30       	cpi	r24, 0x05	; 5
    7484:	09 f0       	breq	.+2      	; 0x7488 <buttonHandler+0x16>
    7486:	5c c0       	rjmp	.+184    	; 0x7540 <buttonHandler+0xce>
    7488:	07 c0       	rjmp	.+14     	; 0x7498 <buttonHandler+0x26>
			break;

		case BUTTON_CLICK:
			switch(btn){
    748a:	82 30       	cpi	r24, 0x02	; 2
    748c:	41 f0       	breq	.+16     	; 0x749e <buttonHandler+0x2c>
    748e:	83 30       	cpi	r24, 0x03	; 3
    7490:	49 f0       	breq	.+18     	; 0x74a4 <buttonHandler+0x32>
    7492:	81 30       	cpi	r24, 0x01	; 1
    7494:	09 f0       	breq	.+2      	; 0x7498 <buttonHandler+0x26>
    7496:	54 c0       	rjmp	.+168    	; 0x7540 <buttonHandler+0xce>
				case BTN_PLAY:
					startSong();
    7498:	0e 94 ea 39 	call	0x73d4	; 0x73d4 <startSong>
    749c:	08 95       	ret
					break;
				case BTN_PAUSE:
					pauseSong();
    749e:	0e 94 d3 39 	call	0x73a6	; 0x73a6 <pauseSong>
    74a2:	08 95       	ret
					break;
				case BTN_STOP:
					stopSong();
    74a4:	0e 94 ce 39 	call	0x739c	; 0x739c <stopSong>
    74a8:	08 95       	ret
					break;	
			}
			break;
					
		case BUTTON_DOWN:
			switch(btn){
    74aa:	84 30       	cpi	r24, 0x04	; 4
    74ac:	29 f0       	breq	.+10     	; 0x74b8 <buttonHandler+0x46>
    74ae:	85 30       	cpi	r24, 0x05	; 5
    74b0:	99 f0       	breq	.+38     	; 0x74d8 <buttonHandler+0x66>
    74b2:	88 23       	and	r24, r24
    74b4:	09 f0       	breq	.+2      	; 0x74b8 <buttonHandler+0x46>
    74b6:	44 c0       	rjmp	.+136    	; 0x7540 <buttonHandler+0xce>



unsigned char currSkin=0;
void flipSkin(){
	DDRC=skins[currSkin];
    74b8:	80 91 7d 0a 	lds	r24, 0x0A7D
    74bc:	e8 2f       	mov	r30, r24
    74be:	f0 e0       	ldi	r31, 0x00	; 0
    74c0:	e3 5f       	subi	r30, 0xF3	; 243
    74c2:	fe 4f       	sbci	r31, 0xFE	; 254
    74c4:	90 81       	ld	r25, Z
    74c6:	97 b9       	out	0x07, r25	; 7
	
	//PrintHexByte(2,1,skins[currSkin]);
	//PrintBinaryByte(5,1,skins[currSkin]);
	currSkin++;
    74c8:	8f 5f       	subi	r24, 0xFF	; 255
    74ca:	80 93 7d 0a 	sts	0x0A7D, r24
	if(currSkin==sizeof(skins))currSkin=0;
    74ce:	88 30       	cpi	r24, 0x08	; 8
    74d0:	b9 f5       	brne	.+110    	; 0x7540 <buttonHandler+0xce>
    74d2:	10 92 7d 0a 	sts	0x0A7D, r1
    74d6:	08 95       	ret
				case BTN_FORWARD:
					flipSkin();
					break;
				case BTN_FILES:
					//position the cursor on the clicked file name				
					if(GetMouseY()>=112 && GetMouseY()<(112+(fileCount*8))){
    74d8:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <GetMouseY>
    74dc:	80 37       	cpi	r24, 0x70	; 112
    74de:	80 f1       	brcs	.+96     	; 0x7540 <buttonHandler+0xce>
    74e0:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <GetMouseY>
    74e4:	90 e0       	ldi	r25, 0x00	; 0
    74e6:	20 91 74 0a 	lds	r18, 0x0A74
    74ea:	30 91 75 0a 	lds	r19, 0x0A75
    74ee:	22 5f       	subi	r18, 0xF2	; 242
    74f0:	3f 4f       	sbci	r19, 0xFF	; 255
    74f2:	43 e0       	ldi	r20, 0x03	; 3
    74f4:	22 0f       	add	r18, r18
    74f6:	33 1f       	adc	r19, r19
    74f8:	4a 95       	dec	r20
    74fa:	e1 f7       	brne	.-8      	; 0x74f4 <buttonHandler+0x82>
    74fc:	82 17       	cp	r24, r18
    74fe:	93 07       	cpc	r25, r19
    7500:	f8 f4       	brcc	.+62     	; 0x7540 <buttonHandler+0xce>
						PrintChar(x-1,y+cur,' ');
    7502:	60 91 7b 0e 	lds	r22, 0x0E7B
    7506:	70 91 7c 0e 	lds	r23, 0x0E7C
    750a:	80 91 7d 0e 	lds	r24, 0x0E7D
    750e:	90 91 7e 0e 	lds	r25, 0x0E7E
    7512:	68 0f       	add	r22, r24
    7514:	79 1f       	adc	r23, r25
    7516:	80 91 ab 0a 	lds	r24, 0x0AAB
    751a:	90 91 ac 0a 	lds	r25, 0x0AAC
    751e:	40 e2       	ldi	r20, 0x20	; 32
    7520:	01 97       	sbiw	r24, 0x01	; 1
    7522:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
						cur=(GetMouseY()-112)/8;	
    7526:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <GetMouseY>
    752a:	90 e0       	ldi	r25, 0x00	; 0
    752c:	80 57       	subi	r24, 0x70	; 112
    752e:	90 40       	sbci	r25, 0x00	; 0
    7530:	68 e0       	ldi	r22, 0x08	; 8
    7532:	70 e0       	ldi	r23, 0x00	; 0
    7534:	0e 94 61 3f 	call	0x7ec2	; 0x7ec2 <__divmodhi4>
    7538:	70 93 7c 0e 	sts	0x0E7C, r23
    753c:	60 93 7b 0e 	sts	0x0E7B, r22
    7540:	08 95       	ret

00007542 <main>:
	//PrintBinaryByte(5,1,skins[currSkin]);
	currSkin++;
	if(currSkin==sizeof(skins))currSkin=0;
}

int main(){
    7542:	6f 92       	push	r6
    7544:	7f 92       	push	r7
    7546:	9f 92       	push	r9
    7548:	af 92       	push	r10
    754a:	bf 92       	push	r11
    754c:	cf 92       	push	r12
    754e:	df 92       	push	r13
    7550:	ef 92       	push	r14
    7552:	ff 92       	push	r15
    7554:	0f 93       	push	r16
    7556:	1f 93       	push	r17
    7558:	cf 93       	push	r28
    755a:	df 93       	push	r29
	unsigned char c,sliderX=16,sliderY=76;
	unsigned int joy,i,j,k,pos,actionButton;
	long loc=0,newLoc=0;


	infoSong[0]=0;
    755c:	10 92 83 0e 	sts	0x0E83, r1
	

	SetTileTable(main_tileset);
    7560:	8f e7       	ldi	r24, 0x7F	; 127
    7562:	90 e0       	ldi	r25, 0x00	; 0
    7564:	0e 94 0f 25 	call	0x4a1e	; 0x4a1e <SetTileTable>
	SetSpritesTileTable(sprites_tileset);
    7568:	8f e3       	ldi	r24, 0x3F	; 63
    756a:	9e e3       	ldi	r25, 0x3E	; 62
    756c:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <SetSpritesTileTable>
	SetFontTilesIndex(MAIN_TILESET_SIZE);
    7570:	87 e7       	ldi	r24, 0x77	; 119
    7572:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SetFontTilesIndex>
	if(init()==0){ //init the mmc
    7576:	0e 94 22 34 	call	0x6844	; 0x6844 <init>
    757a:	88 23       	and	r24, r24
    757c:	19 f4       	brne	.+6      	; 0x7584 <main+0x42>
		cardDetected=true;
    757e:	81 e0       	ldi	r24, 0x01	; 1
    7580:	80 93 7a 0a 	sts	0x0A7A, r24
	}

	//SetSpriteVisibility(true);

	if(EnableSnesMouse(SPR_MOUSE,map_mouse)==0){
    7584:	6f e1       	ldi	r22, 0x1F	; 31
    7586:	74 e4       	ldi	r23, 0x44	; 68
    7588:	82 e0       	ldi	r24, 0x02	; 2
    758a:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <EnableSnesMouse>
    758e:	88 23       	and	r24, r24
    7590:	19 f4       	brne	.+6      	; 0x7598 <main+0x56>
		useMouse=true;
    7592:	81 e0       	ldi	r24, 0x01	; 1
    7594:	80 93 7b 0a 	sts	0x0A7B, r24
	}

//	SetMouseSensitivity(MOUSE_SENSITIVITY_HIGH);
	actionButton=GetActionButton();
    7598:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <GetActionButton>
    759c:	3c 01       	movw	r6, r24

	DrawMap2(0,0,map_main);
    759e:	4f e3       	ldi	r20, 0x3F	; 63
    75a0:	50 e4       	ldi	r21, 0x40	; 64
    75a2:	60 e0       	ldi	r22, 0x00	; 0
    75a4:	80 e0       	ldi	r24, 0x00	; 0
    75a6:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
	
	createButton(&buttons[BTN_REWIND],2,11,map_btnPrevNormal,map_btnPrevPushed);
    75aa:	00 ed       	ldi	r16, 0xD0	; 208
    75ac:	13 e4       	ldi	r17, 0x43	; 67
    75ae:	28 ec       	ldi	r18, 0xC8	; 200
    75b0:	33 e4       	ldi	r19, 0x43	; 67
    75b2:	4b e0       	ldi	r20, 0x0B	; 11
    75b4:	62 e0       	ldi	r22, 0x02	; 2
    75b6:	89 e3       	ldi	r24, 0x39	; 57
    75b8:	9e e0       	ldi	r25, 0x0E	; 14
    75ba:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <createButton>
	createButton(&buttons[BTN_PLAY],5,11,map_btnPlayNormal,map_btnPlayPushed);
    75be:	00 ee       	ldi	r16, 0xE0	; 224
    75c0:	13 e4       	ldi	r17, 0x43	; 67
    75c2:	28 ed       	ldi	r18, 0xD8	; 216
    75c4:	33 e4       	ldi	r19, 0x43	; 67
    75c6:	4b e0       	ldi	r20, 0x0B	; 11
    75c8:	65 e0       	ldi	r22, 0x05	; 5
    75ca:	84 e4       	ldi	r24, 0x44	; 68
    75cc:	9e e0       	ldi	r25, 0x0E	; 14
    75ce:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <createButton>
	createButton(&buttons[BTN_PAUSE],8,11,map_btnPauseNormal,map_btnPausePushed);
    75d2:	00 ef       	ldi	r16, 0xF0	; 240
    75d4:	13 e4       	ldi	r17, 0x43	; 67
    75d6:	28 ee       	ldi	r18, 0xE8	; 232
    75d8:	33 e4       	ldi	r19, 0x43	; 67
    75da:	4b e0       	ldi	r20, 0x0B	; 11
    75dc:	68 e0       	ldi	r22, 0x08	; 8
    75de:	8f e4       	ldi	r24, 0x4F	; 79
    75e0:	9e e0       	ldi	r25, 0x0E	; 14
    75e2:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <createButton>
	createButton(&buttons[BTN_STOP],11,11,map_btnStopNormal,map_btnStopPushed);
    75e6:	00 e0       	ldi	r16, 0x00	; 0
    75e8:	14 e4       	ldi	r17, 0x44	; 68
    75ea:	28 ef       	ldi	r18, 0xF8	; 248
    75ec:	33 e4       	ldi	r19, 0x43	; 67
    75ee:	4b e0       	ldi	r20, 0x0B	; 11
    75f0:	6b e0       	ldi	r22, 0x0B	; 11
    75f2:	8a e5       	ldi	r24, 0x5A	; 90
    75f4:	9e e0       	ldi	r25, 0x0E	; 14
    75f6:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <createButton>
	createButton(&buttons[BTN_FORWARD],14,11,map_btnNextNormal,map_btnNextPushed);
    75fa:	00 e1       	ldi	r16, 0x10	; 16
    75fc:	14 e4       	ldi	r17, 0x44	; 68
    75fe:	28 e0       	ldi	r18, 0x08	; 8
    7600:	34 e4       	ldi	r19, 0x44	; 68
    7602:	4b e0       	ldi	r20, 0x0B	; 11
    7604:	6e e0       	ldi	r22, 0x0E	; 14
    7606:	85 e6       	ldi	r24, 0x65	; 101
    7608:	9e e0       	ldi	r25, 0x0E	; 14
    760a:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <createButton>
	createAreaButton(&buttons[BTN_FILES], 2,13,26,14);
    760e:	0e e0       	ldi	r16, 0x0E	; 14
    7610:	2a e1       	ldi	r18, 0x1A	; 26
    7612:	4d e0       	ldi	r20, 0x0D	; 13
    7614:	62 e0       	ldi	r22, 0x02	; 2
    7616:	80 e7       	ldi	r24, 0x70	; 112
    7618:	9e e0       	ldi	r25, 0x0E	; 14
    761a:	0e 94 0b 2d 	call	0x5a16	; 0x5a16 <createAreaButton>
	registerButtonHandler(buttonHandler,buttons);
    761e:	69 e3       	ldi	r22, 0x39	; 57
    7620:	7e e0       	ldi	r23, 0x0E	; 14
    7622:	89 e3       	ldi	r24, 0x39	; 57
    7624:	9a e3       	ldi	r25, 0x3A	; 58
    7626:	0e 94 1e 2d 	call	0x5a3c	; 0x5a3c <registerButtonHandler>
    762a:	13 e0       	ldi	r17, 0x03	; 3



	for(i=0;i<11;i++){
		DrawMap2(3+(i*2),4,map_digitBlank);
    762c:	40 ec       	ldi	r20, 0xC0	; 192
    762e:	53 e4       	ldi	r21, 0x43	; 67
    7630:	64 e0       	ldi	r22, 0x04	; 4
    7632:	81 2f       	mov	r24, r17
    7634:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <DrawMap2>
    7638:	1e 5f       	subi	r17, 0xFE	; 254
	createAreaButton(&buttons[BTN_FILES], 2,13,26,14);
	registerButtonHandler(buttonHandler,buttons);



	for(i=0;i<11;i++){
    763a:	19 31       	cpi	r17, 0x19	; 25
    763c:	b9 f7       	brne	.-18     	; 0x762c <main+0xea>
		DrawMap2(3+(i*2),4,map_digitBlank);
	}

	

	printDigits(0,0);
    763e:	20 e0       	ldi	r18, 0x00	; 0
    7640:	30 e0       	ldi	r19, 0x00	; 0
    7642:	40 e0       	ldi	r20, 0x00	; 0
    7644:	50 e0       	ldi	r21, 0x00	; 0
    7646:	60 e0       	ldi	r22, 0x00	; 0
    7648:	70 e0       	ldi	r23, 0x00	; 0
    764a:	80 e0       	ldi	r24, 0x00	; 0
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	0e 94 4d 38 	call	0x709a	; 0x709a <printDigits>
	SetFontTilesIndex(MAIN_TILESET_SIZE+FONT_TILESET_SIZE);
    7652:	87 eb       	ldi	r24, 0xB7	; 183
    7654:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SetFontTilesIndex>
	
	
	if(!cardDetected) noCard();
    7658:	80 91 7a 0a 	lds	r24, 0x0A7A
    765c:	88 23       	and	r24, r24
    765e:	11 f4       	brne	.+4      	; 0x7664 <main+0x122>
    7660:	0e 94 16 34 	call	0x682c	; 0x682c <noCard>

	Print(20,4,PSTR("SECTOR"));
    7664:	41 e6       	ldi	r20, 0x61	; 97
    7666:	54 e4       	ldi	r21, 0x44	; 68
    7668:	64 e0       	ldi	r22, 0x04	; 4
    766a:	70 e0       	ldi	r23, 0x00	; 0
    766c:	84 e1       	ldi	r24, 0x14	; 20
    766e:	90 e0       	ldi	r25, 0x00	; 0
    7670:	0e 94 d0 30 	call	0x61a0	; 0x61a0 <Print>
	LoadRootDirectory(sector.buffer);
    7674:	89 ee       	ldi	r24, 0xE9	; 233
    7676:	9a e0       	ldi	r25, 0x0A	; 10
    7678:	0e 94 6b 34 	call	0x68d6	; 0x68d6 <LoadRootDirectory>
	

	x=3;y=14;cur=0;
    767c:	83 e0       	ldi	r24, 0x03	; 3
    767e:	90 e0       	ldi	r25, 0x00	; 0
    7680:	90 93 ac 0a 	sts	0x0AAC, r25
    7684:	80 93 ab 0a 	sts	0x0AAB, r24
    7688:	8e e0       	ldi	r24, 0x0E	; 14
    768a:	90 e0       	ldi	r25, 0x00	; 0
    768c:	90 93 7e 0e 	sts	0x0E7E, r25
    7690:	80 93 7d 0e 	sts	0x0E7D, r24
    7694:	10 92 7c 0e 	sts	0x0E7C, r1
    7698:	10 92 7b 0e 	sts	0x0E7B, r1
	MapSprite(SPR_SONG_CUR,map_hCursor);
    769c:	68 e1       	ldi	r22, 0x18	; 24
    769e:	74 e4       	ldi	r23, 0x44	; 68
    76a0:	80 e0       	ldi	r24, 0x00	; 0
    76a2:	0e 94 2c 30 	call	0x6058	; 0x6058 <MapSprite>
	SetFontTilesIndex(MAIN_TILESET_SIZE);
    76a6:	87 e7       	ldi	r24, 0x77	; 119
    76a8:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SetFontTilesIndex>
    76ac:	c9 ee       	ldi	r28, 0xE9	; 233
    76ae:	da e0       	ldi	r29, 0x0A	; 10
    76b0:	cc 24       	eor	r12, r12
    76b2:	dd 24       	eor	r13, r13
				pos=0;
				for(j=0;j<8;j++){
					c=sector.files[i].filename[j];
					if(c==0x20)break;
					if(c=='~')c='_';
					files[fileCount].filename[pos++]=c;
    76b4:	b5 e1       	ldi	r27, 0x15	; 21
    76b6:	ab 2e       	mov	r10, r27
    76b8:	b1 2c       	mov	r11, r1
				}
				files[fileCount].filename[pos++]='.';
    76ba:	ae e2       	ldi	r26, 0x2E	; 46
    76bc:	9a 2e       	mov	r9, r26
	MapSprite(SPR_SONG_CUR,map_hCursor);
	SetFontTilesIndex(MAIN_TILESET_SIZE);

	//find files in the sector
	for(i=0;i<16;i++){
		if((sector.files[i].fileAttributes & (FAT_ATTR_HIDDEN|FAT_ATTR_SYSTEM|FAT_ATTR_VOLUME|FAT_ATTR_DIRECTORY|FAT_ATTR_DEVICE))==0){
    76be:	8b 85       	ldd	r24, Y+11	; 0x0b
    76c0:	8e 75       	andi	r24, 0x5E	; 94
    76c2:	09 f0       	breq	.+2      	; 0x76c6 <main+0x184>
    76c4:	c0 c0       	rjmp	.+384    	; 0x7846 <main+0x304>
			if((sector.files[i].filename[0]!=0) && (sector.files[i].filename[0]!=0xe5) && (sector.files[i].filename[0]!=0x05) && (sector.files[i].filename[0]!=0x2e)){									
    76c6:	88 81       	ld	r24, Y
    76c8:	88 23       	and	r24, r24
    76ca:	09 f4       	brne	.+2      	; 0x76ce <main+0x18c>
    76cc:	bc c0       	rjmp	.+376    	; 0x7846 <main+0x304>
    76ce:	85 3e       	cpi	r24, 0xE5	; 229
    76d0:	09 f4       	brne	.+2      	; 0x76d4 <main+0x192>
    76d2:	b9 c0       	rjmp	.+370    	; 0x7846 <main+0x304>
    76d4:	85 30       	cpi	r24, 0x05	; 5
    76d6:	09 f4       	brne	.+2      	; 0x76da <main+0x198>
    76d8:	b6 c0       	rjmp	.+364    	; 0x7846 <main+0x304>
    76da:	8e 32       	cpi	r24, 0x2E	; 46
    76dc:	09 f4       	brne	.+2      	; 0x76e0 <main+0x19e>
    76de:	b3 c0       	rjmp	.+358    	; 0x7846 <main+0x304>
    76e0:	d6 01       	movw	r26, r12
    76e2:	f5 e0       	ldi	r31, 0x05	; 5
    76e4:	aa 0f       	add	r26, r26
    76e6:	bb 1f       	adc	r27, r27
    76e8:	fa 95       	dec	r31
    76ea:	e1 f7       	brne	.-8      	; 0x76e4 <main+0x1a2>
    76ec:	a7 51       	subi	r26, 0x17	; 23
    76ee:	b5 4f       	sbci	r27, 0xF5	; 245
    76f0:	00 e0       	ldi	r16, 0x00	; 0
    76f2:	10 e0       	ldi	r17, 0x00	; 0
				
				pos=0;
				for(j=0;j<8;j++){
					c=sector.files[i].filename[j];
    76f4:	2c 91       	ld	r18, X
					if(c==0x20)break;
    76f6:	20 32       	cpi	r18, 0x20	; 32
    76f8:	c9 f0       	breq	.+50     	; 0x772c <main+0x1ea>
					if(c=='~')c='_';
    76fa:	2e 37       	cpi	r18, 0x7E	; 126
    76fc:	09 f4       	brne	.+2      	; 0x7700 <main+0x1be>
    76fe:	2f e5       	ldi	r18, 0x5F	; 95
					files[fileCount].filename[pos++]=c;
    7700:	80 91 74 0a 	lds	r24, 0x0A74
    7704:	90 91 75 0a 	lds	r25, 0x0A75
    7708:	8a 9d       	mul	r24, r10
    770a:	f0 01       	movw	r30, r0
    770c:	8b 9d       	mul	r24, r11
    770e:	f0 0d       	add	r31, r0
    7710:	9a 9d       	mul	r25, r10
    7712:	f0 0d       	add	r31, r0
    7714:	11 24       	eor	r1, r1
    7716:	e0 0f       	add	r30, r16
    7718:	f1 1f       	adc	r31, r17
    771a:	e7 51       	subi	r30, 0x17	; 23
    771c:	f3 4f       	sbci	r31, 0xF3	; 243
    771e:	20 83       	st	Z, r18
    7720:	0f 5f       	subi	r16, 0xFF	; 255
    7722:	1f 4f       	sbci	r17, 0xFF	; 255
    7724:	11 96       	adiw	r26, 0x01	; 1
	for(i=0;i<16;i++){
		if((sector.files[i].fileAttributes & (FAT_ATTR_HIDDEN|FAT_ATTR_SYSTEM|FAT_ATTR_VOLUME|FAT_ATTR_DIRECTORY|FAT_ATTR_DEVICE))==0){
			if((sector.files[i].filename[0]!=0) && (sector.files[i].filename[0]!=0xe5) && (sector.files[i].filename[0]!=0x05) && (sector.files[i].filename[0]!=0x2e)){									
				
				pos=0;
				for(j=0;j<8;j++){
    7726:	08 30       	cpi	r16, 0x08	; 8
    7728:	11 05       	cpc	r17, r1
    772a:	21 f7       	brne	.-56     	; 0x76f4 <main+0x1b2>
					c=sector.files[i].filename[j];
					if(c==0x20)break;
					if(c=='~')c='_';
					files[fileCount].filename[pos++]=c;
				}
				files[fileCount].filename[pos++]='.';
    772c:	80 91 74 0a 	lds	r24, 0x0A74
    7730:	90 91 75 0a 	lds	r25, 0x0A75
    7734:	8a 9d       	mul	r24, r10
    7736:	90 01       	movw	r18, r0
    7738:	8b 9d       	mul	r24, r11
    773a:	30 0d       	add	r19, r0
    773c:	9a 9d       	mul	r25, r10
    773e:	30 0d       	add	r19, r0
    7740:	11 24       	eor	r1, r1
    7742:	f9 01       	movw	r30, r18
    7744:	e0 0f       	add	r30, r16
    7746:	f1 1f       	adc	r31, r17
    7748:	e7 51       	subi	r30, 0x17	; 23
    774a:	f3 4f       	sbci	r31, 0xF3	; 243
    774c:	90 82       	st	Z, r9
    774e:	d8 01       	movw	r26, r16
    7750:	11 96       	adiw	r26, 0x01	; 1
				for(k=0;k<3;k++){
					c=sector.files[i].extension[k];
    7752:	88 85       	ldd	r24, Y+8	; 0x08
					if(c==0x20)break;
    7754:	80 32       	cpi	r24, 0x20	; 32
    7756:	d9 f0       	breq	.+54     	; 0x778e <main+0x24c>
					files[fileCount].filename[pos++]=c;
    7758:	f9 01       	movw	r30, r18
    775a:	ea 0f       	add	r30, r26
    775c:	fb 1f       	adc	r31, r27
    775e:	e7 51       	subi	r30, 0x17	; 23
    7760:	f3 4f       	sbci	r31, 0xF3	; 243
    7762:	80 83       	st	Z, r24
    7764:	11 96       	adiw	r26, 0x01	; 1
					if(c=='~')c='_';
					files[fileCount].filename[pos++]=c;
				}
				files[fileCount].filename[pos++]='.';
				for(k=0;k<3;k++){
					c=sector.files[i].extension[k];
    7766:	89 85       	ldd	r24, Y+9	; 0x09
					if(c==0x20)break;
    7768:	80 32       	cpi	r24, 0x20	; 32
    776a:	89 f0       	breq	.+34     	; 0x778e <main+0x24c>
					files[fileCount].filename[pos++]=c;
    776c:	f9 01       	movw	r30, r18
    776e:	ea 0f       	add	r30, r26
    7770:	fb 1f       	adc	r31, r27
    7772:	e7 51       	subi	r30, 0x17	; 23
    7774:	f3 4f       	sbci	r31, 0xF3	; 243
    7776:	80 83       	st	Z, r24
    7778:	11 96       	adiw	r26, 0x01	; 1
					if(c=='~')c='_';
					files[fileCount].filename[pos++]=c;
				}
				files[fileCount].filename[pos++]='.';
				for(k=0;k<3;k++){
					c=sector.files[i].extension[k];
    777a:	8a 85       	ldd	r24, Y+10	; 0x0a
					if(c==0x20)break;
    777c:	80 32       	cpi	r24, 0x20	; 32
    777e:	39 f0       	breq	.+14     	; 0x778e <main+0x24c>
					files[fileCount].filename[pos++]=c;
    7780:	f9 01       	movw	r30, r18
    7782:	ea 0f       	add	r30, r26
    7784:	fb 1f       	adc	r31, r27
    7786:	e7 51       	subi	r30, 0x17	; 23
    7788:	f3 4f       	sbci	r31, 0xF3	; 243
    778a:	80 83       	st	Z, r24
    778c:	11 96       	adiw	r26, 0x01	; 1
				}
				files[fileCount].filename[pos]=0;
    778e:	e0 90 74 0a 	lds	r14, 0x0A74
    7792:	f0 90 75 0a 	lds	r15, 0x0A75
    7796:	ea 9c       	mul	r14, r10
    7798:	80 01       	movw	r16, r0
    779a:	eb 9c       	mul	r14, r11
    779c:	10 0d       	add	r17, r0
    779e:	fa 9c       	mul	r15, r10
    77a0:	10 0d       	add	r17, r0
    77a2:	11 24       	eor	r1, r1
    77a4:	a0 0f       	add	r26, r16
    77a6:	b1 1f       	adc	r27, r17
    77a8:	a7 51       	subi	r26, 0x17	; 23
    77aa:	b3 4f       	sbci	r27, 0xF3	; 243
    77ac:	1c 92       	st	X, r1

				files[fileCount].fileSize=sector.files[i].fileSize;				
    77ae:	07 51       	subi	r16, 0x17	; 23
    77b0:	13 4f       	sbci	r17, 0xF3	; 243
    77b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    77b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    77b6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    77b8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    77ba:	f8 01       	movw	r30, r16
    77bc:	81 8b       	std	Z+17, r24	; 0x11
    77be:	92 8b       	std	Z+18, r25	; 0x12
    77c0:	a3 8b       	std	Z+19, r26	; 0x13
    77c2:	b4 8b       	std	Z+20, r27	; 0x14
				files[fileCount].firstSector=GetFileSector(&sector.files[i]);	
    77c4:	ce 01       	movw	r24, r28
    77c6:	0e 94 ca 33 	call	0x6794	; 0x6794 <GetFileSector>
    77ca:	f8 01       	movw	r30, r16
    77cc:	65 87       	std	Z+13, r22	; 0x0d
    77ce:	76 87       	std	Z+14, r23	; 0x0e
    77d0:	87 87       	std	Z+15, r24	; 0x0f
    77d2:	90 8b       	std	Z+16, r25	; 0x10
				
				PrintRam(x,y+fileCount,files[fileCount].filename);
    77d4:	80 91 7d 0e 	lds	r24, 0x0E7D
    77d8:	90 91 7e 0e 	lds	r25, 0x0E7E
    77dc:	e8 0e       	add	r14, r24
    77de:	f9 1e       	adc	r15, r25
    77e0:	a8 01       	movw	r20, r16
    77e2:	b7 01       	movw	r22, r14
    77e4:	80 91 ab 0a 	lds	r24, 0x0AAB
    77e8:	90 91 ac 0a 	lds	r25, 0x0AAC
    77ec:	0e 94 b5 30 	call	0x616a	; 0x616a <PrintRam>
				//PrintLong(x+21,y+fileCount,files[fileCount].fileSize);
				printFileTime(x+16,y+fileCount,(files[fileCount].fileSize/512));
    77f0:	80 91 74 0a 	lds	r24, 0x0A74
    77f4:	90 91 75 0a 	lds	r25, 0x0A75
    77f8:	8a 9d       	mul	r24, r10
    77fa:	f0 01       	movw	r30, r0
    77fc:	8b 9d       	mul	r24, r11
    77fe:	f0 0d       	add	r31, r0
    7800:	9a 9d       	mul	r25, r10
    7802:	f0 0d       	add	r31, r0
    7804:	11 24       	eor	r1, r1
    7806:	e7 51       	subi	r30, 0x17	; 23
    7808:	f3 4f       	sbci	r31, 0xF3	; 243
    780a:	21 89       	ldd	r18, Z+17	; 0x11
    780c:	32 89       	ldd	r19, Z+18	; 0x12
    780e:	43 89       	ldd	r20, Z+19	; 0x13
    7810:	54 89       	ldd	r21, Z+20	; 0x14
    7812:	e9 e0       	ldi	r30, 0x09	; 9
    7814:	56 95       	lsr	r21
    7816:	47 95       	ror	r20
    7818:	37 95       	ror	r19
    781a:	27 95       	ror	r18
    781c:	ea 95       	dec	r30
    781e:	d1 f7       	brne	.-12     	; 0x7814 <main+0x2d2>
    7820:	60 91 7d 0e 	lds	r22, 0x0E7D
    7824:	68 0f       	add	r22, r24
    7826:	80 91 ab 0a 	lds	r24, 0x0AAB
    782a:	80 5f       	subi	r24, 0xF0	; 240
    782c:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <printFileTime>

				
				fileCount++;
    7830:	80 91 74 0a 	lds	r24, 0x0A74
    7834:	90 91 75 0a 	lds	r25, 0x0A75
    7838:	01 96       	adiw	r24, 0x01	; 1
    783a:	90 93 75 0a 	sts	0x0A75, r25
    783e:	80 93 74 0a 	sts	0x0A74, r24
				if(fileCount==15) break; //can't fit more than 13 for now			
    7842:	0f 97       	sbiw	r24, 0x0f	; 15
    7844:	49 f0       	breq	.+18     	; 0x7858 <main+0x316>
	x=3;y=14;cur=0;
	MapSprite(SPR_SONG_CUR,map_hCursor);
	SetFontTilesIndex(MAIN_TILESET_SIZE);

	//find files in the sector
	for(i=0;i<16;i++){
    7846:	08 94       	sec
    7848:	c1 1c       	adc	r12, r1
    784a:	d1 1c       	adc	r13, r1
    784c:	a0 96       	adiw	r28, 0x20	; 32
    784e:	f0 e1       	ldi	r31, 0x10	; 16
    7850:	cf 16       	cp	r12, r31
    7852:	d1 04       	cpc	r13, r1
    7854:	09 f0       	breq	.+2      	; 0x7858 <main+0x316>
    7856:	33 cf       	rjmp	.-410    	; 0x76be <main+0x17c>
		}
	}


	c='^';
	MoveSprite(SPR_SONG_CUR,sliderX,sliderY,2,1);
    7858:	01 e0       	ldi	r16, 0x01	; 1
    785a:	22 e0       	ldi	r18, 0x02	; 2
    785c:	4c e4       	ldi	r20, 0x4C	; 76
    785e:	60 e1       	ldi	r22, 0x10	; 16
    7860:	80 e0       	ldi	r24, 0x00	; 0
    7862:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <MoveSprite>
		//	PrintByte(20,3,loc,true);		
		//	PrintByte(25,3,newLoc,true);

			if((mouseX>=sprites[SPR_SONG_CUR].x && mouseX<(sprites[SPR_SONG_CUR].x+16) && mouseY>=76 && mouseY<=82) || cueing){
			
					cueing=true;
    7866:	99 24       	eor	r9, r9
    7868:	93 94       	inc	r9
					newLoc=mouseX-sliderX;
					if(newLoc<0) newLoc=0;
					if(newLoc>=(sliderX+196)) newLoc=(sliderX+196)-1;
					sectorNo=((newLoc*songSize)/196)+files[playingFile].firstSector;
    786a:	75 e1       	ldi	r23, 0x15	; 21
    786c:	a7 2e       	mov	r10, r23
    786e:	b1 2c       	mov	r11, r1

	
	unsigned char mouseX,mouseY;
  	while (1)
  	{
		WaitVsync(1);
    7870:	81 e0       	ldi	r24, 0x01	; 1
    7872:	90 e0       	ldi	r25, 0x00	; 0
    7874:	0e 94 9a 30 	call	0x6134	; 0x6134 <WaitVsync>

		processButtons();		
    7878:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <processButtons>


		mouseX=GetMouseX();
    787c:	0e 94 00 2d 	call	0x5a00	; 0x5a00 <GetMouseX>
    7880:	18 2f       	mov	r17, r24
		mouseY=GetMouseY();
    7882:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <GetMouseY>
    7886:	08 2f       	mov	r16, r24




		animateTextLine(false);
    7888:	80 e0       	ldi	r24, 0x00	; 0
    788a:	0e 94 60 39 	call	0x72c0	; 0x72c0 <animateTextLine>
		PrintHexLong(19,5,sectorNo);
    788e:	20 91 6e 0a 	lds	r18, 0x0A6E
    7892:	30 91 6f 0a 	lds	r19, 0x0A6F
    7896:	40 91 70 0a 	lds	r20, 0x0A70
    789a:	50 91 71 0a 	lds	r21, 0x0A71
    789e:	65 e0       	ldi	r22, 0x05	; 5
    78a0:	83 e1       	ldi	r24, 0x13	; 19
    78a2:	0e 94 0d 31 	call	0x621a	; 0x621a <PrintHexLong>
		SetFontTilesIndex(MAIN_TILESET_SIZE);
    78a6:	87 e7       	ldi	r24, 0x77	; 119
    78a8:	0e 94 07 25 	call	0x4a0e	; 0x4a0e <SetFontTilesIndex>


		if(!cueing && playing) sectorNo=mmc_mixerGetCurrentSector();
    78ac:	80 91 6c 0a 	lds	r24, 0x0A6C
    78b0:	88 23       	and	r24, r24
    78b2:	71 f4       	brne	.+28     	; 0x78d0 <main+0x38e>
    78b4:	80 91 6b 0a 	lds	r24, 0x0A6B
    78b8:	88 23       	and	r24, r24
    78ba:	51 f0       	breq	.+20     	; 0x78d0 <main+0x38e>
    78bc:	0e 94 10 32 	call	0x6420	; 0x6420 <mmc_mixerGetCurrentSector>
    78c0:	60 93 6e 0a 	sts	0x0A6E, r22
    78c4:	70 93 6f 0a 	sts	0x0A6F, r23
    78c8:	80 93 70 0a 	sts	0x0A70, r24
    78cc:	90 93 71 0a 	sts	0x0A71, r25



		joy=ReadJoypad(0);
    78d0:	80 e0       	ldi	r24, 0x00	; 0
    78d2:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    78d6:	ec 01       	movw	r28, r24

		//PrintInt(6,1,joy&actionButton,true);
		//PrintHexByte(6,2,(char)cueing);

		//handle slider
		if(joy&actionButton){
    78d8:	6c 01       	movw	r12, r24
    78da:	c6 20       	and	r12, r6
    78dc:	d7 20       	and	r13, r7
    78de:	c1 14       	cp	r12, r1
    78e0:	d1 04       	cpc	r13, r1
    78e2:	09 f4       	brne	.+2      	; 0x78e6 <main+0x3a4>
    78e4:	5e c0       	rjmp	.+188    	; 0x79a2 <main+0x460>
			//PrintByte(20,2,mouseX,true);		
		//	PrintByte(25,2,mouseY,true);
		//	PrintByte(20,3,loc,true);		
		//	PrintByte(25,3,newLoc,true);

			if((mouseX>=sprites[SPR_SONG_CUR].x && mouseX<(sprites[SPR_SONG_CUR].x+16) && mouseY>=76 && mouseY<=82) || cueing){
    78e6:	80 91 8f 0a 	lds	r24, 0x0A8F
    78ea:	18 17       	cp	r17, r24
    78ec:	58 f0       	brcs	.+22     	; 0x7904 <main+0x3c2>
    78ee:	90 e0       	ldi	r25, 0x00	; 0
    78f0:	0f 96       	adiw	r24, 0x0f	; 15
    78f2:	21 2f       	mov	r18, r17
    78f4:	30 e0       	ldi	r19, 0x00	; 0
    78f6:	82 17       	cp	r24, r18
    78f8:	93 07       	cpc	r25, r19
    78fa:	24 f0       	brlt	.+8      	; 0x7904 <main+0x3c2>
    78fc:	0c 34       	cpi	r16, 0x4C	; 76
    78fe:	10 f0       	brcs	.+4      	; 0x7904 <main+0x3c2>
    7900:	03 35       	cpi	r16, 0x53	; 83
    7902:	28 f0       	brcs	.+10     	; 0x790e <main+0x3cc>
    7904:	80 91 6c 0a 	lds	r24, 0x0A6C
    7908:	88 23       	and	r24, r24
    790a:	09 f4       	brne	.+2      	; 0x790e <main+0x3cc>
    790c:	4a c0       	rjmp	.+148    	; 0x79a2 <main+0x460>
			
					cueing=true;
    790e:	90 92 6c 0a 	sts	0x0A6C, r9
					newLoc=mouseX-sliderX;
    7912:	81 2f       	mov	r24, r17
    7914:	90 e0       	ldi	r25, 0x00	; 0
    7916:	40 97       	sbiw	r24, 0x10	; 16
    7918:	7c 01       	movw	r14, r24
    791a:	00 27       	eor	r16, r16
    791c:	f7 fc       	sbrc	r15, 7
    791e:	00 95       	com	r16
    7920:	10 2f       	mov	r17, r16
					if(newLoc<0) newLoc=0;
    7922:	17 ff       	sbrs	r17, 7
    7924:	04 c0       	rjmp	.+8      	; 0x792e <main+0x3ec>
    7926:	ee 24       	eor	r14, r14
    7928:	ff 24       	eor	r15, r15
    792a:	87 01       	movw	r16, r14
    792c:	0b c0       	rjmp	.+22     	; 0x7944 <main+0x402>
					if(newLoc>=(sliderX+196)) newLoc=(sliderX+196)-1;
    792e:	84 ed       	ldi	r24, 0xD4	; 212
    7930:	e8 16       	cp	r14, r24
    7932:	f1 04       	cpc	r15, r1
    7934:	01 05       	cpc	r16, r1
    7936:	11 05       	cpc	r17, r1
    7938:	2c f0       	brlt	.+10     	; 0x7944 <main+0x402>
    793a:	63 ed       	ldi	r22, 0xD3	; 211
    793c:	e6 2e       	mov	r14, r22
    793e:	f1 2c       	mov	r15, r1
    7940:	01 2d       	mov	r16, r1
    7942:	11 2d       	mov	r17, r1
					sectorNo=((newLoc*songSize)/196)+files[playingFile].firstSector;
    7944:	20 91 76 0a 	lds	r18, 0x0A76
    7948:	30 91 77 0a 	lds	r19, 0x0A77
    794c:	40 91 78 0a 	lds	r20, 0x0A78
    7950:	50 91 79 0a 	lds	r21, 0x0A79
    7954:	c8 01       	movw	r24, r16
    7956:	b7 01       	movw	r22, r14
    7958:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__mulsi3>
    795c:	24 ec       	ldi	r18, 0xC4	; 196
    795e:	30 e0       	ldi	r19, 0x00	; 0
    7960:	40 e0       	ldi	r20, 0x00	; 0
    7962:	50 e0       	ldi	r21, 0x00	; 0
    7964:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7968:	80 91 72 0a 	lds	r24, 0x0A72
    796c:	90 91 73 0a 	lds	r25, 0x0A73
    7970:	8a 9d       	mul	r24, r10
    7972:	f0 01       	movw	r30, r0
    7974:	8b 9d       	mul	r24, r11
    7976:	f0 0d       	add	r31, r0
    7978:	9a 9d       	mul	r25, r10
    797a:	f0 0d       	add	r31, r0
    797c:	11 24       	eor	r1, r1
    797e:	e7 51       	subi	r30, 0x17	; 23
    7980:	f3 4f       	sbci	r31, 0xF3	; 243
    7982:	85 85       	ldd	r24, Z+13	; 0x0d
    7984:	96 85       	ldd	r25, Z+14	; 0x0e
    7986:	a7 85       	ldd	r26, Z+15	; 0x0f
    7988:	b0 89       	ldd	r27, Z+16	; 0x10
    798a:	82 0f       	add	r24, r18
    798c:	93 1f       	adc	r25, r19
    798e:	a4 1f       	adc	r26, r20
    7990:	b5 1f       	adc	r27, r21
    7992:	80 93 6e 0a 	sts	0x0A6E, r24
    7996:	90 93 6f 0a 	sts	0x0A6F, r25
    799a:	a0 93 70 0a 	sts	0x0A70, r26
    799e:	b0 93 71 0a 	sts	0x0A71, r27
			}
		}



		if(useMouse){
    79a2:	80 91 7b 0a 	lds	r24, 0x0A7B
    79a6:	88 23       	and	r24, r24
    79a8:	21 f0       	breq	.+8      	; 0x79b2 <main+0x470>
		
	
					
			if( (joy&actionButton)==0 && cueing==true){
    79aa:	cd 28       	or	r12, r13
    79ac:	09 f0       	breq	.+2      	; 0x79b0 <main+0x46e>
    79ae:	aa c1       	rjmp	.+852    	; 0x7d04 <main+0x7c2>
    79b0:	99 c1       	rjmp	.+818    	; 0x7ce4 <main+0x7a2>



		}else{
		
			if(joy&BTN_START){
    79b2:	c3 ff       	sbrs	r28, 3
    79b4:	73 c0       	rjmp	.+230    	; 0x7a9c <main+0x55a>
				if(playing){
    79b6:	80 91 6b 0a 	lds	r24, 0x0A6B
    79ba:	88 23       	and	r24, r24
    79bc:	29 f0       	breq	.+10     	; 0x79c8 <main+0x486>
					mmc_mixerStop();
    79be:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <mmc_mixerStop>
					playing=false;
    79c2:	10 92 6b 0a 	sts	0x0A6B, r1
    79c6:	65 c0       	rjmp	.+202    	; 0x7a92 <main+0x550>
				}else{
					if(cur!=playingFile || sectorNo==0){				
    79c8:	20 91 7b 0e 	lds	r18, 0x0E7B
    79cc:	30 91 7c 0e 	lds	r19, 0x0E7C
    79d0:	80 91 72 0a 	lds	r24, 0x0A72
    79d4:	90 91 73 0a 	lds	r25, 0x0A73
    79d8:	28 17       	cp	r18, r24
    79da:	39 07       	cpc	r19, r25
    79dc:	61 f4       	brne	.+24     	; 0x79f6 <main+0x4b4>
    79de:	80 91 6e 0a 	lds	r24, 0x0A6E
    79e2:	90 91 6f 0a 	lds	r25, 0x0A6F
    79e6:	a0 91 70 0a 	lds	r26, 0x0A70
    79ea:	b0 91 71 0a 	lds	r27, 0x0A71
    79ee:	00 97       	sbiw	r24, 0x00	; 0
    79f0:	a1 05       	cpc	r26, r1
    79f2:	b1 05       	cpc	r27, r1
    79f4:	e1 f4       	brne	.+56     	; 0x7a2e <main+0x4ec>
						playingFile=cur;
    79f6:	30 93 73 0a 	sts	0x0A73, r19
    79fa:	20 93 72 0a 	sts	0x0A72, r18
						sectorNo=files[playingFile].firstSector+1; //skip WAV header
    79fe:	2a 9d       	mul	r18, r10
    7a00:	f0 01       	movw	r30, r0
    7a02:	2b 9d       	mul	r18, r11
    7a04:	f0 0d       	add	r31, r0
    7a06:	3a 9d       	mul	r19, r10
    7a08:	f0 0d       	add	r31, r0
    7a0a:	11 24       	eor	r1, r1
    7a0c:	e7 51       	subi	r30, 0x17	; 23
    7a0e:	f3 4f       	sbci	r31, 0xF3	; 243
    7a10:	85 85       	ldd	r24, Z+13	; 0x0d
    7a12:	96 85       	ldd	r25, Z+14	; 0x0e
    7a14:	a7 85       	ldd	r26, Z+15	; 0x0f
    7a16:	b0 89       	ldd	r27, Z+16	; 0x10
    7a18:	01 96       	adiw	r24, 0x01	; 1
    7a1a:	a1 1d       	adc	r26, r1
    7a1c:	b1 1d       	adc	r27, r1
    7a1e:	80 93 6e 0a 	sts	0x0A6E, r24
    7a22:	90 93 6f 0a 	sts	0x0A6F, r25
    7a26:	a0 93 70 0a 	sts	0x0A70, r26
    7a2a:	b0 93 71 0a 	sts	0x0A71, r27
					}
					songSize=files[playingFile].fileSize/512;
    7a2e:	80 91 72 0a 	lds	r24, 0x0A72
    7a32:	90 91 73 0a 	lds	r25, 0x0A73
    7a36:	8a 9d       	mul	r24, r10
    7a38:	f0 01       	movw	r30, r0
    7a3a:	8b 9d       	mul	r24, r11
    7a3c:	f0 0d       	add	r31, r0
    7a3e:	9a 9d       	mul	r25, r10
    7a40:	f0 0d       	add	r31, r0
    7a42:	11 24       	eor	r1, r1
    7a44:	e7 51       	subi	r30, 0x17	; 23
    7a46:	f3 4f       	sbci	r31, 0xF3	; 243
    7a48:	81 89       	ldd	r24, Z+17	; 0x11
    7a4a:	92 89       	ldd	r25, Z+18	; 0x12
    7a4c:	a3 89       	ldd	r26, Z+19	; 0x13
    7a4e:	b4 89       	ldd	r27, Z+20	; 0x14
    7a50:	59 e0       	ldi	r21, 0x09	; 9
    7a52:	b6 95       	lsr	r27
    7a54:	a7 95       	ror	r26
    7a56:	97 95       	ror	r25
    7a58:	87 95       	ror	r24
    7a5a:	5a 95       	dec	r21
    7a5c:	d1 f7       	brne	.-12     	; 0x7a52 <main+0x510>
    7a5e:	80 93 76 0a 	sts	0x0A76, r24
    7a62:	90 93 77 0a 	sts	0x0A77, r25
    7a66:	a0 93 78 0a 	sts	0x0A78, r26
    7a6a:	b0 93 79 0a 	sts	0x0A79, r27

					loadWaveInfoBlock(&files[playingFile]);
    7a6e:	cf 01       	movw	r24, r30
    7a70:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <loadWaveInfoBlock>
					animateTextLine(true);
    7a74:	81 e0       	ldi	r24, 0x01	; 1
    7a76:	0e 94 60 39 	call	0x72c0	; 0x72c0 <animateTextLine>
					mmc_mixerStart(sectorNo);
    7a7a:	60 91 6e 0a 	lds	r22, 0x0A6E
    7a7e:	70 91 6f 0a 	lds	r23, 0x0A6F
    7a82:	80 91 70 0a 	lds	r24, 0x0A70
    7a86:	90 91 71 0a 	lds	r25, 0x0A71
    7a8a:	0e 94 03 33 	call	0x6606	; 0x6606 <mmc_mixerStart>
					playing=true;
    7a8e:	90 92 6b 0a 	sts	0x0A6B, r9
				
				}
				while(ReadJoypad(0)!=0);
    7a92:	80 e0       	ldi	r24, 0x00	; 0
    7a94:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    7a98:	89 2b       	or	r24, r25
    7a9a:	d9 f7       	brne	.-10     	; 0x7a92 <main+0x550>
			}


			if(joy&BTN_DOWN){
    7a9c:	c5 ff       	sbrs	r28, 5
    7a9e:	28 c0       	rjmp	.+80     	; 0x7af0 <main+0x5ae>
				PrintChar(x-1,y+cur,' ');
    7aa0:	60 91 7b 0e 	lds	r22, 0x0E7B
    7aa4:	70 91 7c 0e 	lds	r23, 0x0E7C
    7aa8:	80 91 7d 0e 	lds	r24, 0x0E7D
    7aac:	90 91 7e 0e 	lds	r25, 0x0E7E
    7ab0:	68 0f       	add	r22, r24
    7ab2:	79 1f       	adc	r23, r25
    7ab4:	80 91 ab 0a 	lds	r24, 0x0AAB
    7ab8:	90 91 ac 0a 	lds	r25, 0x0AAC
    7abc:	40 e2       	ldi	r20, 0x20	; 32
    7abe:	01 97       	sbiw	r24, 0x01	; 1
    7ac0:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
				if(cur<fileCount)cur++;
    7ac4:	20 91 7b 0e 	lds	r18, 0x0E7B
    7ac8:	30 91 7c 0e 	lds	r19, 0x0E7C
    7acc:	80 91 74 0a 	lds	r24, 0x0A74
    7ad0:	90 91 75 0a 	lds	r25, 0x0A75
    7ad4:	28 17       	cp	r18, r24
    7ad6:	39 07       	cpc	r19, r25
    7ad8:	30 f4       	brcc	.+12     	; 0x7ae6 <main+0x5a4>
    7ada:	2f 5f       	subi	r18, 0xFF	; 255
    7adc:	3f 4f       	sbci	r19, 0xFF	; 255
    7ade:	30 93 7c 0e 	sts	0x0E7C, r19
    7ae2:	20 93 7b 0e 	sts	0x0E7B, r18
				while(ReadJoypad(0)!=0);
    7ae6:	80 e0       	ldi	r24, 0x00	; 0
    7ae8:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    7aec:	89 2b       	or	r24, r25
    7aee:	d9 f7       	brne	.-10     	; 0x7ae6 <main+0x5a4>
			}

			if(joy&BTN_UP){
    7af0:	c4 ff       	sbrs	r28, 4
    7af2:	22 c0       	rjmp	.+68     	; 0x7b38 <main+0x5f6>
				PrintChar(x-1,y+cur,' ');
    7af4:	60 91 7b 0e 	lds	r22, 0x0E7B
    7af8:	70 91 7c 0e 	lds	r23, 0x0E7C
    7afc:	80 91 7d 0e 	lds	r24, 0x0E7D
    7b00:	90 91 7e 0e 	lds	r25, 0x0E7E
    7b04:	68 0f       	add	r22, r24
    7b06:	79 1f       	adc	r23, r25
    7b08:	80 91 ab 0a 	lds	r24, 0x0AAB
    7b0c:	90 91 ac 0a 	lds	r25, 0x0AAC
    7b10:	40 e2       	ldi	r20, 0x20	; 32
    7b12:	01 97       	sbiw	r24, 0x01	; 1
    7b14:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
				if(cur>0)cur--;
    7b18:	80 91 7b 0e 	lds	r24, 0x0E7B
    7b1c:	90 91 7c 0e 	lds	r25, 0x0E7C
    7b20:	00 97       	sbiw	r24, 0x00	; 0
    7b22:	29 f0       	breq	.+10     	; 0x7b2e <main+0x5ec>
    7b24:	01 97       	sbiw	r24, 0x01	; 1
    7b26:	90 93 7c 0e 	sts	0x0E7C, r25
    7b2a:	80 93 7b 0e 	sts	0x0E7B, r24
				while(ReadJoypad(0)!=0);
    7b2e:	80 e0       	ldi	r24, 0x00	; 0
    7b30:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    7b34:	89 2b       	or	r24, r25
    7b36:	d9 f7       	brne	.-10     	; 0x7b2e <main+0x5ec>
			}

			if(joy&BTN_X){
    7b38:	d1 ff       	sbrs	r29, 1
    7b3a:	14 c0       	rjmp	.+40     	; 0x7b64 <main+0x622>



unsigned char currSkin=0;
void flipSkin(){
	DDRC=skins[currSkin];
    7b3c:	80 91 7d 0a 	lds	r24, 0x0A7D
    7b40:	e8 2f       	mov	r30, r24
    7b42:	f0 e0       	ldi	r31, 0x00	; 0
    7b44:	e3 5f       	subi	r30, 0xF3	; 243
    7b46:	fe 4f       	sbci	r31, 0xFE	; 254
    7b48:	90 81       	ld	r25, Z
    7b4a:	97 b9       	out	0x07, r25	; 7
	
	//PrintHexByte(2,1,skins[currSkin]);
	//PrintBinaryByte(5,1,skins[currSkin]);
	currSkin++;
    7b4c:	8f 5f       	subi	r24, 0xFF	; 255
    7b4e:	80 93 7d 0a 	sts	0x0A7D, r24
	if(currSkin==sizeof(skins))currSkin=0;
    7b52:	88 30       	cpi	r24, 0x08	; 8
    7b54:	11 f4       	brne	.+4      	; 0x7b5a <main+0x618>
    7b56:	10 92 7d 0a 	sts	0x0A7D, r1
				while(ReadJoypad(0)!=0);
			}

			if(joy&BTN_X){
				flipSkin();
				while(ReadJoypad(0)!=0);
    7b5a:	80 e0       	ldi	r24, 0x00	; 0
    7b5c:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <ReadJoypad>
    7b60:	89 2b       	or	r24, r25
    7b62:	d9 f7       	brne	.-10     	; 0x7b5a <main+0x618>
			}



			if(joy&BTN_SL){
    7b64:	8e 01       	movw	r16, r28
    7b66:	00 70       	andi	r16, 0x00	; 0
    7b68:	14 70       	andi	r17, 0x04	; 4
    7b6a:	d2 ff       	sbrs	r29, 2
    7b6c:	53 c0       	rjmp	.+166    	; 0x7c14 <main+0x6d2>
				if(playing){
    7b6e:	80 91 6b 0a 	lds	r24, 0x0A6B
    7b72:	88 23       	and	r24, r24
    7b74:	09 f4       	brne	.+2      	; 0x7b78 <main+0x636>
    7b76:	4e c0       	rjmp	.+156    	; 0x7c14 <main+0x6d2>
					sectorNo-=100; //fast-forward
    7b78:	80 91 6e 0a 	lds	r24, 0x0A6E
    7b7c:	90 91 6f 0a 	lds	r25, 0x0A6F
    7b80:	a0 91 70 0a 	lds	r26, 0x0A70
    7b84:	b0 91 71 0a 	lds	r27, 0x0A71
    7b88:	84 56       	subi	r24, 0x64	; 100
    7b8a:	90 40       	sbci	r25, 0x00	; 0
    7b8c:	a0 40       	sbci	r26, 0x00	; 0
    7b8e:	b0 40       	sbci	r27, 0x00	; 0
    7b90:	80 93 6e 0a 	sts	0x0A6E, r24
    7b94:	90 93 6f 0a 	sts	0x0A6F, r25
    7b98:	a0 93 70 0a 	sts	0x0A70, r26
    7b9c:	b0 93 71 0a 	sts	0x0A71, r27
    7ba0:	8c 59       	subi	r24, 0x9C	; 156
    7ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ba4:	af 4f       	sbci	r26, 0xFF	; 255
    7ba6:	bf 4f       	sbci	r27, 0xFF	; 255
					if(joy&BTN_A)sectorNo-=400;//fast-forward even faster
    7ba8:	d0 ff       	sbrs	r29, 0
    7baa:	0c c0       	rjmp	.+24     	; 0x7bc4 <main+0x682>
    7bac:	84 5f       	subi	r24, 0xF4	; 244
    7bae:	91 40       	sbci	r25, 0x01	; 1
    7bb0:	a0 40       	sbci	r26, 0x00	; 0
    7bb2:	b0 40       	sbci	r27, 0x00	; 0
    7bb4:	80 93 6e 0a 	sts	0x0A6E, r24
    7bb8:	90 93 6f 0a 	sts	0x0A6F, r25
    7bbc:	a0 93 70 0a 	sts	0x0A70, r26
    7bc0:	b0 93 71 0a 	sts	0x0A71, r27
					if(sectorNo<files[playingFile].firstSector){
    7bc4:	80 91 72 0a 	lds	r24, 0x0A72
    7bc8:	90 91 73 0a 	lds	r25, 0x0A73
    7bcc:	8a 9d       	mul	r24, r10
    7bce:	f0 01       	movw	r30, r0
    7bd0:	8b 9d       	mul	r24, r11
    7bd2:	f0 0d       	add	r31, r0
    7bd4:	9a 9d       	mul	r25, r10
    7bd6:	f0 0d       	add	r31, r0
    7bd8:	11 24       	eor	r1, r1
    7bda:	e7 51       	subi	r30, 0x17	; 23
    7bdc:	f3 4f       	sbci	r31, 0xF3	; 243
    7bde:	25 85       	ldd	r18, Z+13	; 0x0d
    7be0:	36 85       	ldd	r19, Z+14	; 0x0e
    7be2:	47 85       	ldd	r20, Z+15	; 0x0f
    7be4:	50 89       	ldd	r21, Z+16	; 0x10
    7be6:	80 91 6e 0a 	lds	r24, 0x0A6E
    7bea:	90 91 6f 0a 	lds	r25, 0x0A6F
    7bee:	a0 91 70 0a 	lds	r26, 0x0A70
    7bf2:	b0 91 71 0a 	lds	r27, 0x0A71
    7bf6:	82 17       	cp	r24, r18
    7bf8:	93 07       	cpc	r25, r19
    7bfa:	a4 07       	cpc	r26, r20
    7bfc:	b5 07       	cpc	r27, r21
    7bfe:	40 f4       	brcc	.+16     	; 0x7c10 <main+0x6ce>
						sectorNo=files[playingFile].firstSector;
    7c00:	20 93 6e 0a 	sts	0x0A6E, r18
    7c04:	30 93 6f 0a 	sts	0x0A6F, r19
    7c08:	40 93 70 0a 	sts	0x0A70, r20
    7c0c:	50 93 71 0a 	sts	0x0A71, r21
					}
					cueing=true;
    7c10:	90 92 6c 0a 	sts	0x0A6C, r9
				}
			}

			if(joy&BTN_SR){
    7c14:	be 01       	movw	r22, r28
    7c16:	60 70       	andi	r22, 0x00	; 0
    7c18:	78 70       	andi	r23, 0x08	; 8
    7c1a:	d3 ff       	sbrs	r29, 3
    7c1c:	5f c0       	rjmp	.+190    	; 0x7cdc <main+0x79a>
				if(playing){				
    7c1e:	80 91 6b 0a 	lds	r24, 0x0A6B
    7c22:	88 23       	and	r24, r24
    7c24:	09 f4       	brne	.+2      	; 0x7c28 <main+0x6e6>
    7c26:	5a c0       	rjmp	.+180    	; 0x7cdc <main+0x79a>
					sectorNo+=100;//fast-forward
    7c28:	80 91 6e 0a 	lds	r24, 0x0A6E
    7c2c:	90 91 6f 0a 	lds	r25, 0x0A6F
    7c30:	a0 91 70 0a 	lds	r26, 0x0A70
    7c34:	b0 91 71 0a 	lds	r27, 0x0A71
    7c38:	8c 59       	subi	r24, 0x9C	; 156
    7c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    7c3c:	af 4f       	sbci	r26, 0xFF	; 255
    7c3e:	bf 4f       	sbci	r27, 0xFF	; 255
    7c40:	80 93 6e 0a 	sts	0x0A6E, r24
    7c44:	90 93 6f 0a 	sts	0x0A6F, r25
    7c48:	a0 93 70 0a 	sts	0x0A70, r26
    7c4c:	b0 93 71 0a 	sts	0x0A71, r27
    7c50:	84 56       	subi	r24, 0x64	; 100
    7c52:	90 40       	sbci	r25, 0x00	; 0
    7c54:	a0 40       	sbci	r26, 0x00	; 0
    7c56:	b0 40       	sbci	r27, 0x00	; 0
					if(joy&BTN_A)sectorNo+=400;//fast-forward even faster
    7c58:	d0 ff       	sbrs	r29, 0
    7c5a:	0c c0       	rjmp	.+24     	; 0x7c74 <main+0x732>
    7c5c:	8c 50       	subi	r24, 0x0C	; 12
    7c5e:	9e 4f       	sbci	r25, 0xFE	; 254
    7c60:	af 4f       	sbci	r26, 0xFF	; 255
    7c62:	bf 4f       	sbci	r27, 0xFF	; 255
    7c64:	80 93 6e 0a 	sts	0x0A6E, r24
    7c68:	90 93 6f 0a 	sts	0x0A6F, r25
    7c6c:	a0 93 70 0a 	sts	0x0A70, r26
    7c70:	b0 93 71 0a 	sts	0x0A71, r27
					if(sectorNo>(files[playingFile].firstSector+songSize)){
    7c74:	80 91 72 0a 	lds	r24, 0x0A72
    7c78:	90 91 73 0a 	lds	r25, 0x0A73
    7c7c:	8a 9d       	mul	r24, r10
    7c7e:	f0 01       	movw	r30, r0
    7c80:	8b 9d       	mul	r24, r11
    7c82:	f0 0d       	add	r31, r0
    7c84:	9a 9d       	mul	r25, r10
    7c86:	f0 0d       	add	r31, r0
    7c88:	11 24       	eor	r1, r1
    7c8a:	e7 51       	subi	r30, 0x17	; 23
    7c8c:	f3 4f       	sbci	r31, 0xF3	; 243
    7c8e:	20 91 76 0a 	lds	r18, 0x0A76
    7c92:	30 91 77 0a 	lds	r19, 0x0A77
    7c96:	40 91 78 0a 	lds	r20, 0x0A78
    7c9a:	50 91 79 0a 	lds	r21, 0x0A79
    7c9e:	85 85       	ldd	r24, Z+13	; 0x0d
    7ca0:	96 85       	ldd	r25, Z+14	; 0x0e
    7ca2:	a7 85       	ldd	r26, Z+15	; 0x0f
    7ca4:	b0 89       	ldd	r27, Z+16	; 0x10
    7ca6:	28 0f       	add	r18, r24
    7ca8:	39 1f       	adc	r19, r25
    7caa:	4a 1f       	adc	r20, r26
    7cac:	5b 1f       	adc	r21, r27
    7cae:	80 91 6e 0a 	lds	r24, 0x0A6E
    7cb2:	90 91 6f 0a 	lds	r25, 0x0A6F
    7cb6:	a0 91 70 0a 	lds	r26, 0x0A70
    7cba:	b0 91 71 0a 	lds	r27, 0x0A71
    7cbe:	28 17       	cp	r18, r24
    7cc0:	39 07       	cpc	r19, r25
    7cc2:	4a 07       	cpc	r20, r26
    7cc4:	5b 07       	cpc	r21, r27
    7cc6:	40 f4       	brcc	.+16     	; 0x7cd8 <main+0x796>
						sectorNo=files[playingFile].firstSector+songSize;
    7cc8:	20 93 6e 0a 	sts	0x0A6E, r18
    7ccc:	30 93 6f 0a 	sts	0x0A6F, r19
    7cd0:	40 93 70 0a 	sts	0x0A70, r20
    7cd4:	50 93 71 0a 	sts	0x0A71, r21
					}
					cueing=true;
    7cd8:	90 92 6c 0a 	sts	0x0A6C, r9
				}
			}
		
			if( (joy&BTN_SL)==0 && (joy&BTN_SR)==0 && cueing==true){
    7cdc:	01 2b       	or	r16, r17
    7cde:	91 f4       	brne	.+36     	; 0x7d04 <main+0x7c2>
    7ce0:	67 2b       	or	r22, r23
    7ce2:	81 f4       	brne	.+32     	; 0x7d04 <main+0x7c2>
    7ce4:	80 91 6c 0a 	lds	r24, 0x0A6C
    7ce8:	88 23       	and	r24, r24
    7cea:	61 f0       	breq	.+24     	; 0x7d04 <main+0x7c2>
				cueing=false;
    7cec:	10 92 6c 0a 	sts	0x0A6C, r1
				mmc_mixerStart(sectorNo);
    7cf0:	60 91 6e 0a 	lds	r22, 0x0A6E
    7cf4:	70 91 6f 0a 	lds	r23, 0x0A6F
    7cf8:	80 91 70 0a 	lds	r24, 0x0A70
    7cfc:	90 91 71 0a 	lds	r25, 0x0A71
    7d00:	0e 94 03 33 	call	0x6606	; 0x6606 <mmc_mixerStart>

		
		}


		if(playing){
    7d04:	80 91 6b 0a 	lds	r24, 0x0A6B
    7d08:	88 23       	and	r24, r24
    7d0a:	09 f4       	brne	.+2      	; 0x7d0e <main+0x7cc>
    7d0c:	94 c0       	rjmp	.+296    	; 0x7e36 <main+0x8f4>
		//	}
		//	anim++;



			loc=(196*(sectorNo-files[playingFile].firstSector))/songSize;
    7d0e:	80 91 72 0a 	lds	r24, 0x0A72
    7d12:	90 91 73 0a 	lds	r25, 0x0A73
    7d16:	8a 9d       	mul	r24, r10
    7d18:	f0 01       	movw	r30, r0
    7d1a:	8b 9d       	mul	r24, r11
    7d1c:	f0 0d       	add	r31, r0
    7d1e:	9a 9d       	mul	r25, r10
    7d20:	f0 0d       	add	r31, r0
    7d22:	11 24       	eor	r1, r1
    7d24:	e7 51       	subi	r30, 0x17	; 23
    7d26:	f3 4f       	sbci	r31, 0xF3	; 243
    7d28:	60 91 6e 0a 	lds	r22, 0x0A6E
    7d2c:	70 91 6f 0a 	lds	r23, 0x0A6F
    7d30:	80 91 70 0a 	lds	r24, 0x0A70
    7d34:	90 91 71 0a 	lds	r25, 0x0A71
    7d38:	25 85       	ldd	r18, Z+13	; 0x0d
    7d3a:	36 85       	ldd	r19, Z+14	; 0x0e
    7d3c:	47 85       	ldd	r20, Z+15	; 0x0f
    7d3e:	50 89       	ldd	r21, Z+16	; 0x10
    7d40:	62 1b       	sub	r22, r18
    7d42:	73 0b       	sbc	r23, r19
    7d44:	84 0b       	sbc	r24, r20
    7d46:	95 0b       	sbc	r25, r21
    7d48:	24 ec       	ldi	r18, 0xC4	; 196
    7d4a:	30 e0       	ldi	r19, 0x00	; 0
    7d4c:	40 e0       	ldi	r20, 0x00	; 0
    7d4e:	50 e0       	ldi	r21, 0x00	; 0
    7d50:	0e 94 2e 3f 	call	0x7e5c	; 0x7e5c <__mulsi3>
    7d54:	20 91 76 0a 	lds	r18, 0x0A76
    7d58:	30 91 77 0a 	lds	r19, 0x0A77
    7d5c:	40 91 78 0a 	lds	r20, 0x0A78
    7d60:	50 91 79 0a 	lds	r21, 0x0A79
    7d64:	0e 94 74 3f 	call	0x7ee8	; 0x7ee8 <__udivmodsi4>
    7d68:	b9 01       	movw	r22, r18
    7d6a:	ca 01       	movw	r24, r20
			if(loc<196){
    7d6c:	64 3c       	cpi	r22, 0xC4	; 196
    7d6e:	71 05       	cpc	r23, r1
    7d70:	81 05       	cpc	r24, r1
    7d72:	91 05       	cpc	r25, r1
    7d74:	3c f4       	brge	.+14     	; 0x7d84 <main+0x842>
				MoveSprite(SPR_SONG_CUR,sliderX+loc,sliderY,2,1);
    7d76:	60 5f       	subi	r22, 0xF0	; 240
    7d78:	01 e0       	ldi	r16, 0x01	; 1
    7d7a:	22 e0       	ldi	r18, 0x02	; 2
    7d7c:	4c e4       	ldi	r20, 0x4C	; 76
    7d7e:	80 e0       	ldi	r24, 0x00	; 0
    7d80:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <MoveSprite>
			}else{
				loc=196;
			}

			if(sectorNo>=(songSize+files[playingFile].firstSector) && !cueing){
    7d84:	80 91 72 0a 	lds	r24, 0x0A72
    7d88:	90 91 73 0a 	lds	r25, 0x0A73
    7d8c:	8a 9d       	mul	r24, r10
    7d8e:	f0 01       	movw	r30, r0
    7d90:	8b 9d       	mul	r24, r11
    7d92:	f0 0d       	add	r31, r0
    7d94:	9a 9d       	mul	r25, r10
    7d96:	f0 0d       	add	r31, r0
    7d98:	11 24       	eor	r1, r1
    7d9a:	e7 51       	subi	r30, 0x17	; 23
    7d9c:	f3 4f       	sbci	r31, 0xF3	; 243
    7d9e:	85 85       	ldd	r24, Z+13	; 0x0d
    7da0:	96 85       	ldd	r25, Z+14	; 0x0e
    7da2:	a7 85       	ldd	r26, Z+15	; 0x0f
    7da4:	b0 89       	ldd	r27, Z+16	; 0x10
    7da6:	20 91 76 0a 	lds	r18, 0x0A76
    7daa:	30 91 77 0a 	lds	r19, 0x0A77
    7dae:	40 91 78 0a 	lds	r20, 0x0A78
    7db2:	50 91 79 0a 	lds	r21, 0x0A79
    7db6:	82 0f       	add	r24, r18
    7db8:	93 1f       	adc	r25, r19
    7dba:	a4 1f       	adc	r26, r20
    7dbc:	b5 1f       	adc	r27, r21
    7dbe:	20 91 6e 0a 	lds	r18, 0x0A6E
    7dc2:	30 91 6f 0a 	lds	r19, 0x0A6F
    7dc6:	40 91 70 0a 	lds	r20, 0x0A70
    7dca:	50 91 71 0a 	lds	r21, 0x0A71
    7dce:	28 17       	cp	r18, r24
    7dd0:	39 07       	cpc	r19, r25
    7dd2:	4a 07       	cpc	r20, r26
    7dd4:	5b 07       	cpc	r21, r27
    7dd6:	40 f0       	brcs	.+16     	; 0x7de8 <main+0x8a6>
    7dd8:	80 91 6c 0a 	lds	r24, 0x0A6C
    7ddc:	88 23       	and	r24, r24
    7dde:	21 f4       	brne	.+8      	; 0x7de8 <main+0x8a6>
				mmc_mixerStop();
    7de0:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <mmc_mixerStop>
				playing=false;
    7de4:	10 92 6b 0a 	sts	0x0A6B, r1
			}
			
			printDigits(sectorNo-files[playingFile].firstSector,songSize );
    7de8:	20 91 76 0a 	lds	r18, 0x0A76
    7dec:	30 91 77 0a 	lds	r19, 0x0A77
    7df0:	40 91 78 0a 	lds	r20, 0x0A78
    7df4:	50 91 79 0a 	lds	r21, 0x0A79
    7df8:	80 91 72 0a 	lds	r24, 0x0A72
    7dfc:	90 91 73 0a 	lds	r25, 0x0A73
    7e00:	8a 9d       	mul	r24, r10
    7e02:	f0 01       	movw	r30, r0
    7e04:	8b 9d       	mul	r24, r11
    7e06:	f0 0d       	add	r31, r0
    7e08:	9a 9d       	mul	r25, r10
    7e0a:	f0 0d       	add	r31, r0
    7e0c:	11 24       	eor	r1, r1
    7e0e:	e7 51       	subi	r30, 0x17	; 23
    7e10:	f3 4f       	sbci	r31, 0xF3	; 243
    7e12:	60 91 6e 0a 	lds	r22, 0x0A6E
    7e16:	70 91 6f 0a 	lds	r23, 0x0A6F
    7e1a:	80 91 70 0a 	lds	r24, 0x0A70
    7e1e:	90 91 71 0a 	lds	r25, 0x0A71
    7e22:	e5 84       	ldd	r14, Z+13	; 0x0d
    7e24:	f6 84       	ldd	r15, Z+14	; 0x0e
    7e26:	07 85       	ldd	r16, Z+15	; 0x0f
    7e28:	10 89       	ldd	r17, Z+16	; 0x10
    7e2a:	6e 19       	sub	r22, r14
    7e2c:	7f 09       	sbc	r23, r15
    7e2e:	80 0b       	sbc	r24, r16
    7e30:	91 0b       	sbc	r25, r17
    7e32:	0e 94 4d 38 	call	0x709a	; 0x709a <printDigits>



		}

		PrintChar(x-1,y+cur,'^');
    7e36:	60 91 7b 0e 	lds	r22, 0x0E7B
    7e3a:	70 91 7c 0e 	lds	r23, 0x0E7C
    7e3e:	80 91 7d 0e 	lds	r24, 0x0E7D
    7e42:	90 91 7e 0e 	lds	r25, 0x0E7E
    7e46:	68 0f       	add	r22, r24
    7e48:	79 1f       	adc	r23, r25
    7e4a:	80 91 ab 0a 	lds	r24, 0x0AAB
    7e4e:	90 91 ac 0a 	lds	r25, 0x0AAC
    7e52:	4e e5       	ldi	r20, 0x5E	; 94
    7e54:	01 97       	sbiw	r24, 0x01	; 1
    7e56:	0e 94 b1 30 	call	0x6162	; 0x6162 <PrintChar>
    7e5a:	0a cd       	rjmp	.-1516   	; 0x7870 <main+0x32e>

00007e5c <__mulsi3>:
    7e5c:	62 9f       	mul	r22, r18
    7e5e:	d0 01       	movw	r26, r0
    7e60:	73 9f       	mul	r23, r19
    7e62:	f0 01       	movw	r30, r0
    7e64:	82 9f       	mul	r24, r18
    7e66:	e0 0d       	add	r30, r0
    7e68:	f1 1d       	adc	r31, r1
    7e6a:	64 9f       	mul	r22, r20
    7e6c:	e0 0d       	add	r30, r0
    7e6e:	f1 1d       	adc	r31, r1
    7e70:	92 9f       	mul	r25, r18
    7e72:	f0 0d       	add	r31, r0
    7e74:	83 9f       	mul	r24, r19
    7e76:	f0 0d       	add	r31, r0
    7e78:	74 9f       	mul	r23, r20
    7e7a:	f0 0d       	add	r31, r0
    7e7c:	65 9f       	mul	r22, r21
    7e7e:	f0 0d       	add	r31, r0
    7e80:	99 27       	eor	r25, r25
    7e82:	72 9f       	mul	r23, r18
    7e84:	b0 0d       	add	r27, r0
    7e86:	e1 1d       	adc	r30, r1
    7e88:	f9 1f       	adc	r31, r25
    7e8a:	63 9f       	mul	r22, r19
    7e8c:	b0 0d       	add	r27, r0
    7e8e:	e1 1d       	adc	r30, r1
    7e90:	f9 1f       	adc	r31, r25
    7e92:	bd 01       	movw	r22, r26
    7e94:	cf 01       	movw	r24, r30
    7e96:	11 24       	eor	r1, r1
    7e98:	08 95       	ret

00007e9a <__udivmodhi4>:
    7e9a:	aa 1b       	sub	r26, r26
    7e9c:	bb 1b       	sub	r27, r27
    7e9e:	51 e1       	ldi	r21, 0x11	; 17
    7ea0:	07 c0       	rjmp	.+14     	; 0x7eb0 <__udivmodhi4_ep>

00007ea2 <__udivmodhi4_loop>:
    7ea2:	aa 1f       	adc	r26, r26
    7ea4:	bb 1f       	adc	r27, r27
    7ea6:	a6 17       	cp	r26, r22
    7ea8:	b7 07       	cpc	r27, r23
    7eaa:	10 f0       	brcs	.+4      	; 0x7eb0 <__udivmodhi4_ep>
    7eac:	a6 1b       	sub	r26, r22
    7eae:	b7 0b       	sbc	r27, r23

00007eb0 <__udivmodhi4_ep>:
    7eb0:	88 1f       	adc	r24, r24
    7eb2:	99 1f       	adc	r25, r25
    7eb4:	5a 95       	dec	r21
    7eb6:	a9 f7       	brne	.-22     	; 0x7ea2 <__udivmodhi4_loop>
    7eb8:	80 95       	com	r24
    7eba:	90 95       	com	r25
    7ebc:	bc 01       	movw	r22, r24
    7ebe:	cd 01       	movw	r24, r26
    7ec0:	08 95       	ret

00007ec2 <__divmodhi4>:
    7ec2:	97 fb       	bst	r25, 7
    7ec4:	09 2e       	mov	r0, r25
    7ec6:	07 26       	eor	r0, r23
    7ec8:	0a d0       	rcall	.+20     	; 0x7ede <__divmodhi4_neg1>
    7eca:	77 fd       	sbrc	r23, 7
    7ecc:	04 d0       	rcall	.+8      	; 0x7ed6 <__divmodhi4_neg2>
    7ece:	e5 df       	rcall	.-54     	; 0x7e9a <__udivmodhi4>
    7ed0:	06 d0       	rcall	.+12     	; 0x7ede <__divmodhi4_neg1>
    7ed2:	00 20       	and	r0, r0
    7ed4:	1a f4       	brpl	.+6      	; 0x7edc <__divmodhi4_exit>

00007ed6 <__divmodhi4_neg2>:
    7ed6:	70 95       	com	r23
    7ed8:	61 95       	neg	r22
    7eda:	7f 4f       	sbci	r23, 0xFF	; 255

00007edc <__divmodhi4_exit>:
    7edc:	08 95       	ret

00007ede <__divmodhi4_neg1>:
    7ede:	f6 f7       	brtc	.-4      	; 0x7edc <__divmodhi4_exit>
    7ee0:	90 95       	com	r25
    7ee2:	81 95       	neg	r24
    7ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ee6:	08 95       	ret

00007ee8 <__udivmodsi4>:
    7ee8:	a1 e2       	ldi	r26, 0x21	; 33
    7eea:	1a 2e       	mov	r1, r26
    7eec:	aa 1b       	sub	r26, r26
    7eee:	bb 1b       	sub	r27, r27
    7ef0:	fd 01       	movw	r30, r26
    7ef2:	0d c0       	rjmp	.+26     	; 0x7f0e <__udivmodsi4_ep>

00007ef4 <__udivmodsi4_loop>:
    7ef4:	aa 1f       	adc	r26, r26
    7ef6:	bb 1f       	adc	r27, r27
    7ef8:	ee 1f       	adc	r30, r30
    7efa:	ff 1f       	adc	r31, r31
    7efc:	a2 17       	cp	r26, r18
    7efe:	b3 07       	cpc	r27, r19
    7f00:	e4 07       	cpc	r30, r20
    7f02:	f5 07       	cpc	r31, r21
    7f04:	20 f0       	brcs	.+8      	; 0x7f0e <__udivmodsi4_ep>
    7f06:	a2 1b       	sub	r26, r18
    7f08:	b3 0b       	sbc	r27, r19
    7f0a:	e4 0b       	sbc	r30, r20
    7f0c:	f5 0b       	sbc	r31, r21

00007f0e <__udivmodsi4_ep>:
    7f0e:	66 1f       	adc	r22, r22
    7f10:	77 1f       	adc	r23, r23
    7f12:	88 1f       	adc	r24, r24
    7f14:	99 1f       	adc	r25, r25
    7f16:	1a 94       	dec	r1
    7f18:	69 f7       	brne	.-38     	; 0x7ef4 <__udivmodsi4_loop>
    7f1a:	60 95       	com	r22
    7f1c:	70 95       	com	r23
    7f1e:	80 95       	com	r24
    7f20:	90 95       	com	r25
    7f22:	9b 01       	movw	r18, r22
    7f24:	ac 01       	movw	r20, r24
    7f26:	bd 01       	movw	r22, r26
    7f28:	cf 01       	movw	r24, r30
    7f2a:	08 95       	ret

00007f2c <__divmodsi4>:
    7f2c:	97 fb       	bst	r25, 7
    7f2e:	09 2e       	mov	r0, r25
    7f30:	05 26       	eor	r0, r21
    7f32:	0e d0       	rcall	.+28     	; 0x7f50 <__divmodsi4_neg1>
    7f34:	57 fd       	sbrc	r21, 7
    7f36:	04 d0       	rcall	.+8      	; 0x7f40 <__divmodsi4_neg2>
    7f38:	d7 df       	rcall	.-82     	; 0x7ee8 <__udivmodsi4>
    7f3a:	0a d0       	rcall	.+20     	; 0x7f50 <__divmodsi4_neg1>
    7f3c:	00 1c       	adc	r0, r0
    7f3e:	38 f4       	brcc	.+14     	; 0x7f4e <__divmodsi4_exit>

00007f40 <__divmodsi4_neg2>:
    7f40:	50 95       	com	r21
    7f42:	40 95       	com	r20
    7f44:	30 95       	com	r19
    7f46:	21 95       	neg	r18
    7f48:	3f 4f       	sbci	r19, 0xFF	; 255
    7f4a:	4f 4f       	sbci	r20, 0xFF	; 255
    7f4c:	5f 4f       	sbci	r21, 0xFF	; 255

00007f4e <__divmodsi4_exit>:
    7f4e:	08 95       	ret

00007f50 <__divmodsi4_neg1>:
    7f50:	f6 f7       	brtc	.-4      	; 0x7f4e <__divmodsi4_exit>
    7f52:	90 95       	com	r25
    7f54:	80 95       	com	r24
    7f56:	70 95       	com	r23
    7f58:	61 95       	neg	r22
    7f5a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f5c:	8f 4f       	sbci	r24, 0xFF	; 255
    7f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    7f60:	08 95       	ret

00007f62 <_exit>:
    7f62:	f8 94       	cli

00007f64 <__stop_program>:
    7f64:	ff cf       	rjmp	.-2      	; 0x7f64 <__stop_program>
